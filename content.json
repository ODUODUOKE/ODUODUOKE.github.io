[{"title":"纷析云-财务软件部署","url":"//8655.html","content":"\n\n[开源项目地址](https://gitee.com/flyemu/public-financial)\n\n## 生产环境部署注意事项\n\n### 项目配置\n![](./纷析云-财务软件部署/Snipaste_2024-03-04_11-21-49.png)\n\n### Nginx配置项\n`upstream配置`\n```\nupstream fxyUpstream {\n    server 192.168.0.127:6789 weight=100 max_fails=3 fail_timeout=30s;\n}\n```\n\n\n`vhost配置`\n```\nserver {\n    listen 8281;   \n\n    access_log  logs/fxy_web.access.log  main;\n\n    #前端页面wab\n    location / {\n        root /usr/local/nginx/html/fxy/;\n        index index.html;\n    }\n\n    #后端java服务\n    location /api {\n        rewrite ^/api/(.*)$ /$1 break;\n        proxy_pass http://fxyUpstream;\n    }\n\n}\n```\n\n## 相关命令\n\n### yarn命令\n\n[yarn命令环境安装](https://blog.csdn.net/LIZHUOLONG1/article/details/125534086)\n\n依赖安装\n```\nyarn install\n```\n\n本地运行\n```\nyarn run serve\n```\n\n打包部署\n```\nyarn run build\n```\n\n> node版本高于1.16打包报错解决\n[问题解决参考博客](https://www.cnblogs.com/snail2018/p/16935437.html)\n```\nSET NODE_OPTIONS=--openssl-legacy-provider && yarn run build\n```\n\n## java 部署启动\n\n[java后台启动`nohub`方式](https://blog.csdn.net/qq_37296212/article/details/114263634)\n\n```\nnohup java -jar financial-0.1.jar &\n```","categories":["开源项目"]},{"title":"漏扫漏洞修复记录","url":"//226.html","content":"\n![](./漏扫漏洞修复记录/after-the-rain-8311416_1920.jpg)\n\n# 漏洞修复记录\n\n## 检测到目标X-Content-Type-Options响应头缺失\n\n**解决方式**\n\nnginx 增加响应头配置：\n```\nadd_header X-Content-Type-Options \"nosniff\"  always; \n```\n\n## 检测到目标X-XSS-Protection响应头缺失\n\n**解决方式**\n```\nadd_header X-XSS-Protection \"1; mode=block\"  always;\n```\n\n## Web服务器未能正确处理异常请求导致Web服务器版本信息泄露，攻击者收集到服务器信息后可进行进一步针对性攻击。\n\n> 针对错误页面做调整优化\n\n## 检测到目标Content-Security-Policy响应头缺失\n\n**解决方式**\n```\nadd_header Content-Security-Policy \"script-src 'self' 'unsafe-inline' 'unsafe-eval'\"     always; \n```\n\n## 检测到目标服务器启用了OPTIONS方法\n\n\n## 检测到目标Referrer-Policy响应头缺失\n**解决方式**\n```\nadd_header Referrer-Policy \"origin\" always;\n```\n\n## 检测到目标Strict-Transport-Security响应头缺失\n**解决方式**\n```\nadd_header Strict-Transport-Security \"max-age=63072000; includeSubdomains; preload\" always;\n```\n\n## 检测到目标X-Permitted-Cross-Domain-Policies响应头缺失\n**解决方式**\n```\nadd_header X-Permitted-Cross-Domain-Policies  \"master-only\" always;\n```\n\n## 检测到目标X-Download-Options响应头缺失\n**解决方式**\n```\nadd_header X-Download-Options \"noopen\" always;\n```\n\n## 点击劫持：X-Frame-Options未配置\n**解决方式**\n```\nadd_header X-Frame-Options \"sameorigin\" always;\n```\n\n# 内链补充\n[Nginx漏扫响应头缺失问题处理](/posts/42494.html)\n\n[ICMPtimestamp请求响应漏洞处理(CVE-1999-0524)](/posts/12224.html)\n\n[允许Traceroute探测漏洞处理](/posts/57813.html)\n\n# Nginx安全配置样例\n```\nhttp {\n    autoindex off;\n    server_tokens off;\n    client_max_body_size 64m;\n    \n    ## -----------------------------------------\n    ##  1、此处省略其他 http 节点配置\n    ##  2、下面的配置也可以写在 server {} 中\n    ## -----------------------------------------\n    \n    #解决 [ 检测到目标Content-Security-Policy响应头缺失 ]\n    add_header Content-Security-Policy \"script-src 'self' 'unsafe-inline' 'unsafe-eval'\" always;\n    #解决 [ 检测到目标Referrer-Policy响应头缺失 ]\n    add_header Referrer-Policy \"same-origin\" always;\n    #解决 [ 检测到目标Strict-Transport-Security响应头缺失 ]\n    add_header Strict-Transport-Security \"max-age=63072000; includeSubdomains; preload\" always;\n    #解决 [ 检测到目标X-Content-Type-Options响应头缺失 ]\n    add_header X-Content-Type-Options \"nosniff\" always;\n    #解决 [ 检测到目标X-Download-Options响应头缺失 ]\n    add_header X-Download-Options \"noopen\" always;\n    #解决 [ 点击劫持：X-Frame-Options未配置 ]\n    add_header X-Frame-Options \"sameorigin\" always;\n    #解决 [ 检测到目标X-Permitted-Cross-Domain-Policies响应头缺失 ]\n    add_header X-Permitted-Cross-Domain-Policies  \"none\" always;                  \n    #解决 [ 检测到目标X-XSS-Protection响应头缺失 ]\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    \n    # 告诉搜索引擎爬虫不要索引或跟踪网站上的页面                        \n    add_header X-Robots-Tag \"none\" always;\n    #隐藏HTTP响应头中的\"X-Powered-By\"字段。这个字段通常包含有关服务器所使用的技术和版本的信息。\n    proxy_hide_header  X-Powered-By;\n    #这个字段通常包含有关服务器上运行的后端应用程序或应用程序框架的信息,与之前提到的proxy_hide_header类似，但针对FastCGI服务器。\n    fastcgi_hide_header X-Powered-By;\n}\n```\n\n# 相关参考博客\n[参考博客01](https://www.cnblogs.com/hi-eric/p/17623117.html)\n\n[参考博客02](https://developer.aliyun.com/article/1281951)\n\n[参考博客03](https://www.cnblogs.com/ghostwolf1/p/14039240.html)","categories":["漏扫漏洞"]},{"title":"菜谱-红烧鸭","url":"//3593.html","content":"\n## 材料\n- 主食：\n  - 鸭（半只）\n- 配料：\n  - 腌菜：泡椒（10-15颗）、泡姜（中规格，2个）\n  - 干辣椒（2个）、姜片（3片）、桂皮（1个，切3段）、八角（3颗）\n  - 酱油（1勺）、黄豆酱（1勺）、辣椒酱（1勺）\n  - 盐（少许）\n- 配菜：\n  - 土豆（中小规格-长度5cm左右，8个）\n  - 大蒜（1个,一瓣一瓣剥整粒）、小葱（3颗）、青红尖辣椒（4颗,2青2红）\n\n## 步骤\n\n1. 将已切好的鸭肉冷水下锅，烧至沸腾状态（保持煮开至3-5分钟），倒入洗菜盆（底部有滤水孔洞），用热水冲洗过滤掉血沫后放一旁备用。\n\n2. 锅中放油，油烧热放入鸭肉\n    - 全程大火，炒出鸭油\n    - 放入姜片、桂皮、八角\n    - 沿锅沿倒入料酒\n    - 继续翻炒均匀\n3. 加入黄豆酱、辣椒酱、少许干辣椒、生抽 \n   1. > 可提前将黄豆酱、辣椒酱、生抽导入一个碗里搅拌均匀\n   - 倒入热水（水位高度稍稍高于鸭肉）\n   - 放入配菜-土豆块\n   - 中火，焖煮15-20分钟\n4. 待汤汁收干前，放入大蒜瓣（6-8整颗）\n   - 盖上锅盖煮3-5分钟\n   - 加入切段小葱、青红椒配色\n5. 出锅装盘\n\n","categories":["菜谱"]},{"title":"2024-04-23","url":"//3984.html","content":"\n## 以后一定别偷懒，睡觉记得点蚊香\n\n我昨天晚上睡觉的时候，觉得天气冷应该不得有蚊子了。 然后窗户开着小缝的没关，早上起来的时候发现手臂上好几个包！\n\n卧槽，我被文字当血包... 而且是免费的！\n\n今天晚上我一定要点蚊香，你们敢来吸血，就一定要抱着必死的决心才行哟！\n\n## 昨天跳绳1000个，8分钟\n我觉得 我也是很厉害了。。。\n跳绳已经买回来了，就是一直没用上还。 然后昨天吃了饭之后大概有一个半小时，我也耍够了我就下楼去跳绳，其实当时也没想那么多，刚开始的时候跳着还不累，然后慢慢的感觉有点支持不住的感觉。 \n也没想其他的，然后心里想着要不就跳满1000个就上楼了。 \n\n其实，也不用跳那么多是吧！慢慢来也行啊！\n\n跳绳完之后，我腿都是软的。。。然后上楼还要做拉伸，反正看网上都是说 运动后记得拉伸，不然要巴拉巴拉的。\n\n## oh hyoper OS\n我可是馋了很久的了，等hyoper OS，哈哈哈，之前说是2024年4-6月推送的，等啊等啊，然后之前在小米社区看到有的帖子说是一直刷新刷新检查更新很多遍就可以 收到 hyoper OS推送。 \n\n我也是真的去试过了的，呜呜呜 为啥我试过了没有收到。 \n\n然后今天也是偶然情况，早上刚好6点多样子起来看了下手机，然后监控系统有 报警，想着要不去处理下，大早上6：30起来打开电脑，然后一边顺手就拿着手机，检测更新！\n\n哈哈哈，收到了！更新升级推送哎！ 我当然是第一时间上船~\n\n就我目前的感知来说的，好像升级了之后和MIUI14区别不是那么大，更像是换UI了一样，可能底层的东西咋也说不上来，只有长时间的体验之后才能有所知道吧。 \n\n我还去网上搜了，就是说目前可能属于灰度升级，明天名额都是有限的，然后我可能就是刚刚好，得到了这个升级更新。 他们有的人说，打开进去看有，然后重新进去之后就没有了。 哈哈 nice\n\n## 可能工作也分时间\n\n上午的时候呢，我感觉我眼睛快瞎了一样！\n下午的时候呢，我感觉不觉得眼睛要瞎了...\n\n难道眼睛也分时间？\n\n反正就是上午，我眼镜都一点不想看电脑，不看手机屏幕的那种。 而且真当时有工作要做的时候，是一种折磨啊！\n\n下午我也不知道为啥，不晓得是不是和中午午休了的有关系，反正下午用眼没那么不舒服的感觉。 \n\n上午眼睛就是酸胀，然后我经常一会儿就揉揉眼。如果经常是这种情况，我可能就要合理安排工作项了，然后下午的时候盯屏幕要好一点，上午就尽量不看那么久的屏幕了。 \n\n## 朋友圈？ 我不发了都 ok\n\n我基本已经不再发朋友圈了，除非有时候是因为工作宣传这种，我基本不发。 因为我真的认可的是，我不希望别人窥探到我的生活。而且我的情绪外人能感同身受吗？ \n\n我在意的人，在意我的人，不需要通过朋友圈也能了解我的。 \n\n精致的朋友圈，唯一作用可能就是让不认识的人短时间能够对你有一个大致的认识。\n\n我认为，好的事情没必要在朋友圈里面说，坏的情绪也没必要在朋友圈说。 真正关心你的人，一定会知道你的这些事儿。\n\n我认识一个熟悉的朋友，ta的朋友圈里面总是美美的照片、有时候吧，偶尔看到发的朋友圈文案我都看不懂，我认为不那么接地气吧。 （我不能一下子看懂ta表达的意思），还有就是 我这个朋友真的是好看的那种类型，但是ta的朋友圈照片也会在修一波！ 所以说，朋友圈未必真实，是别人想给你看到的东西而已。\n\n## 对了，补充下 \n\n回南京的事儿，我给老东家的人事提了，目前不知道结果。 感觉自己也不是那么看重这件事儿。 能回去必然是工资会翻倍，但是不回去 我现在难道还活不下去吗？ 那倒是不至于的。 \n\n就像我告诉自己的要拥抱变化，没有正确的选择，要让选择变的正确。\n\n## 吐槽自己下\n\n今天老妈去逛商场的时候，又帮我买衣服了！我 ... \n我已经足够大了，我可以自己买的。 谢谢妈妈大人，真的 要不您把钱给我，让我自己去买也行啊。 \n\n现在的自己，140斤了卧槽，然后属于不修边幅的那种。。。谈对象嘛，有点远还，我...慢慢努力，让家里人少操心我太多了哈。 \n\n嘿嘿，看帅哥是真的养眼啊！我咋个也看帅哥了，真好看。 比美女好看多了，...  等等等，我还是喜欢女孩子的。 \n\n\n","categories":["个人博客"]},{"title":"2024-04-18","url":"//14543.html","content":"\n## 今天我做了些啥？\n\n## uniapp 小程序登录优化\n \n 主要是目前版本下升级更新弹窗会在手势解锁页面弹出，且在手势解锁进入主界面后不再弹出。除非切换前后台之后会重新弹出。 \n\n其实吧，这个功能问题大也不大，说小也确实够小的。 \n\n> 这是我今天在网上看到的一段话\n```\n不论你做什么事情，一定要尽力去做好，在努力做的过程中，你一定会学到一些东西，这样日积月累下来，你的人生就会发生质变。如果你只是简单应付了事，那么你将可能一无所获，反而让你做事的态度也会变得简单应付了事，而且关键还会浪费时间。你怎样对待生活，生活也会怎样对待你。\n```\n\n我就发现哈，我们`Z`同事，就是属于有时候特别专牛角尖的人，做事情思考的很细致入微，我平时属于那种做事情不求100，只要及格60分就好，因此也让我少了很多成长的机会。\n\n我希望在后面的日子里面，我也能越来越棒，做个优秀的人。\n\n## 告诉自己-勇于拥抱变化\n\n我很了解我自己的为人，我一直以来都是处于一种安逸区，难的工作不做，害怕变化，喜欢安稳的日子，不愿意改变自己和接触新的事物。 这对我是有一定问题存在的。\n\n就拿我的职业来说，这本来就是一个需要持续性学习前进的行业，不进步就会被淘汰的。 我之前的自己处于一种安逸区，可能和我自己的心态有关系，不努力学习、不去成长，守旧，新技术也不敏感，总是用着旧一套工作的方式方法。\n\n> 虽然之前一直处于落后的阶段，但是现在我感觉我在成长了。\n\n为什么这么说呢？ 简单的说下，之前我使用Idea很长时间，然后习惯了旧UI界面，后面虽然Idea官方推出了新UI，但是我基本是不使用的。\n\n为什么不用？ 因为觉得新的不好用，已经习惯了旧的UI布局和界面，觉得更熟悉一些，而且侧面展示了我守旧，安于现状的一点。\n\n现在，我开始尝试接受新UI，虽然有的地方使用起来会感觉有一点不熟悉、不顺手的地方，但是能用于拥抱变化才是最值得、有价值的地方。 因为世界并不是一成不变的，我们如果想适应这个世界，那么我们就要自发性的去改变自己、接纳新环境、新事物这些才对。\n\n> 我告诉自己，要拥抱变化\n\n这个世界很大，自己才是主角，其他人都是NPC，要好好照顾好自己的生活。 \n\n","categories":["个人博客"]},{"title":"子弹笔记","url":"//16435.html","content":"\n\n[参考博客](https://zhuanlan.zhihu.com/p/111703197)\n\n# 任务\n\n用符号 `.` 表示\n- `x` 表示已完成\n- `>` 表示到下一日\n- `<` 表示到下一日期\n\n# 事件\n\n用符号 `。` 表示\n> 会议、生日等，具有明显日期属性的活动\n> \n> 事先的计划安排、或事后的补充记录\n\n# 笔记\n\n用符号 `-` 表示\n> 笔记、备注：记录事实、想法、灵感\n>\n> 需要记录或提醒的条目，但不一定在当下日期或具有可操作性\n\n# 特殊意义符号\n> 可自定义\n\n`*` 表示优先级\n\n`!` 表示想法、灵感\n\n`?` 表示需要进一步研究、调查","categories":["个人博客"]},{"title":"2024-04-19","url":"//63504.html","content":"\n\n## 买了榴莲回来，贵贵贵呀\n\n今天中午去了永辉超市，买了榴莲3个，用的抖音的团购券，比现场买还是要便宜个1块多钱。 向大哥说，还是算是有优惠了，其实在我看来，这一块多优惠也便宜不了多少的。 一个榴莲8斤的话，其实也还好，便宜了大概8元了哎！\n\n> 可能和我之前大手大脚花钱的习惯有关，现在倒是不能这样搞了。 哈哈 毕竟现在穷了。\n\n## 南京的运维兼职提了辞\n\n我还是很不喜欢，大聪明的领导。 一上来就说我啥啥啥的，算了 你自己搞把，现在多一点点的钱也算了。 兼职不做了。 \n\n之前最开始想干兼职是因为当时谈的对象在我回这边工作之后，说我工资低了，然后我找南京要的兼职，可是后面还是没谈成。 我个人认为的哈，我之前南京工资高，她和我谈对象很重要的一个原因了。 其实，应该是本来就没看上我自己的。\n\n其实，当时我自己是知道的，因为对方付出的太微不足道了，不能感受到重视，还有就是 我能感觉到对方对我的不耐烦，而我必须接受她的情绪和不开心。 \n\n我之前就想过的就是，如果我后面工资低了，她还会不会和我谈。 其实我自己是有意识到这件事情的。 但是我没有想这么多，结果后面不言而喻。 \n\n当时在重庆也找了两份工作的，都是去了一天就走了。 还是吃不了一点苦把，其实也很搞笑，后面发现她工作的医院对面是现在公司，可是进去了之后发现工资很低，所以就找了南京问问看老东家要了个兼职做。 \n\n## 相亲对象又吹了，还没谈几句\n\n这周，表叔娘介绍的女孩子还没聊几句了。 主要是她说她也最近很忙，然后我想着ok 那就先让你忙过了在聊，然后今天碰巧周五，我想这她下班了差不多，微信上问了下她如果谈对象的要求是啥子，然后其中一点就是身高173以上，哈哈 我倒是差哟！\n\n这样很好，弄清楚彼此下需求，避免浪费时间。\n\n我还没给家里说这个情况，哎呀 我真的是相亲太多了。。。其中有一些不乏很好的，完全是我自己不珍惜错过了的。 简直是作的，活该。 \n\n## 和胖哥聊了几句\n\n我大概知道这个胖子想法了，就是哈 他现在和我们大聪明领导不对付，然后说这个人不好用，坑的一比。 所以他是希望我能重新回南京去继续和他一起干的。 \n\n我自己也想了下，就是说 我如果回了之后南京，我想我大概是短期基本不可能提离职了的，虽然外边可以找高薪哈，但是我想说的是 我需要的真的是那么多的钱嘛？ 人们一辈子就为了钱奔波，现在的社会运转也是让大家都要朝钱转，其实如果是大家都够吃够穿，安居乐业不好吗？ 其实是实现很简单，但是大家都会有攀比心，欲望等等。 \n\n而且我觉得一件事，我放弃这边的工作继续回南京，是真的是我想要的结果吗？ 之前非要离职回这边来，然后现在又回去？我在那边何尝不是 过的太累了！\n\n\n\n\n\n\n\n \n\n","categories":["个人博客"]},{"title":"2024-04-29","url":"//2064.html","content":"\n## 女人真凶\n\n昨天晚上的时候，和向大哥拌嘴了几句哈。 我就发现这人是真的！凶的一批，我在想 是不是最近她大姨妈来了，所以就是心情爆炸。。。\n\n前一天晚上的时候，我在外边打游戏，可能是声音毕竟大，然后自己不自知，她在旁边看电视的时候也把ipad声音调整的巨大。 当时我在和朋友开黑，我就很不安逸。 \n\n后面问才知道就是说，是因为我开大太吵了，然后她就开很大！！！\n\n> 我巨无语，你难道不会告诉我影响到你了吗？我是不会听懂人话呀，你非要和我来到对抗路才ok？\n\n后面我直接把游戏声音关了，语音也关了，然后这把游戏体验就很一般。 打完游戏之后，我就开始收拾把我的桌子搬走到房间里面去。 还是不要影响到彼此毕竟好。 \n\n对了，以上的是昨天的昨天！\n\n---\n\n昨晚回家做饭的时候，我在哪里又开始自言自语的了。。。就是一边做事一边自我废话。 然后向大哥在旁边干啥来着，我看她打开手机放音乐了，我当时心里猜到可能是我太烦了。 我就说了一句，“你放歌是我太吵了是吧？”，她说“你晓得还说，巴拉巴拉的”，我说我就知道你要这么说我！ \n\n感觉是我猜到她的下一步了，然后就开始她有点生气了，开始很不爽的说我，“你这么大一个人了，应该有自知之明的这种”，（她说的不是自知之明，但是就是那种意思）。\n\n我的天，当时的恐怖氛围看着都怕！我在想她肯定是大姨妈来了。 之前基本很少有遇到这种时候的。\n\n---\n\n其实我要说一点就是，她有时候确实只顾自己的。 有时候在公共区域里面放音乐、开电视的时候很大声，但是对我来说，我不能这样去说她。 我感觉，她只能被夸奖，不能被批评这种。 \n\n---\n\n想起之前，被她转身卖了，是有点不爽！ 我告诉她，XX说让我不告诉你什么什么，她转身在手机里面问别个，为啥这样干。 \n\n然后还告诉我，这是我自己自作自受，非要去dou别个。\n\n就是分析下来，她有自己的体系，基本是她不会错，错也是因为你造成的。\n\n确实偶尔时候，给我吓一跳的感觉。 并不能简单的从和她相处氛围比较好的时候去判断这个人。\n\n## 大概率回南京了吧\n\n自己主动给boss说过了之后，boss说会考虑这件事。 后面老胡也给我说了，说这件事大概率稳妥的。\n\n目前还没接到HR的通知，我想的话 如果回去是6月初样子，回去的话 钱肯定是会挣多一点，但是要比这辛苦不少了。 在这边老家虽然工资低，但是相对应的活儿不是那么多，工作的体验感比较高。\n\n回去之后就做好自己的工作，不搞小团体，一心向公司。把相关工作和事情做好，要能拿得出手的成绩来。\n\n## 有的话 感觉不一定要说出来，写出来也是一样的\n\n虽然我很想吐槽向哥哥哈，但是我觉得没必要指教别人，就是不要轻易的教别人，没有人喜欢被教育。\n\n这边租房的租约是6月底到期，目前5月份住过去，如果回南京成功的话，这边就多一个月是白交租金的。 我想我走了的话，向大哥也是自己会回家住吧，毕竟一个人租金压力是不小的。\n\n之前还对向哥哥存在幻想，现在是彻底不可能。 我接不住她那种情绪的反扑，我觉得会崩溃，特别是 就上面写的，我和朋友在打游戏的开黑的时候，她在旁边把声音调的特别大声的看电视。 \n\n> 可能我们喜欢的人，我们是因为喜欢她对我们自己情绪好的时候，而恰恰相反的是，我们接不住她情绪的问题，我们不会是匹配的人。\n\n","categories":["个人博客"]},{"title":"常用网址收藏","url":"//57942.html","content":"\n# 在线工具\n## [在线图片压缩-docsmall](https://docsmall.com/image-compress)\n## [在线颜色选择器-photokit](https://photokit.com/colors/color-picker/?lang=zh)\n## [在线文件转换器-convertio](https://convertio.co/zh/)\n\n\n# 谷歌浏览器-插件\n## [Crx搜搜](https://www.crxsoso.com/)\n\n# 图片\n## [pixabay](https://pixabay.com/zh/)\n\n# 配色\n## [中国色-zhongguose](http://zhongguose.com/)\n\n# 编程开发\n## [Ant Design](https://ant-design.antgroup.com/components/overview-cn)\n\n## [ng-alain](https://ng-alain.com/zh)\n\n## [NG-ZORRO](https://ng.ant.design/components/overview/zh)\n\n## [echarts](https://echarts.apache.org/examples/zh/index.html)\n\n## [Element-UI](https://element.eleme.cn/#/zh-CN)\n\n## [阿里巴巴-iconfont](https://www.iconfont.cn/)\n\n## [axios](https://www.axios-http.cn/docs/intro)\n\n# 在线图片工具\n[Carbon - 在线生成代码图片](https://carbon.now.sh/)\n\n# 在线接口工具\n\n# 在线流程图工具\n[在线白板画图](https://ajietextd.github.io/)\n\n# 在线接口\n## [金山词霸-开放平台](https://open.iciba.com/index.php?c=wiki)\n\n## [国外的一个免费的接口测试网站](https://reqres.in/)\n\n","categories":["个人博客"]},{"title":"每天进步一点点-20231216","url":"//18432.html","content":"\n\n在`VS 2022`版本中，控制台调试打印输出命令：\n```\n #Console.WriteLine(\"当前命令已失效\"); \n Trace.WriteLine(\"新命令打印\");\n```\n\n`Sql Server `添加字段命令\n```\nALTER TABLE [dbo].[lr_base_user] ADD [F_YKZID] bigint NULL\nGO\n\nEXEC sp_addextendedproperty\n'MS_Description', N'渝快政用户ID',\n'SCHEMA', N'dbo',\n'TABLE', N'lr_base_user',\n'COLUMN', N'F_YKZID'\n```\n\n`C#`中的`[HttpPost]`、`[AjaxOnly]`\n> UpdateData方法只能通过Ajax的POST请求来访问。如果试图通过非Ajax的POST请求或者GET请求来访问，那么服务器将返回404错误2。这样可以确保只有合适的请求才能访问到这个方法，从而提高了应用程序的安全性和效率2\n```\n[HttpPost]\n[AjaxOnly]\npublic ActionResult UpdateData()\n{\n    // 更新数据的代码\n}\n```\n\n\nASP.NET MVC视图中使用HTML元素的属性来传递参数，并在JavaScript中获取这些参数：\n\nC#\n```\npublic ActionResult SomeAction()\n{\n    var model = new MyModel { ParamInput1 = \"Hello\", ParamInput2 = \"World\" };\n    //视图跳转页面并携带参数对象\n    return View(\"Index\",model);\n}\n```\n\nHtml\n```\n#@Model.ParamInput1解析: `@Model`是固定语法，`ParamInput1`是参数对象名\n<div id=\"myDiv\" \n    data-ParamGet1=\"@Model.ParamInput1\" \n    data-ParamGet2=\"@Model.ParamInput2\"\n>\n\n</div>\n```\n\nJs\n```\nvar myDiv = document.getElementById('myDiv');\n//获取实例myDiv的属性信息,`ParamGet1`对应Html页面中div的属性名\nvar param1 = myDiv.dataset.ParamGet1;  // \"Hello\"\nvar param2 = myDiv.dataset.ParamGet2;  // \"World\"\n```\n\n","categories":["个人博客"]},{"title":"联想2023款R9000P笔记本电脑常见问题处理","url":"//36930.html","content":"\n\n## 键盘断触问题（偶发）\n[参考博客](https://tieba.baidu.com/p/8414554110)\n\n![](./联想2023款R9000P笔记本电脑常见问题处理/Snipaste_2023-12-14_14-11-16.png)\n\n","categories":["个人博客"]},{"title":"常用md文档编辑示例","url":"//1079.html","content":"\n## 常用符号\n - ⭐\n\n## 编辑技巧\n\n### 显示/隐藏\n> 1. 安装`hexo-renderer-markdown-it`创建\n> 2. 安装`markdown-it-expandable`插件,并在`_config.yml`配置文件`hexo-renderer-markdown-it`的plugins中启用\n>\n\n```\n\n+++ **点击展开/隐藏**\n\n点击展开内容示例\n\n+++\n\n```\n\n+++ **点击展开/隐藏**\n\n点击展开内容示例\n\n+++\n\n\n### 复杂表格实现\n\n+++ **点击展开/隐藏**\n\n\n\n> [Markdown表格——复杂表格](https://blog.csdn.net/dream_summer/article/details/110822636)\n\n#### 普通表格\n\n```\n<table>\n    <tr>\n        <td>行1列1</td> \n        <td>行1列2</td> \n        <td>行1列3</td> \n   </tr>\n    <tr>\n  \t\t<td>行2列1</td> \n        <td>行2列2</td> \n        <td>行2列3</td> \n    </tr>\n    <tr>\n        <td>行3列1</td> \n        <td>行3列2</td> \n        <td>行3列3</td> \n    </tr>\n</table>\n```\n\n<table>\n    <tr>\n        <td>行1列1</td> \n        <td>行1列2</td> \n        <td>行1列3</td> \n   </tr>\n    <tr>\n  \t\t<td>行2列1</td> \n        <td>行2列2</td> \n        <td>行2列3</td> \n    </tr>\n    <tr>\n        <td>行3列1</td> \n        <td>行3列2</td> \n        <td>行3列3</td> \n    </tr>\n</table>\n\n#### 合并单元格\n\n##### 合并行\n\n```\n<table>\n    <tr>\n        <td>行/列</td> \n        <td>列2</td> \n        <td>列3</td> \n   </tr>\n    <tr>\n  \t\t <td>行2列1</td> \n      \t <td colspan=\"2\">跨两列合并行</td>    \n    </tr>\n    <tr>\n        <td colspan=\"3\">跨三列合并行</td>    \n    </tr>\n</table>\n```\n\n<table>\n    <tr>\n        <td>行/列</td> \n        <td>列2</td> \n        <td>列3</td> \n   </tr>\n    <tr>\n  \t\t <td>行2列1</td> \n      \t <td colspan=\"2\">跨两列合并行</td>    \n    </tr>\n    <tr>\n        <td colspan=\"3\">跨三列合并行</td>    \n    </tr>\n</table>\n\n\n##### 合并列\n```\n<table>\n    <tr>\n        <td>行1列1</td> \n        <td>行1列2</td> \n        <td>行1列3</td> \n   </tr>\n    <tr>\n        <td rowspan=\"2\">合并两列</td>    \n  \t\t <td>行2列2</td> \n      \t <td>行2列3</td> \n    </tr>\n    <tr>\n        <td>行3列2</td> \n        <td>行3列3</td>    \n    </tr>\n</table>\n```\n\n<table>\n    <tr>\n        <td>行1列1</td> \n        <td>行1列2</td> \n        <td>行1列3</td> \n   </tr>\n    <tr>\n        <td rowspan=\"2\">合并两列</td>    \n  \t\t <td>行2列2</td> \n      \t <td>行2列3</td> \n    </tr>\n    <tr>\n        <td>行3列2</td> \n        <td>行3列3</td>    \n    </tr>\n</table>\n\n+++","categories":["个人博客"]},{"title":"博客日历","url":"//20802.html","content":"\n{% calendar %}\n{\"monthLang\": \"cn\", \"dayLang\": \"cn\", \"title\": \"\", \"width\": \"800\"}\n{% endcalendar %}\n\n\n","categories":["个人博客"]},{"title":"CURL常用命令记录","url":"//35403.html","content":"\n\n强制无视证书访问\n```\ncurl -k https://127.0.0.1:443/xx/xxx\n```\n\n携带证书访问\n```\ncurl -E pem/nginx/_.jspec.cn.pem https://127.0.0.1:44/xx/xxx\n\n```","categories":["技术博客"],"tags":["CURL"]},{"title":"第6章 Javascript和Typescript：第二部分","url":"//49217.html","content":"\n## 6.2 使用对象\n\n```\n//创建对象\nlet myData = new Object(); \n//对象赋值\nmyData.name = \"Adam\";\nmyData.weather = \"sunny\";\n```\n\n### 6.2.1 使用对象字面量\n```\nlet myData = {\n    name: \"Adam\",\n    weather: \"sunny\"\n}\n```\n> 对于要定义的属性用`:`号隔开，用`,`号分隔不同属性。\n\n### 6.2.2 将函数用作方法\n\n```\nlet myData = {\n    name: \"Adam\",\n    weather: \"sunny\",\n    printMessage: function () {\n        console.log(\"Hello \"+ this.name +\". \");\n        console.log(\"Today is  \"+ this.weather +\". \");\n    }\n}\n\nmyData.printMessage();\n```\n> 注意：方法中引用对象定义的属性，必须使用`this`关键字\n\n\n### 6.2.3 定义类\n\n> `class`关键字用于声明一个类,其后是类名。\n> \n```\nclass MyClass {\n\n    constructor (name,weather){\n        this.name = name;\n        this.weather = weather;\n    }\n\n    printMessage(){\n        console.log(\"Hello \"+ this.name +\". \");\n        console.log(\"Today is  \"+ this.weather +\". \");\n    }\n\n}\n```\n\n#### 定义类的设置器和读取器属性\n```\n    constructor (name,weather){\n        this.name = name;\n        this._weather = weather;\n    }\n\nset weather( value ){\n    this._weather = value;\n}\n\nget weather(){\n    return `Today is ${weather}`;\n}\n\n```\n> 读取器和设置器实现方式：在函数名称前面加上`get`或`set`关键字\n>\n> JavaScript类中没有访问控制的概念，约定内部属性的名称统一使用下划线(符号`_`)作为前缀。\n\n#### 使用类继承\n> `extends`关键字用于声明将要继承的类（被称为超类或者基类）\n>\n> `super`关键字用于调用超类的构造函数或方法\n```\nclass MySubClass extends MyClass{\n\n    constructor (name ,weather, city){\n        super(name,weather);\n        this.city = city;\n    }\n\n    printMessage(){\n        super.printMessage();\n        console.log(`You are in ${city}`);\n    }\n\n}\n\nlet myData = new MySubClass(\"Adam\",\"sunny\",\"London\");\nmyData.printMessage();\n```\n\n\n## 6.3 处理JavaScript模块\n\n### 创建和使用模块\n\n> 默认情况：JavaScript和Typescript文件中定义的类、函数和变量就只能在该文件中访问。\n>\n> `export`关键字用于在文件之外访问特性。\n>\n> `import`关键字用于声明对模块所提供特性的依赖关系。\n\n创建一个名为`NameAndWeather.ts`文件内容\n```\nexport class Name {\n\n    constructor(first,second){\n        this.first = first;\n        this.second = second;\n    }\n\n    get nameMessage(){\n        return `Hello ${this.first}  ${this.second}`;\n    }\n}\n\nexport class WeatherLocation{\n\n    constructor(weather,city){\n        this.weather = weather;\n        this.city = city;\n    }\n\n    get weatherMessage(){\n        return `It is ${weather} in ${this.city}`;\n    }\n}\n```\n\n```\nimport {Name,WeatherLocation} from './module/NameAndWeather';\n```\n\n##### 重命名导入\n```\nexport class Name {\n    get message{\n        return 'Other Name';\n    }\n}\n\nimport {Name as OtherName} from './module/xxx';\n```\n\n##### 导入模块中所以类型\n```\nimport * as NameAndWeatherLocation from './module/NameAndWeather';\n\nlet name = new NameAndWeatherLocation.Name(\"Adam\",\"Freeman\");\nlet loc  = new NameAndWeatherLocation.WeatherLocation(\"raining\",\"London\");\n```\n\n## 6.4 有用的Typescript特性\n\n### 为属性和变量添加类型注解\n```\nexport class Name {\n\n    first: string;\n    second: string;\n\n    constructor(first: string ,second: string ){\n        this.first = first;\n        this.second = second;\n    }\n\n    get nameMessage() : string {\n        return `Hello ${this.first}  ${this.second}`;\n    }\n}\n\nexport class WeatherLocation{\n\n    constructor(weather: string,city: string){\n        this.weather = weather;\n        this.city = city;\n    }\n\n    get weatherMessage(): string{\n        return `It is ${weather} in ${this.city}`;\n    }\n}\n```\n\n### 指定多个类型或任意类型\n> Typescript允许指定多个类型，使用字符`|`进行分隔。\n\n```\nexport class TempConverter {\n\n    static convertFtoC(temp: number | string){\n        let value: number = (<number> temp).toPrecision ? <number> temp : parseFloat(<string> temp);\n        return xxx;//代码忽略，此处不做实现\n    }\n}\n```\n>> 使用`<>`字符表示声明一个类型断言，尝试将一个对象转换为指定的类型。还可以使用`as`关键字达到同样效果。\n\n```\nexport class TempConverter {\n\n    static convertFtoC(temp: number | string){\n        let value: number = (temp as number).toPrecision ? temp as number : parseFloat(<string> temp);\n        return xxx;//代码忽略，此处不做实现\n    }\n}\n```\n\n### 使用元组\n> 元组：固定长度的数组，数组的每一项都是指定的类型。\n\n```\nlet tuple: [string,string,string];\n\ntuple = [\"London\",\"raining\",\"38\"];\n```\n\n### 使用可索引的类型\n\n```\nlet cities: {[index:string]: [string,string]} = {};\n\ncities[\"London\"]=[\"raining\",\"38\"];\n```\n\n键：字符串\n\n数据值：元组\n\n> 只有`number`和`string`值可以用作可索引类型的键。","categories":["学习记录"]},{"title":"VSstudio启动项目指定ip访问非localhost","url":"//15988.html","content":"\n\n修改项目`project`下隐藏目录`config`中的`applicationhost.config`文件\n\nPS:图片此处可能打不开\n![](./VSstudio启动项目指定ip访问非localhost/image.png)\n\n\n> 添加指定ip地址访问: `<binding protocol=\"http\" bindingInformation=\"127.0.0.1:31173:*\" />`\n\n\n实际项目配置如下：\n```\n<bindings>\n        <binding protocol=\"http\" bindingInformation=\"*:31173:localhost\" />\n        <binding protocol=\"http\" bindingInformation=\"127.0.0.1:31173:*\" />\n</bindings>\n```\n\n\n","categories":["技术博客"]},{"title":"DataGrip使用相关文档","url":"//43643.html","content":"\n## 创建数据库\n\n[MySQL必知必会：MySQL中的Schema与DataBase](https://blog.csdn.net/Facial_Mask/article/details/128943769)\n\n> 在`MySQL`中，`CREATE SCHEMA`创建了一个数据库，这是因为`CREATE SCHEMA`是`CREATE DATABASE`的同义词。 换句话说，你可以使用`CREATE SCHEMA`或者`CREATE DATABASE`来创建一个数据库。\n\n![](./DataGrip使用相关文档/Snipaste_2024-04-18_09-26-40.png)\n\n![](./DataGrip使用相关文档/Snipaste_2024-04-18_09-27-20.png)\n\n## 导出并还原数据库\n\n> Mysql数据库导出需要依赖工具`mysqldump`\n\n[【资源】mysqldump 工具分享](https://blog.csdn.net/kedaji/article/details/104485826)\n\n### 导出\n\n![](./DataGrip使用相关文档/Snipaste_2024-04-18_09-11-17.png)\n\n![](./DataGrip使用相关文档/Snipaste_2024-04-18_09-14-30.png)\n\n\n### 还原\n\n> 通过执行SQL脚本还原方式\n\n![](./DataGrip使用相关文档/Snipaste_2024-04-18_09-24-37.png)\n","categories":["技术博客"],"tags":["DataGrip"]},{"title":"Dockerfile构建Tomcat和war包项目镜像文件","url":"//48526.html","content":" \n\n## 内容正文\n\n1. 首先编辑`DockerFile`文件\n\n```\n#基于自定义tomcat镜像\nFROM tomcat:8.5.95\n#作者\nMAINTAINER admin<admin@qq.com>\n#声明一个变量\nENV ROOT_PATH /usr/local/tomcat/webapps/\n#设置工作目录\nWORKDIR $ROOT_PATH\n#清空webapps里面的所有文件\nRUN rm -rf ./*\n#将war包添加至工作目录\nADD app.war ./\n#对外提示暴露端口\nEXPOSE 8080\n#输出一个构建成功的字符\nCMD [\"../bin/catalina.sh\",\"run\"]\n```\n\n2. 准备好*.war包和`DockerFile`文件放置同一目录下\n3. 执行Docker打包镜像命令\n\n> docker build -t [image_name] [dockerfile_path]\n> \n> -t 参数表示给构建的镜像指定一个名称，[image_name]就是镜像的名称。[dockerfile_path] 表示Dockerfile文件路径\n\n\n```\ndocker build -t app-war /root/test/./\n```\n\n![](./Dockerfile构建Tomcat和war包项目镜像文件/Snipaste_2023-11-02_16-26-06.png)\n\n4. 运行镜像\n\n```\ndocker run -d -p 8080:8080 --name app app-war:latest\n```\n\n5. Docker镜像的导入导出\n\n导出\n\n> docker save -o <output_file.tar> <image_name:tag>\n>\n- <output_file.tar>: 导出的镜像文件名（可以自定义）以及.tar文件的扩展名\n- <image_name:tag>: 要导出的镜像的名称和标签。\n\n\n导入\n\n> docker load -i <input_file.tar>\n\n- <input_file.tar>: 导入的镜像文件名以及.tar文件的扩展名\n\n\n## 问题记录\n\n[docker保存镜像报错:Cowardly refusing to save to a terminal. Use the -o flag or redirect.](https://blog.csdn.net/Min_JW/article/details/83688119)\n\n## 参考博客\n\n[参考博客](http://www.manongjc.com/detail/53-vphnmwwhtcuyowj.html)\n\n[参考博客](https://blog.csdn.net/MinggeQingchun/article/details/123405457)\n\n[参考博客](https://blog.51cto.com/u_16175507/7166189)\n\n[参考博客](https://www.php.cn/faq/520737.html)\n\n[参考博客](https://blog.51cto.com/u_16213358/7033324)\n","categories":["技术博客"]},{"title":"Docker下安装Mysql","url":"//11638.html","content":"\n> 参考博客：[Docker下安装Mysql-01](http://www.taodudu.cc/news/show-1347332.html)\n>\n> 参考博客：[Docker下安装Mysql-02](https://blog.csdn.net/weixin_44037416/article/details/117956869)\n>\n> 参考博客：[Docker下安装Mysql-03](https://blog.csdn.net/qq_25288617/article/details/125423194)\n## 通过Docker拉取Mysql镜像\n```\ndocker pull mysql:5.6\n```\n\n![](./Docker下安装Mysql/Snipaste_2023-06-13_20-00-25.png)\n\n\n## 运行Docker下Mysql容器\n\n### mysql-5.6\n```\ndocker run \\\n-d \\\n-p 3306:3306 \\\n--restart=always \\\n--privileged=true \\\n-v /home/docker/mysql/logs:/var/log/mysql \\\n-v /home/docker/mysql/conf:/etc/mysql/conf.d \\\n-v /home/docker/mysql/data:/var/lib/mysql \\\n-e MYSQL_ROOT_PASSWORD=123456 \\\n--name mysql_5_6 mysql:5.6 \\\n--character-set-server=utf8mb4 \\\n--collation-server=utf8mb4_general_ci\n```\n\n- -d 表示后台运行\n- -p 表示容器内部端口和服务器端口映射关联\n- --restart=always 重启docker时，自动启动相关容器\n- --privileged=true 设置root用户权限\n- -v 映射docker容器的目录到服务器目录\n\n### mysql-8.0\n> `mysql-8.0`默认是开启`%`远程访问\n```\n docker run \\\n  -d \\\n  -p 3307:3306 \\\n  -v /home/docker/mysql_8_0/data:/var/lib/mysql \\\n  -v /home/docker/mysql_8_0/conf/my.cnf:/etc/mysql/conf.d/my.cnf \\\n  -e MYSQL_ROOT_PASSWORD=123456 \\\n  --restart=always \\\n  --privileged=true \\\n  --name mysql_8_0 mysql \\\n  --lower_case_table_names=1\n```\n\n#### 配置文件`my.cnf`\n```\n[mysql]\n#设置mysql客户端默认字符集\ndefault-character-set=UTF8MB4\n[mysqld]\n#设置3306端口\nport=3306\n#允许最大连接数\nmax_connections=200\n#允许连接失败的次数\nmax_connect_errors=10\n#默认使用“mysql_native_password”插件认证\ndefault_authentication_plugin=mysql_native_password\n#服务端使用的字符集默认为8比特编码的latin1字符集\ncharacter-set-server=UTF8MB4\n#开启查询缓存\nexplicit_defaults_for_timestamp=true\n#创建新表时将使用的默认存储引擎\ndefault-storage-engine=INNODB\n#等待超时时间秒\nwait_timeout=60\n#交互式连接超时时间秒\ninteractive-timeout=600\n#大小写不敏感(注意：mysql8以后，大小写不敏感设置只能在容器初始化时候有效)\n#lower_case_table_names=1\n#设置时区\ndefault-time-zone='+08:00'\n```\n\n## 配置Mysql远程访问\n\n### 进入Docker-Mysql容器\n```\ndocker exec -it 容器名称(mysql) bash\n```\n\n### 设置账号访问权限\n```\nGRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION;\n```\n\n刷新权限\n```\nflush privileges;\n```\n\n## 配置my.cnf文件\n在`/home/docker/mysql/conf/`目录下创建文件`my.cnf`\n```\ntouch my.cnf\n```\n\nmy.cnf内容参考\n```\n# Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.\n#\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; version 2 of the License.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA\n\n#\n# The MySQL  Server configuration file.\n#\n# For explanations see\n# http://dev.mysql.com/doc/mysql/en/server-system-variables.html\n\n[mysqld]\npid-file        = /var/run/mysqld/mysqld.pid\nsocket          = /var/run/mysqld/mysqld.sock\ndatadir         = /var/lib/mysql\nsecure-file-priv= NULL\ndefault-time-zone = '+8:00'\n\n#最大链接数\nmax_connections=1024\n\n#是否对sql语句大小写敏感，1表示不敏感\nlower_case_table_names=1\nlog_bin_trust_function_creators=1\n#启用log-bin\nlog-bin=mysql-bin\n\n#设置日志格式\nbinlog_format=mixed\n\n#设置binlog清理时间\nexpire_logs_days=7\n\n# 数据表默认时区\ndefault-time-zone='+08:00'\n\n# Custom config should go here\n!includedir /etc/mysql/conf.d/\n```\n\n重启docker容器\n```\ndocker restart 容器id\n```","categories":["技术博客"],"tags":["Docker","Mysql","Linux"]},{"title":"全景Krpano项目迁移环境记录","url":"//34487.html","content":"\n全景项目启动成功截图：\n> 访问地址：http://127.0.0.1:8080/vradmin\n> \n![Alt text](./全景Krpano项目迁移环境记录/image.png)\n\n---\n\n[php windows环境安装](https://blog.csdn.net/socct_yj/article/details/105559136)\n\n> 若apache服务启动异常失败情况可能是win环境缺失vc运行库 \n[vc运行库整合版](https://www.123pan.com/s/3bN8Vv-ovu0A)\n\n---\n\n## Apache环境安装\n> 略过（详见博客）\n\n\n> 若启用ssl，则http-ssl的配置也需要修改!\n\n## PHP环境安装\n\n1. 将`php.ini-development` 复制一份，并改名为`php.ini`\n\n2. 修改`php.ini`配置文件信息\n\n```\n #extension_dir 安装的php目录地址\n extension_dir = \"C:/env/krpano/php-5.6.7-Win32-VC11-x64/ext\"\n```\n\n```\n#临时文件上传目录\nupload_tmp_dir = C:/env/javakrpano/vrsys-master/temp\n``` \n\n\n3. 在`apache`配置文件中配置`php`模块\n\n博客中示例\n```\n# 在Apache中以module的方式加载PHP，“php7_module”中的“7”要和PHP的版本对应；\n# 此外，不同的PHP版本“php7apache2_4.dll”可能不同。\nLoadModule php7_module \"PHP安装路径\\php7apache2_4.dll\"  \n\n# 告诉Apache PHP的安装路径\nPHPIniDir \"PHP安装路径\" \n```\n\n原迁移项目中配置项（按实际地址修改即可）\n```\nLoadModule php5_module C:/env/krpano/php-5.6.7-Win32-VC11-x64/php5apache2_4.dll\nAddType application/x-httpd-php .php .html .htm\nLoadModule php5_module modules/libphp5.so\nPHPIniDir C:/env/krpano/php-5.6.7-Win32-VC11-x64\n```\n\n4. 若php环境未正常安装报错\n\n![Alt text](./全景Krpano项目迁移环境记录/Snipaste_2023-12-01_10-26-26.png)\n\n\n## 全景项目配置\n\n修改可执行文件路径\n```\n<?php\n// 输入你的程序路径，如/www/wwwroot/topv3d/data/krpano_linux/krpanotools，请根据实际修改，替换下面相应内容即可，成功则提示Code registered。\n\nexec(\"C:/env/javakrpano/vrsys-master/data/krpano/krpanotools64.exe register ruza4tk2X4MdHuE7djJQGr9QTftMFHiSH2ac5jkIlFgGqG0K0IVQnh5vF/cicLpwedsURI0QTg+UluEgysRLUytpeVFyBTxdwREEIGquRh1Hp2BY2EtZ8kdO2r6CHLJAFlzY5w6au1rnHwRhJXgaK8J75RwK1DYb/OEZ4tD2pniUrnMrpFwGWwcKnxGyNSmMktsU6qadFjKbMH3HUKNXa7Y59lEzbDZJbsTuP+UynwwBhogv8K+byjs2LDvU48sx4/CNHWi26g==\",$output);\n\nprint_r($output);\n?>\n```\n\n![Alt text](./全景Krpano项目迁移环境记录/684f69855b7c963b0ea84a323b39c9a.png)\n\n修改数据库配置\n\n```\n<?php\n\n...\n\n/* 数据库配置 */\n$db_type = 'mysql';   //数据库类型\n$db_charset = 'utf8'; //编码名称\n$db_name = 'krpano';  //数据库名 \n$db_prefix  = 'u_';   //表前缀\n$db_host = '*.*.*.*';\n$db_user = 'USERNAME';\n$db_pass = 'PASSWORD';\n$db_port = 3306;\n\n?>\n```\n\n![Alt text](./全景Krpano项目迁移环境记录/ed5a79055d8333559d1ae3546993239.png)\n","categories":["技术博客"]},{"title":"Docker下安装Tomcat挂载宿主机目录","url":"//46028.html","content":"\n[参考博客](https://blog.csdn.net/CSDN877425287/article/details/106712312)\n\n\n1. 拉取镜像\n   ```\n   \tdocker pull tomcat:8.5.95\n   ```\n\n2. 启动tomcat容器\n\n```\n\tdocker run --name tomcat -p 8080:8080 -d tomcat:8.5.95\n```\n\n3. 复制启动tomcat容器中的三个常用目录 conf、webapps、logs 用于挂载宿主机 \n```\n\tdocker cp tomcat:/usr/local/tomcat/webapps.dist /data/tomcat/webapps #初始文件目录\n\tdocker cp tomcat:/usr/local/tomcat/webapps /data/tomcat/webapps #空webapps目录\n\tdocker cp tomcat:/usr/local/tomcat/conf /data/tomcat\n\tdocker cp tomcat:/usr/local/tomcat/logs /data/tomcat\n```\n\n4. 停止容器\n\n```\ndocker stop tomcat;\n```\n\n5. 移除容器\n\n```\ndocker rm tomcat;\n```\n\n5. 挂载宿主目录webapps、logs、conf 启动tomcat容器\n\n```\ncd /data/tomcat/\n```\n\n```\ndocker run --name tomcat -p 8081:8080 -v $PWD/webapps:/usr/local/tomcat/webapps -v $PWD/logs:/usr/local/tomcat/logs -v $PWD/conf:/usr/local/tomcat/conf -d tomcat:8.5.95\n```\n\n>  docker exec -i -t 665b4a1e17b6 bash 登入容器后台控制界面","categories":["技术博客"]},{"title":"Docker安装Mysql各其他版本记录","url":"//23791.html","content":"\n\n## Mysql 5.7.4\n\n```\ndocker run --privileged=true \\\n--name mysql5.7.4 \\\n--restart=always \\\n--privileged=true \\\n-p 4457:3306 \\\n-e MYSQL_ROOT_PASSWORD=123456 -d \\\n -v /home/docker/mysql_5.7.4/data:/var/lib/mysql \\\n -v /home/docker/mysql_5.7.4/conf:/etc/mysql/ \\\n -v /home/docker/mysql_5.7.4/logs:/var/log/mysql \\\nmysql:5.7.4\n```\n\n## 备份恢复\n> 参考博客：https://blog.csdn.net/qq_41782425/article/details/88621138\n\n\na数据库服务器\n```\nmysqldump -uroot -p --all-databases --lock-all-tables > ~/master_db.sql\n```\n\nb数据库服务器\n> mysql -uroot -p123456 登陆后执行`source`命令\n```\nsource /root/master_db.sql\n```\n\n\n## Mysql主从问题记录\n### 01\n```\nCould not find first log file name in binary log index file\n```\n\n> 解决方案：[参考博客](https://blog.csdn.net/qq_40634846/article/details/105268257)\n","categories":["技术博客"],"tags":["Docker","MySQL"]},{"title":"Docker搭建Mysql5.6配置主从数据库","url":"//32600.html","content":"\n- Master 主库\n- Slave 从库\n\n## Master的MySQL导出SQL\n\n通过`mysqldump`命令导出数据库SQL文件\n```\nmysqldump -uroot -p --all-databases --lock-all-tables > /root/master_5.6_db.sql\n```\n\n上述命令报错可指定` -h 127.0.0.1 -P 3306 `在尝试\n```\nmysqldump -h 127.0.0.1 -P 3306 -uroot -po8oxpClXxNI3vQQjY65e --all-databases --lock-all-tables > /root/master_5.7_db.sql\n```\n- -p 后拼接密码(若不拼接，则确认命令后在输入密码即可)\n\n指定数据库导出SQL用法\n```\nmysqldump -h 127.0.0.1 -P 3306 -uroot -po8oxpClXxNI3vQQjY65e --databases db01 db02 --lock-all-tables > /root/master_5.7_new_db.sql\n```\n- db01 数据库\n- db02 数据库（多个数据库，空格隔开）\n> 备注：在slave服务器恢复时，需要上述db库已存在，若单个db库则需要指定use `dbName`在进行`source /root/db.sql`操作\n\n## Slave的MySQL导入并执行SQL\n登录mysql\n```\nmysql -uroot -pxxx\n```\n执行还原SQL命令\n```\nsource /root/master_db.sql\n```\n\n## 配置Master的MySQL的my.cnf\n```\n[mysqld]\nserver-id=1\nlog-bin=master-bin\nbinlog-format=ROW\n\nmax_connections = 1000\ncharacter-set-server = utf8mb4\ncollation-server = utf8mb4_unicode_ci\n```\n\n## 配置Slave的MySQL的my.cnf\n```\n[mysqld]\nserver_id = 2\nlog_bin = slave-bin\nbinlog-format=ROW\n\nmax_connections = 1000\ncharacter-set-server = utf8mb4\ncollation-server = utf8mb4_unicode_ci\n\nrelay_log = slave-relay-bin\nlog_slave_updates = 1\nread_only = 1\n\n#根据实际情况配置，可忽略当前数据库同步\nreplicate_ignore_db=information_schema\nreplicate_ignore_db=performance_schema\nreplicate_ignore_db=mysql\nreplicate_ignore_db=sys\n```\n\n## 配置Master数据库\n\n授权Slave从库对Master主库的可读复制权限\n```\nGRANT REPLICATION SLAVE,REPLICATION CLIENT ON *.* TO 'repl'@'%' IDENTIFIED BY 'GrantT^Slave130';\n```\n- `repl` 账号\n- `GrantT^Slave130` 密码\n\n刷新Master主库权限\n```\nflush PRIVILEGES\n```\n\n刷新日志文件\n```\nflush logs;\n```\n\n获取Master主库的bin-log日志及日志点位置\n```\nshow master status;\n```\n![](./Docker搭建Mysql5-6配置主从数据库/NcXwn7y2Okg_MsNiCJb5G9ILNFPqGBGh_4H_vJ6Hh5g.png)\n\n## 配置Slave数据库\n\n停止从库\n> 第一次配置是不需要，若中途发生错误`start slave`，则后续需要停止在重新开始。\n```\nstop slave\n```\n\n登录Slave从库的控制台\n```\nmysql -uroot -p\n```\n\n配置Master节点信息\n```\nCHANGE MASTER TO MASTER_HOST='192.168.0.121',MASTER_USER='repl',MASTER_PASSWORD='GrantT^Slave130',MASTER_LOG_FILE='mysql-bin.000020',MASTER_LOG_POS=154;\n```\n\n- MASTER_USER 主库配置Slave的账号\n- MASTER_PASSWORD 主库配置Slave的密码\n- MASTER_LOG_FILE 主库日志文件\n- MASTER_LOG_POS 主库日志数据当前位置\n\n启动Slave从库同步Master主库命令\n```\nstart slave\n```\n\n查看主从库同步状态（从库执行）\n```\nshow slave status \\G;\n```\n![](./Docker搭建Mysql5-6配置主从数据库/yL4cHADNK33Kh1i6OxRsGxXvp5mCGbGeJNw1dQdgCXg.png)\n![](./Docker搭建Mysql5-6配置主从数据库/E833c9JLUUeIb5e3Rv5RQqKCkCV4jsfX_A3japGp3dQ.png)","categories":["技术博客"],"tags":["Docker","MySQL","MySQL 5.6","MySQL主从"]},{"title":"Docker下端口通过Iptable防火墙管理","url":"//50337.html","content":"\n\n[防火墙控制Docker端口开放与关闭](https://blog.csdn.net/weixin_43876317/article/details/122534937)\n\n## 问题描述\n\nIP.25 服务器安装Docker的Mysql服务，防火墙启用的是Firewalld，防火墙未暴露3306端口且未开放任意IP对3306端口访问。 \n在IP.29 服务器，通过命令`telnet x.x.1.25 3306` 发现接口通的！\n\n经过排查得知：Docker通过Iptables强制开发暴露端口！！！\n\n> 解决方式，参考博客方法二\n\n\n引发问题：`容器内部之间也无法通过防火墙` (解决方式详细查看上述博客!)\n\n\n---\n\n## 原`Firewalld`防火墙规则迁移到`Iptables`\n\n### 原Firewalld防火墙规则\n\n原Firewalld端口开放\n```\n80/tcp 443/tcp\n```\n\n原Firewalld指定IP访问开放端口\n```\nrule family=\"ipv4\" source address=\"x.x.x.194\" port port=\"22\" protocol=\"tcp\" accept\nrule family=\"ipv4\" source address=\"x.x.x.194\" port port=\"7869\" protocol=\"tcp\" accept\n```\n\n### 停止Firewalld并启用Iptables防火墙\n\n停止Firewalld防火墙\n```\nservice firewalld stop\n```\n\n禁止Firewalld自启动\n```\nsystemctl disable firewalld\n```\n\n安装防火墙Iptables\n```\nyum -y install iptables iptables-services\n```\n\n启动并设置开机自启\n```\nsystemctl start iptables && systemctl enable iptables\n```\n\n### 原Firewalld规则迁移Firewalld中\n\n放行指定IP访问端口\n```\n/sbin/iptables -I INPUT -s x.x.x.194 -p tcp --dport 22 -j ACCEPT\n/sbin/iptables -I INPUT -s x.x.x.194 -p tcp --dport 7869 -j ACCEPT\n```\n放行端口\n```\n/sbin/iptables -I INPUT -p tcp --dport 80 -j ACCEPT\n/sbin/iptables -I INPUT -p tcp --dport 443 -j ACCEPT\n```\n\n保存配置\n```\nservice iptables save\n```\n\n重启防火墙\n```\nservice iptables restart;\n```\n\n查看防火墙规则\n```\ncat /etc/sysconfig/iptables;\n```\n\n\n## 添加Docker的防火墙规则\n\n添加规则\n```\niptables -I DOCKER-USER  !  -s  127.0.0.1  -p tcp --dport 3306 -j DROP\n```\n\n---\n\n**B服务器访问A服务器(修改前):**\n> Trying xx.xxx.x.29...\nConnected to xx.xxx.x.29.\nEscape character is '^]'.\nJ\n8.0.33\\a'uY[ÿsvt9DLX#mysql_native_password^]\n\n\n**B服务器访问A服务器(修改后):**\n> [ordinary@ngx25 ~]$ telnet xx.xxx.x.29 3306\nTrying xx.xxx.x.29...\n\n### 报错处理\n\n在配置安装并启动Iptables后，重启安装Mysql的Docker容器，报错日志如下：\n\n> Error response from daemon: Cannot restart container 984fbd11c965: driver failed programming external connectivity on endpoint mysql_8_0 (13949dfba465381240c62d43fe2bf64d3453ad5f51be4a440edf1418a398071b):  (iptables failed: iptables --wait -t nat -A DOCKER -p tcp -d 0/0 --dport 3306 -j DNAT --to-destination 172.17.0.2:3306 ! -i docker0: iptables: No chain/target/match by that name\n\n\n[解决参考博客](https://blog.csdn.net/jiangyu1013/article/details/100055863)\n\n```\nsystemctl restart docker\n```\n\n\n\n\n","categories":["技术博客"]},{"title":"Docker下安装PostgreSQL数据库","url":"//7361.html","content":"\n\n> 参考博客：[Docker-10：Docker安装PostgreSQL](https://blog.csdn.net/rothchil/article/details/125622022)\n\n\n拉取指定版本的PostgreSQL镜像\n```\n docker pull postgres:10.21\n```\n\n创建挂载文件目录\n```\nmkdir -p /home/docker/postgres/10_21/\n```\n\n启动镜像\n```\ndocker run --name postgresql \\\n --privileged=true \\\n --restart=always  \\\n  -e POSTGRES_PASSWORD=123456 \\\n  -p 15433:5432 \\\n  -v /home/docker/postgres/10_21:/var/lib/postgresql/data \\\n  -d postgres:10.21\n```\n\n","categories":["技术博客"]},{"title":"Docker中部署Nginx","url":"//56599.html","content":"\n\n> 参考博客：[Docker 安装 Nginx 容器 (完整详细版)](https://blog.csdn.net/BThinker/article/details/123507820)\n\n## 下载Nginx镜像\n\n下载最新镜像\n```\ndocker pull nginx\n```\n\n下载指定镜像\n```\ndocker pull nginx:xxx\n```\n\n\n## Docker中部署Nginx\n\n### 前期准备\n创建Nginx目录\n```\nmkdir -p /home/nginx/{conf,log,html}\n```\n\n初始化运行nginx容器\n```\ndocker run --name nginx -p 9001:80 -d nginx\n```\n\n复制nginx容器中配置文件到宿主机\n```\ndocker cp nginx:/etc/nginx/nginx.conf /home/nginx/conf/nginx.conf\n```\n```\ndocker cp nginx:/etc/nginx/conf.d /home/nginx/conf/conf.d\n```\n```\ndocker cp nginx:/usr/share/nginx/html /home/nginx/\n```\n\n停止并删除nginx容器\n```\ndocker stop 容器id && docker rm 容器id\n```\n\n## 开始部署\n```\ndocker run \\\n-p 9002:80 \\\n--name nginx \\\n--privileged=true \\\n--restart=always  \\\n-v /home/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \\\n-v /home/nginx/conf/conf.d:/etc/nginx/conf.d \\\n-v /home/nginx/log:/var/log/nginx \\\n-v /home/nginx/html:/usr/share/nginx/html \\\n-d nginx\n```\n\n验证nginx\n```\n curl 127.0.0.1:9002\n```\n\n## 实际运行\n\n容器id：`e3c7e97a2139`\n\n验证配置文件\n```\ndocker exec e3c7e97a2139 nginx -t\n```\n\n重启Nginx\n```\ndocker exec e3c7e97a2139 nginx -s reload\n```\n\n## 注意事项\n> 参考博客：[使用Docker+Nginx部署前端项目 ](https://juejin.cn/post/7210225864355954747)\n\n\n\n`root`对应的路径属于`容器内路径`+`外部宿主机目录`\n```\nlocation / {\n        access_log off;\n        #备注：`/usr/share/nginx/html/` 为容器内路径，`seezoon-admin-web/dist` 为docker-v映射外部宿主机的文件目录\n        root  /usr/share/nginx/html/seezoon-admin-web/dist;\n        index index.html index.htm;\n    }\n```\n\nDocker的部署命令使用`-v`将`容器内部路径`映射到`宿主机`,这里在配置*.conf时候，若存在静态页面资源需要配置路径，需要指定实际配置文件的路径`容器内路径`+`外部宿主机目录`\n","categories":["技术博客"],"tags":["Docker","Nginx"]},{"title":"Docker构建Tomcat和war包镜像","url":"//42172.html","content":"> 参考博客：[docker制作tomcat镜像并部署war包](https://blog.csdn.net/qq_42216791/article/details/125784203  )\n>\n> 参考博客：[docker快速入门](https://blog.csdn.net/chongcilingjian/article/details/119640314)\n>\n> 参考博客：[Dockerfile常用指令](https://blog.csdn.net/xgp666/article/details/107228785)\n  \n\n## 前期准备\n1. 下载JDK的包\n   例如：`jdk-8u151-linux-x64.tar.gz`\n2. 下载Tomcat-xxx.tar.gz的包\n   例如：`apache-tomcat-8.5.54.tar.gz`\n3. 准备部署项目*.war包\n   例如：demo_war.war\n4. 将以上文件均放置同一目录下,例如：`/root/mumu`下\n\n![](./Docker构建Tomcat和war包镜像/Snipaste_2023-06-17_10-49-36.png)\n\n## 编写`DockerFile`文件\n```\n#FROM指令：用来指定基础镜像\nFROM centos\n#MAINTAINER指令：设置创建镜像的作者的标识\nMAINTAINER mumu\n#ADD指令：拷贝文件或目录到镜像，如果是URL或压缩包会自动下载或自动解压\nADD jdk-8u151-linux-x64.tar.gz /usr/local/\nADD apache-tomcat-8.5.54.tar.gz /usr/local/\n#RUN指令：构建镜像时运行的shell命令\nRUN chmod a+x /usr/local\n#ENV指令：设置容器环境变量\nENV MYPATH /usr/local\n#WORKDIR指令：为RUN、CMD、ENTRYPOINT、 COPY和ADD设置工作目录，意思为切换目录\nWORKDIR $MYPATH\nENV JAVA_HOME $MYPATH/jdk1.8.0_151\nENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\nENV CATALINA_HOME $MYPATH/apache-tomcat-8.5.54\nENV CATALINA_BASH $MYPATH/apache-tomcat-8.5.54\nENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin\n# 把war包放到webapps目录下\nADD demo_war.war $CATALINA_HOME/webapps\n#EXPOSE指令：声明容器的服务端口\nEXPOSE 8080\nWORKDIR $CATALINA_HOME/bin\nRUN chmod a+x $CATALINA_HOME/bin/startup.sh\n#VOLUME指令：指定容器挂载点到宿主机自动生成的目录或其他容器\nVOLUME [\"$CATALINA_HOME/logs/\",\"$CATALINA_HOME/webapps\"]\n# 注意：tail -F ,这里如果用小写的f，启动容器的时候打印完日志后会退出，用大写-F容器才会停留\nCMD $CATALINA_HOME/bin/startup.sh && tail -F $CATALINA_HOME/logs/catalina.out\n```\n\n## 制作镜像\n\n![](./Docker构建Tomcat和war包镜像/Snipaste_2023-06-17_11-02-22.png)\n\n### 打包镜像\n> 备注：若由于网络环境问题下载镜像失败，可配置阿里云镜像容器加速工具([Docker配置aliyun阿里云镜像加速](/posts/25181.html))\n\n```\ndocker build -f /root/mumu/Dockerfile -t docker_tomcat_war_demo:3.0 /root/mumu\n```\n\n注意：镜像名需要全小写，大写报错（[repository name must be lowercase](https://blog.csdn.net/wangchaoqi1985/article/details/108959816)）\n\n### 查看镜像\n```\ndocker images;\n```\n\n### 运行镜像\n```\ndocker run -itd -p 8080:8080 docker_tomcat_war_demo:3.0\n```\n![](./Docker构建Tomcat和war包镜像/Snipaste_2023-06-17_11-03-49.png)\n\n### 查看容器日志\n```\ndocker logs xxx(容器id)\n```\n![](./Docker构建Tomcat和war包镜像/Snipaste_2023-06-17_11-04-38.png)\n\n## 转存/还原镜像\n### 转存\n```\ndocker save -o mytomcat_image.docker docker_tomcat_war_demo:3.0\n```\n![](./Docker构建Tomcat和war包镜像/Snipaste_2023-06-17_11-07-31.png)\n\n通过`scp`传输至其他服务器\n```\nscp mytomcat_image.docker root@192.168.136.132:/root/\n```\n![](./Docker构建Tomcat和war包镜像/Snipaste_2023-06-17_11-12-47.png)\n\n### 还原\n```\ndocker load -i  mytomcat_image.docker\n```\n![](./Docker构建Tomcat和war包镜像/Snipaste_2023-06-17_11-13-45.png)\n\n运行镜像\n![](./Docker构建Tomcat和war包镜像/Snipaste_2023-06-17_11-16-14.png)\n\n\n## 附录\n> 鼠标右键单击另存链接下载\n> \n[demo_war.zip](./Docker%E6%9E%84%E5%BB%BATomcat%E5%92%8Cwar%E5%8C%85%E9%95%9C%E5%83%8F/demo_war.zip)","categories":["技术博客"],"tags":["Docker","Images"]},{"title":"Docker配置aliyun阿里云镜像加速","url":"//25181.html","content":"\n## 前提\n未配置阿里云加速前，通过docker的`build`命令构建镜像失败!\n![](./Docker配置aliyun阿里云镜像加速/Snipaste_2023-06-17_09-25-53.png)\n\n## 配置aliyun的docker加速\n阿里云搜索`容器镜像服务`点击`镜像工具/镜像加速器`\n![](./Docker配置aliyun阿里云镜像加速/Snipaste_2023-06-17_09-29-39.png)\n\n配置命令\n\n> 已存在 `/etc/docker/daemon.json` 可跳过\n```\nmkdir -p /etc/docker\n```\n\n配置加速地址\n```\ntee /etc/docker/daemon.json <<-'EOF'\n{\n  \"registry-mirrors\": [\"https://zn3esyoq.mirror.aliyuncs.com\"]\n}\nEOF\n```\n\n重启docker服务\n```\nsystemctl daemon-reload\nsystemctl restart docker\n```\n## 验证加速器\n![](./Docker配置aliyun阿里云镜像加速/Snipaste_2023-06-17_09-36-38.png)","categories":["技术博客"],"tags":["aliyun","镜像加速器","docker"]},{"title":"Linux下使用Docker安装部署Zookeeper","url":"//49054.html","content":"\n\n> [Docker安装Zookeeper教程](https://blog.csdn.net/duyun0/article/details/128437451)\n>\n> [docker搭建zookeeper集群](https://blog.csdn.net/u010080562/article/details/120620827)\n\n\n文档描述：\n\n基于单机实现zookeeper的部署安装实现，通过多台服务器以docker方式集群化部署zookeeper暂未成功实现该方案!\n\nzookeeper集群化部署两种方式\n- 单机docker多开容器实现伪zookeeper集群\n- 多服务器通过docker部署实现完全zookeeper集群\n\n\n## Docker下安装Zookeeper\n查看本地镜像\n```\ndocker images;\n```\n\n查询docker镜像\n```\ndocker search zookeeper;\n```\n\n拉取镜像\n- 拉取最新docker镜像命令\n ```\n docker pull zookeeper:latest\n ```\n- 拉取指定版本docker镜像命令\n```\ndocker pull zookeeper:3.5.7\n```\n\n---\n\n创建ZooKeeper 挂载目录\n\n\n创建多个挂载目录命令\n- data：数据挂载目录\n- conf：配置挂载目录\n- logs：日志挂载目录\n```\nmkdir -p /mydata/zookeeper/{data,conf,logs}\n```\n\n启动zookeeper容器\n```\ndocker run -d --name zookeeper --privileged=true -p2181:2181 -p2888:2888 -p3888:3888  -v /mydata/zookeeper/data:/data -v /mydata/zookeeper/conf:/conf -v /mydata/zookeeper/logs:/datalog zookeeper:3.5.7\n```\n\n参数说明\n```\n-e TZ=\"Asia/Shanghai\" # 指定上海时区 \n-d # 表示在一直在后台运行容器\n-p 2181:2181 # 对端口进行映射，将本地2181端口映射到容器内部的2181端口\n--name # 设置创建的容器名称\n-v # 将本地目录(文件)挂载到容器指定目录；\n--restart always #始终重新启动zookeeper，看需求设置不设置自启动\n```\n> [docker --privileged=true 参数作用](https://blog.csdn.net/wangxuelei036/article/details/107457712)\n\n\n- 添加ZooKeeper配置文件\n> 在挂载配置文件目录(/mydata/zookeeper/conf)下，新增zoo.cfg 配置文件\n\n新增配置\n```\nclientPort=2181\n```\n修改后配置文件\n```\ndataDir=/data  # 保存zookeeper中的数据\nclientPort=2181 # 客户端连接端口，通常不做修改\ndataLogDir=/datalog\ntickTime=2000  # 通信心跳时间\ninitLimit=5    # LF(leader - follower)初始通信时限\nsyncLimit=2    # LF 同步通信时限\nautopurge.snapRetainCount=3\nautopurge.purgeInterval=0\nmaxClientCnxns=60\nstandaloneEnabled=true\nadmin.enableServer=true\nserver.1=localhost:2888:3888;2181\n```\n\n进入容器内部，验证容器状态\n\n进入zookeeper 容器内部\n\n```\ndocker exec -it zookeeper /bin/bash\n```\n\n检查容器状态\n```\ndocker exec -it zookeeper /bin/bash ./bin/zkServer.sh status\n```\n进入控制台\n```\ndocker exec -it zookeeper zkCli.sh\n```\n\n安装ZooInspector客户端连接\n> 【未实际测试起来】\n命令\n```\njava -jar zookeeper-dev-ZooInspector.jar\n```\n\n文件下载地址\n```\nhttps://issues.apache.org/jira/secure/attachment/12436620/ZooInspector.zip\n```\n\n> 问题：WARNING: IPv4 forwarding is disabled. Networking will not work\n\n```\n解决办法：\n# vi /etc/sysctl.conf\n或者\n# vi /usr/lib/sysctl.d/00-system.conf\n添加如下代码：\nnet.ipv4.ip_forward=1\n重启network服务\n# systemctl restart network\n```\n\n\nDocker安装Zookeeper集群\n> 【未实际测试起来-集群部署zookeeper】\n\n- 准备三台机器互相ping通\n- 配置文件zoo.cfg\n\n```\ncd  /mydata/zookeeper/conf\nvim zoo.cfg\n```\n\n三台机器分别执行添加 \n```\nserver.1=192.168.136.140:2888:3888;2181\nserver.2=192.168.136.141:2888:3888;2181\nserver.3=192.168.136.142:2888:3888;2181\n```\n> - 2181: 客户端端口\n> - 2888：zookeeper容器间通信的端口\n> - 3888：zookeeper选举投票的端口\n\n设置myid标识\n> zookeeper选举也会根据myid的大小进行投票master\n\nzookeep01\n```\necho 1 > /mydata/zookeeper/conf/myid\n```\n\nzookeep02\n```\necho 2 > /mydata/zookeeper/conf/myid\n```\n\nzookeep03\n```\necho 3 > /mydata/zookeeper/conf/myid\n```\n\n","categories":["技术博客"]},{"title":"GitHub新增SSH令牌","url":"//60922.html","content":"\n```\nssh-keygen -t ed25519 -C \"oddk@github.com\" -f C:\\Users\\14751\\.ssh\\github_id_rsa\n```\n\n> -f 表示生成文件的位置\n\n---\n\n注意：如果你使用的是不支持 Ed25519 算法的旧系统，请使用以下命令：\n```\nssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n```","categories":["技术博客"]},{"title":"Linux下Docker安装","url":"//54241.html","content":"\n> [Linux安装Docker|往期文章](/posts/63317.html)\n>\n> [centos安装docker显示 No package docker-ce available](https://blog.csdn.net/Dan1374219106/article/details/112484549)\n>\n> [Docker使用常用命令](https://blog.csdn.net/qq_45926473/article/details/125657914)\n \n\n## 基于Centos7安装Docker\n\n下载关于docker的依赖环境\n```\nyum -y install yum-utils device-mapper-persistent-data lvm2\n```\n设置Docker的镜像源(如果不设置，默认会从官网下载)\n```\nyum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n```\n\n刷新缓存\n```\nyum makecache fast\n```\n安装docker\n```\nyum -y install docker-ce\n```\n\n启动docker服务\n```\nsystemctl start docker\n```\n\n设置docker开机启动\n```\nsystemctl enable docker\n```\n\n验证安装结果\n```\ndocker info\n```\n\n打印hello-world\n```\ndocker run hello-world\n```\n\n","categories":["技术博客"],"tags":["Docker"]},{"title":"Git修改历史提交信息中的author、email等信息","url":"//52740.html","content":"\n\n[如何修改Git提交历史中的author，email和name等信息](https://zhuanlan.zhihu.com/p/455741996)\n\n\n## 修改上次提交的信息\n> window在`git-bash`操作，输入`git commit --amend`后，按`i`进入编辑模式,修改后`wq`保存即可\n\n```\ngit commit --amend\n```\n- `--author=\"your_author<your_email>\"` 修改作者及邮箱信息\n- `--no-edit` 表示不修改提交body信息\n\n\n示例：修改上次提交作者名称及邮箱信息，不修改提交内容\n```\ngit commit --amend --author=\"xxx<xxx@qq.com>\" --no-edit\n```","categories":["技术博客"]},{"title":"调用接口方法后动态加载Echar图表","url":"//60321.html","content":"\n## 简要描述\n\n1. 抽取公共部分\n```\nconst bulletPlot = ref(null);\n```\n\n2. 监控值的变化\n```\nwatch(() => props.data, (newVal, oldVal) => {\t\t\n\t\t...\n})\n```\n\n3. 重新初始化数据\n```\n#G2图表的api方法`changeData()`,`Echar`是其它的。\nbulletPlot.value.changeData(newVal);\n```\n\n## 完整示例代码\n\n---\n\n在Echar中调用接口后动态加载图表展示数据\n\n```\n<template>\n\n\t<a-row :gutter=\"[10, 10]\">\n\n\t\t<a-col :span=\"10\">\n\t\t\t<a-card title=\"XXXX统计\" :bordered=\"false\">\n\t\t\t\t<RefererOfAWebsite v-if=\"isloading\" :data=\"dataBingTu\" style=\"height: 400px\" />\n\t\t\t</a-card>\n\t\t</a-col>\n\t\t\n  \n\n\t\t<a-col :span=\"24\">\n\t\t\t<a-card title=\"XXXX进度\" :bordered=\"false\">\n\t\t\t\t<ZiDanTu02 v-if=\"isloading\" :data=\"dataZiDanTu\" />\n\t\t\t</a-card>\n\t\t</a-col>\n\n\t</a-row>\n\n\n\n</template>\n\n<script setup name=\"eCBingZhuangTu\">\n\timport RefererOfAWebsite from '@/views/approval/yccgapprovalinfo/components/RefererOfAWebsite.vue'    \n    import ZiDanTu02 from '@/views/approval/yccgapprovalinfo/components/ZiDanTu02.vue'\n    import { onMounted } from 'vue';\n\timport yccgApprovalInfoApi from '@/api/approval/yccgApprovalInfoApi'\n\n\tlet searchFormState = reactive({})\n    \n\tconst isloading = ref(false);\n\n\tconst dataBingTu = ref()\t\t\n\tconst dataZiDanTu = ref();\n\n\t//查询方法\n\tconst queryDataInfo = () => {\t\t\t\t\t\t\n\n\t\tlet reqParams = new FormData();\t\t\n\t\treqParams.append('startDate',searchFormState.dateStart!=null?searchFormState.dateStart.format('YYYY-MM-DD'):'');\n\t\treqParams.append('endDate',searchFormState.dateEnd!=null?searchFormState.dateEnd.format('YYYY-MM-DD'):'');\n\n\t\tyccgApprovalInfoApi\n\t\t\t\t.queryEcharData(reqParams)\n\t\t\t\t.then((data) => {\t\t\t\t\t\n\n\t\t\t\t\t\t//饼图\n\t\t\t\t \t\tlet bingTuData = data.bingTuData;\t\t\t\t\t\t\t\n\t\t\t\t\t\tif( bingTuData == null || bingTuData==undefined ){\n\t\t\t\t\t\t\talert(\"未查询到有效数据!\");\n\t\t\t\t\t\t\treturn ;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tlet dataParams01 =[];\t\n\t\t\t\t\t\tif( bingTuData.countAfterToday>0 ){\n\t\t\t\t\t\t\tdataParams01.push({ value: bingTuData.countAfterToday, name: '施工中' });\t\n\t\t\t\t\t\t}\t\n\t\t\t\t\t\tif( bingTuData.countBeforeToday>0 ){\n\t\t\t\t\t\t\tdataParams01.push({ value: bingTuData.countBeforeToday, name: '已结束' });\n\t\t\t\t\t\t}\t\t\t\t\t\t\t\n\t\t\t\t\t\tdataBingTu.value = dataParams01;\n\n\t\t\t\t\t\t//子弹图\n\t\t\t\t\t\tlet arrayZiDanTu = [];\n\t\t\t\t\t\tdata.ziDanTuData.map((item) => {\n\t\t\t\t\t\t\tlet date = {};\n\t\t\t\t\t\t\tdate.title = item.projectName;\n\t\t\t\t\t\t\tdate.measures = item.measures;\n\t\t\t\t\t\t\tdate.ranges = item.ranges;\n\t\t\t\t\t\t\tdate.target = item.target;\n\n\t\t\t\t\t\t\tarrayZiDanTu.push(date);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tdataZiDanTu.value = arrayZiDanTu;\t\t\t\t\t\t\n\n\t\t\t\t})\n\t\t\t\t.finally(() => {\n\t\t\t\t\t//接口调用数据加载完成\n\t\t\t\t\tisloading.value = true;\n\t\t\t\t})\n\t}\n\n\t//重置\n\tconst cleanQueryDate = () => {\n\t\tsearchFormState.dateStart = null;\n\t\tsearchFormState.dateEnd = null;\n\n\t\tqueryDataInfo();\n\t}\n\n\tonMounted(() => {\n\t\tqueryDataInfo();\n\t})\n\n</script>\n\n```\n\n饼图\n```\n<template>\n\t<div id=\"RefererOfAWebsite\"></div>\n</template>\n<!--ec官网：https://echarts.apache.org/zh/index.html-->\n<script setup name=\"RefererOfAWebsite\">\n\timport { onMounted } from 'vue'\n\timport * as echarts from 'echarts'\n\n\tconst Echarts = ref(null);\n\t\n\tconst props = defineProps({\n\t\tdata: {\n      \t  type: Array,      \t\n    \t}\n\t})\n\n\tvar option = {\n\t\t\ttitle: {\n\t\t\t\ttext: '',\n\t\t\t\tsubtext: '',\n\t\t\t\tleft: 'center'\n\t\t\t},\n\t\t\ttooltip: {\n\t\t\t\ttrigger: 'item'\n\t\t\t},\n\t\t\tlegend: {\n\t\t\t\torient: 'vertical',\n\t\t\t\tleft: 'left'\n\t\t\t},\n\t\t\tseries: [\n\t\t\t\t{\n\t\t\t\t\tname: '',\n\t\t\t\t\ttype: 'pie',\n\t\t\t\t\tradius: '50%',\n\t\t\t\t\t// data: [\n\t\t\t\t\t// \t{ value: 1048, name: '进行中' },\n\t\t\t\t\t// \t{ value: 735, name: '已结束' }\n\t\t\t\t\t// ],\n\t\t\t\t\tdata: props.data,\n\t\t\t\t\temphasis: {\n\t\t\t\t\t\titemStyle: {\n\t\t\t\t\t\t\tshadowBlur: 10,\n\t\t\t\t\t\t\tshadowOffsetX: 0,\n\t\t\t\t\t\t\tshadowColor: 'rgba(0, 0, 0, 0.5)'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t}\n\n\twatch(() => props.data, (newVal, oldVal) => {\n\t\t//console.log('newVal:', newVal);\n\t\t\n\t\tprops.data = newVal;\t\t\n\n\t\toption = {\n\t\t\ttitle: {\n\t\t\t\ttext: '',\n\t\t\t\tsubtext: '',\n\t\t\t\tleft: 'center'\n\t\t\t},\n\t\t\ttooltip: {\n\t\t\t\ttrigger: 'item'\n\t\t\t},\n\t\t\tlegend: {\n\t\t\t\torient: 'vertical',\n\t\t\t\tleft: 'left'\n\t\t\t},\n\t\t\tseries: [\n\t\t\t\t{\n\t\t\t\t\tname: '',\n\t\t\t\t\ttype: 'pie',\n\t\t\t\t\tradius: '50%',\n\t\t\t\t\t// data: [\n\t\t\t\t\t// \t{ value: 1048, name: '进行中' },\n\t\t\t\t\t// \t{ value: 735, name: '已结束' }\n\t\t\t\t\t// ],\n\t\t\t\t\tdata: props.data,\n\t\t\t\t\temphasis: {\n\t\t\t\t\t\titemStyle: {\n\t\t\t\t\t\t\tshadowBlur: 10,\n\t\t\t\t\t\t\tshadowOffsetX: 0,\n\t\t\t\t\t\t\tshadowColor: 'rgba(0, 0, 0, 0.5)'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t\t\n\t\tEcharts.value.setOption(option)\n\t})\n\n\tonMounted(() => {\n\t\tEcharts.value = echarts.init(document.getElementById('RefererOfAWebsite'))\t\t\n\t\t\n\t\t// 绘制图表\n\t\tEcharts.value.setOption(option)\n\t\t// 自适应大小\n\t\twindow.onresize = () => {\n\t\t\tEcharts.value.resize()\n\t\t}\n\t})\n</script>\n\n```\n\n子弹图\n\n```\n<template>\n\t<div id=\"ZiDanTu02\"></div>\n</template>\n\n<script setup>\n\timport { onMounted } from 'vue'\n\timport { Bullet } from '@antv/g2plot'\n\t \n\tconst bulletPlot = ref(null);\n \n\tconst props = defineProps({\n\t\tdata: { type: Array,}\n\t})\n\n\twatch(() => props.data, (newVal, oldVal) => {\t\t\n\t\tbulletPlot.value.changeData(newVal);\n\t})\n\n\tonMounted(() => {\n\t\tbulletPlot.value = new Bullet('ZiDanTu02', {\n\t\t\tdata: props.data,\n\t\t\tmeasureField: 'measures',\n\t\t\trangeField: 'ranges',\n\t\t\ttargetField: 'target',\n\t\t\txField: 'title',\n\t\t\tcolor: {\n\t\t\t\trange: ['#FFbcb8', '#FFe0b0', '#bfeec8'],\n\t\t\t\tmeasure: '#5B8FF9',\n\t\t\t\ttarget: '#39a3f4'\n\t\t\t},\n\t\t\tlabel: {\n\t\t\t\tmeasure: {\n\t\t\t\t\tposition: 'middle',\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\tfill: '#fff'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\txAxis: {\n\t\t\t\tline: null\n\t\t\t},\n\t\t\tyAxis: false,\n\t\t\t// 自定义 legend\n\t\t\tlegend: {\n\t\t\t\tcustom: true,\n\t\t\t\tposition: 'bottom',\n\t\t\t\titems: [\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue: '30%',\n\t\t\t\t\t\tname: '30%',\n\t\t\t\t\t\tmarker: { symbol: 'square', style: { fill: '#FFbcb8', r: 5 } }\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue: '60%',\n\t\t\t\t\t\tname: '60%',\n\t\t\t\t\t\tmarker: { symbol: 'square', style: { fill: '#FFe0b0', r: 5 } }\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue: '90%',\n\t\t\t\t\t\tname: '90%',\n\t\t\t\t\t\tmarker: { symbol: 'square', style: { fill: '#bfeec8', r: 5 } }\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue: '实际进度',\n\t\t\t\t\t\tname: '实际进度',\n\t\t\t\t\t\tmarker: { symbol: 'square', style: { fill: '#5B8FF9', r: 5 } }\n\t\t\t\t\t},\n\t\t\t\t\t// {\n\t\t\t\t\t// \tvalue: '目标值',\n\t\t\t\t\t// \tname: '目标值',\n\t\t\t\t\t// \tmarker: { symbol: 'line', style: { stroke: '#39a3f4', r: 5 } }\n\t\t\t\t\t// }\n\t\t\t\t]\n\t\t\t}\n\t\t});\t\n\t\tbulletPlot.value.render() \t\n\t})\n</script>\n\n```\n\n","categories":["技术博客"]},{"title":"Git的fork记录","url":"//17811.html","content":"\n\n> 参考博客：[git fork后如何同步、更新](https://www.jianshu.com/p/954fcfe4ae8e)\n\n> 仅以gitee做文档示例参考\n\n## Fork操作命令\n\n对原仓库Fork操作\n![](./Git的fork记录/Snipaste_2023-06-22_11-07-57.png)\n\nFork后自有仓库下\n![](./Git的fork记录/Snipaste_2023-06-22_11-11-22.png)\n\n## 从自己仓库拉取项目\n![](./Git的fork记录/Snipaste_2023-06-22_13-33-28.png)\n\n查询是否添加了更新源\n```\ngit remote -v\n```\n![](./Git的fork记录/Snipaste_2023-06-22_13-38-19.png)\n\n添加更新源`URL`地址\n```\ngit remote add upstream URL\n```\n\n![](./Git的fork记录/Snipaste_2023-06-22_13-41-02.png)\n\n\n从原远程仓库更新\n```\ngit fetch upstream\n```\n![](./Git的fork记录/Snipaste_2023-06-22_13-43-01.png)\n\n\nIdea中git插件显示当前git信息\n![](./Git的fork记录/Snipaste_2023-06-22_13-46-54.png)","categories":["技术博客"],"tags":["Git","Git-Fork"]},{"title":"git克隆仓库并保留提交记录至新仓库","url":"//959.html","content":"\n[Git教程](https://geek-docs.com/git/git-questions/52_git_how_do_i_clone_a_git_repository_into_a_specific_folder.html)\n\n[git远程仓库地址改变后，重新上传代码步骤](https://blog.csdn.net/weixin_48828067/article/details/114580693)\n\n\n\n\n\n  \ngit add .     将代码先存入暂存区没有提交到本地仓库\ngit commit -m \"  叙述的内容\" 将代码提交到本地仓库\ngit push -u origin master  第一次加-u\n\n查看所有远程仓库\n```\ngit remote\n```\n\n删除老的远程仓库\n```\ngit remote rm origin\n```\n添加新的远程仓库地址\n```\ngit remote add origin http://xxx/xxx.git\n```\n\n将代码先存入暂存区没有提交到本地仓库\n```\ngit add .\n```\n\n将代码提交到本地仓库\n```\ngit commit -m \"  叙述的内容\"\n```\n\n第一次加-u\n```\ngit push -u origin master  \n```\n\n---\n\n克隆指定分支代码到指定目录下\n```\ngit clone -b <branch_name> <repository_url> <destination_folder>\n```\n\n> `git clone -b xx分支 xx仓库地址 xx目录`\n\n注意：Windows下地址路径需要是`/`,从地址栏获取的`C:\\Users\\`中`\\`在linux中是转义符\n```\ngit clone -b cc_qrcode http://XXXX.git C:/Users/cc/cc-h5/\n```","categories":["技术博客"]},{"title":"git 拉取远端所有分支","url":"//32933.html","content":"\n\n[CSDN博客原文参考地址](https://blog.csdn.net/weixin_42253753/article/details/116917450)\n\n## 关键命令代码\n> git branch -r | grep -v '\\->' | while read remote; do git branch --track \"${remote#origin/}\" \"$remote\"; done\n> git fetch --all\n> git pull --all\n\n___\n\n## 操作步骤截图\n\n### 通过 git bash 窗口输入git clone 命令\n\n![](1.jpg \"通过 git bash 窗口输入git clone 命令\")\n\n### 克隆项目到本地\n\n![](2.jpg \"克隆项目到本地\")\n\n### 进入项目 jmt_lp 文件夹目录下\n\n![](3.jpg \"进入项目 jmt_lp 文件夹目录下\")\n\n### 执行以下命令\n\n`git branch -r | grep -v '\\->' | while read remote; do git branch --track \"${remote#origin/}\" \"$remote\"; done\ngit fetch --all\ngit pull --all\n`\n  \n## 下载所有分支代码  \n\n![](4.jpg \"下载所有分支代码\")\n\n## 打开Idea查看项目所有分支代码下载结果\n\n![](5.jpg \"打开Idea查看项目所有分支代码下载结果\")\n","categories":["技术博客"],"tags":["GIT"]},{"title":"git报错问题处理","url":"//97811.html","content":"\n## bad signature和index file corrupt的处理方法\n[参考文档](https://blog.csdn.net/weixin_36995355/article/details/89509632)\n\n使用`git status`命令报错日志：\n```\nλ git status\nerror: bad signature\nfatal: index file corrupt\n```\n\n解决方法：\n1. 进入工程目录 `cd /project`\n2. 删除文件 `rm -rf .git/index`\n3. 重建文件 `git reset`\n","categories":["技术博客"],"tags":["Git"]},{"title":"切换项目的Git远端仓库地址","url":"//49135.html","content":"\n> 参考博客：[git 切换远程仓库地址](https://blog.csdn.net/yihanzhi/article/details/78801027)\n\n\n## 切换远程仓库地址\n### 方式一\n`URL`为需要切换远程仓库新地址\n```\ngit remote set-url origin URL\n```\n### 方式二\n删除现有仓库地址\n```\ngit remote rm origin\n```\n添加新仓库`URL`地址\n```\ngit remote add origin URL\n```\n\n## 查看远程仓库信息\n```\ngit remote -v\n```","categories":["技术博客"],"tags":["Git"]},{"title":"Git配置多个账号","url":"//52878.html","content":"\n\n> 参考博客: [配置多个Git账号（windows 10）](https://blog.csdn.net/q13554515812/article/details/83506172)\n>\n> 参考博客：[git 设置多账号](https://juejin.cn/post/7058642341644484621)\n\n## 创建仓库SSH KEY令牌\n```\nssh-keygen -t ed25519 -C \"your_email@example.com\" -f \"your_SSH-KEY_fileName\"\n```\n- -t 密钥类型\n- -c 密钥注释\n- -f 密钥文件名称\n\n## 创建多git账户配置文件\n在目录`.ssh`下创建`config`文件\n\n文件内容示例\n```\n##模板示例##\n#Host 主机别名\n#HostName 服务器真实地址\n#User 用户名\n#PreferredAuthentications 认证方式\n#IdentityFile 私钥文件路径\n\n##gitee##\nHost gitee.com\nHostName gitee.com\nPreferredAuthentications publickey\nIdentityFile C:/Users/14751/.ssh/id_ed25519\n\n##github##\nHost github.com\nHostName github.com\nPreferredAuthentications publickey\nIdentityFile /Users/linlin/.ssh/GitHub\n```\n\n### 打开`git-bash`窗口测试配置是否有效\n\n```\nssh -T git@gitee.com\n```\n```\nssh -T git@github.com\n```\n\n\n## 设置账户信息\n### 全局配置\n#### 全局配置账户信息\n```\ngit config --global user.name \"linlin\"\n```\n\n```\ngit config --global user.email \"linlin.xxx@foxmail.com\"\n```\n\n#### 移除全局配置账户信息\n> 如果未设置全局账户信息则忽略\n\n移除全局用户名配置\n```\ngit config --global --unset user.name\n```\n\n移除全局邮箱配置\n```\ngit config --global --unset user.email\n```\n\n移除全局密码\n```\ngit config --global --unset user.password\n```\n\n#### 查看全局配置信息\n```\n#用户名\ngit config --global user.name\n\n#邮箱\ngit config --global user.email\n\n#密码\ngit config --global user.password\n```\n\n\n### 仓库单独配置\n\n用户名\n```\ngit config user.name \"user1\"\n```\n邮箱\n```\ngit config user.email \"user1@email.com\"\n```\n\n> 原先使用HTTPS通信，则需要修改远程仓库地址\n\n```\ngit remote rm origin\ngit remote add origin git@user1.github.com:xxx/xxxxx.git\n```","categories":["技术博客"],"tags":["gitee","github","gitlab"]},{"title":"Hexo博客文件迁移新环境部署","url":"//9968.html","content":"\n## 文档位于云仓库\n`Hexo`文档博客已上传`gitee`仓库\n![](./Hexo博客文件迁移新环境部署/Snipaste_2023-06-13_22-58-56.png)\n\n## 新环境部署\n\n### 新环境重新部署/迁移注意事项\n1. 确保电脑已安装nodeJs和Git\n2. npm install hexo-cli -g #全局安装hexo-cli客户端\n3. npm install #项目局部安装依赖\n4. hexo g #打包 (win10/11的powershell无法执行hexo命令，用cmd命令提示符即可)\n5. hexo s #运行 (同上所述)\n\n### 一键运行脚本\n一键运行脚本文件目录[ other ]下\n\n1. 一键创建页面hexo.bat\n2. 一键部署启动hexo.bat\n3. 一键部署GitHub_Pages.bat\n\n> 注意：若`hexo文档目录`与`脚本.bat`不符合,请修改bat文件中最新目录位置，否则脚本启动有问题！\n\n## 注意事项\n1. 创建发布目录,用于`hexo g`打包页面资源文件发布提交`github`\n   \n```\n   .deploy\n```\n\n2. 以克隆方式拉取`github`上仓库的项目到本地，主要是获取`.git`配置\n\n![](./Hexo博客文件迁移新环境部署/Snipaste_2023-06-13_23-04-43.png)\n\n3. 将`del.bat`脚本复制到`.deploy`目录\n> `del.bat` 脚本会在提交推送文件后清空当前目录文件\n\n![](./Hexo博客文件迁移新环境部署/Snipaste_2023-06-13_23-07-22.png)\n\n## 其他补充\n\n### 自定义css样式\n主题`theme`目录下的`css`下的`custom`目录未自建目录,非主题初始化自带。主要作用是对博客主题自定义美化的css样式配置等；\n![](./Hexo博客文件迁移新环境部署/Snipaste_2023-06-14_08-40-46.png)\n\n### 自定义资源文件\n可配置相关资源文件图片等，通过命令`hexo -g`打包生成html静态页面会附带当前资源等。\n![](./Hexo博客文件迁移新环境部署/Snipaste_2023-06-14_08-41-11.png)","categories":["技术博客"]},{"title":"Hexo启动报错port问题","url":"//38317.html","content":"\n> [win10 端口无故被占用的问题](https://www.cnblogs.com/acgq/p/14765179.html)\n\n# 问题描述\n\n正常运行`hexo s`失败异常，端口4000使用不了，\n切换命令`hexo server -p 4001`报错依旧。\n\n> Permission denied. You can't use port 4001\n> \n![](Snipaste_2023-04-28_13-33-37.jpg)\n\n\n# 解决方法\n\n以`管理员`身份运行`CMD`\n\n执行以下命令\n```\n#先关闭服务\nnet stop winnat\n#在开启服务\nnet start winnat\n```\n\n![](Snipaste_2023-04-28_13-38-45.jpg)\n![](Snipaste_2023-04-28_13-38-33.jpg)\n\n\n\n# 补充：排查Windows下端口占用命令\n```\nnetstat-aon|findstr 端口号\n```","categories":["技术博客"],"tags":["winnat"]},{"title":"Hexo博客相关文档","url":"//7324.html","content":"\n> 仅作记录，汇总相关Hexo的博客\n\n# Hexo主题美化\n>[Butterfly美化](https://www.cnblogs.com/MoYu-zc/p/14395965.html)\n\n# Hexo文章置顶\n> [hexo博客主题 Butterfly优化之文章置顶](https://blog.csdn.net/weixin_43372529/article/details/114176470)\n>\n# Hexo图片懒加载教程\n> [hexo开启懒加载后图片无法立即显示的问题](https://blog.csdn.net/qq_41911142/article/details/124253167)\n>\n\n# Hexo文章置顶与首页隐藏\n> [同时支持置顶和隐藏文章的 hexo 生成器插件（hexo-generator-index-custom）](https://blog.csdn.net/qq_42777659/article/details/126516780)\n\nhexo-generator-index-pin-top -> 置顶\nhexo-generator-index2 -> 隐藏\n\nhexo-generator-index-custom -> 置顶 + 隐藏\n\n\n# Hexo文章加密\n> [hexo-blog-encrypt](https://github.com/D0n9X1n/hexo-blog-encrypt/blob/master/ReadMe.zh.md)\n\n\n# Hexo插件-日志的自动分类插件 (⭐⭐⭐⭐⭐)\n> [日志的自动分类插件 hexo-auto-category ](https://blog.eson.org/pub/e2f6e239/)\n\n# hexo-renderer-markdown-it 高级的Markdown渲染器\n\n> [hexo-renderer-markdown-it 的配置与插件配置](https://blog.cxplay.org/works/hexo-renderer-markdown-it_and_plugins_config/)\n> \n> [【Hexo】选择更高级的Markdown渲染器](https://blog.csdn.net/qq_42951560/article/details/123596899)\n\n备注:需要安装额外插件`hexo-asset-image`不然图片不显示\n\n其他补充插件:\n```\n#自定义容器(需要额外配置)\nnpm i markdown-it-container\n#自定义图片宽高\nnpm i markdown-it-imsize\n#折叠/展开内容\nnpm i markdown-it-expandable\n```\n\n# 通过PicGo搭配gitee创建图传\n> [PicGo一条龙：下载、安装、配置gitee、配置typora](https://blog.csdn.net/weixin_45525272/article/details/125387761)\n>\n\n我这里只是用来给hexo用作图传,编辑器使用的vscode,因为typora目前已经开始收费了(呜呜呜)\n \n 备注: gitee存在防盗链,目前无法正常预览图片.\n \n 后期可以自建Minio服务,然后通过pigGo搭建配置属于自己的图床\n ","categories":["技术博客"],"tags":["Hexo主题butterfly美化","Hexo文章置顶"]},{"title":"Hexo的cdn.jsdelivr.net访问CDN加速做本地处理","url":"//64234.html","content":"\n问题描述：\n引用的npm依赖中，调用网址`cdn.jsdelivr.net`的CDN做加速处理，国内网络环境下存在访问慢情况！\n![](./Hexo的cdn-jsdelivr-net访问CDN加速做本地处理/Snipaste_2023-06-08_09-52-26.png)\n\n1. 找到引入npm的依赖\n![](./Hexo的cdn-jsdelivr-net访问CDN加速做本地处理/Snipaste_2023-06-08_09-54-14.png)\n\n1. 更新npm依赖中的js引用url地址\n\n在Hexo的`themes`主题目录下，所选择的主题文件`butterfly`(我这里是这个)下的`source`目录添加`npm_local_js`目录用来做本地化js资源文件\n![](./Hexo的cdn-jsdelivr-net访问CDN加速做本地处理/Snipaste_2023-06-08_10-00-19.png)\n\n原文件地址\n```\n${insertScript ? '<script src=\"https://cdn.jsdelivr.net/npm/echarts@4.8.0/dist/echarts.min.js\"></script>' : ''}\n```\n修改文件地址\n```\n${insertScript ? '<script src=\"/custom/npm_local_js/echarts.min.js\"></script>' : ''}\n```\n![](./Hexo的cdn-jsdelivr-net访问CDN加速做本地处理/Snipaste_2023-06-08_10-04-23.png)\n\n3. 重新打包部署测试是否正常\n![](./Hexo的cdn-jsdelivr-net访问CDN加速做本地处理/Snipaste_2023-06-08_10-11-50.png)\n","categories":["技术博客"],"tags":["cdn.jsdelivr.net","npm引用js进行本地化"]},{"title":"Hexo添加搜索插件-hexo-generator-searchdb","url":"//62708.html","content":"\n> [【CSDN】hexo博客添加本地搜索功能](https://blog.csdn.net/nineya_com/article/details/103338696#2hexogeneratorsearchdb_10)\n\n---\n\n## 到`blog`目录下\n![](Snipaste_2023-04-25_11-08-07.jpg)\n\n## 添加插件 hexo-generator-searchdb\n```\nnpm install hexo-generator-searchdb --save\n```\n![](Snipaste_2023-04-25_11-09-16.jpg)\n\n## 修改博客目录下_config.yml配置文件\n> 添加以下内容\n```\nsearch:\n  path: search.xml\n  field: post\n  content: true\n  format: html\n```\n\n![](Snipaste_2023-04-25_11-12-40.jpg)\n\n*补充描述：*\n> `path：`表示搜索后生成的文件路径，可以生成xml和json两种格式\n> \n> `field：`表示搜索的范围，有“post、page和all”三种值\n> \n>>  post：所有的文章；\n>>\n>>  page：所有顶部导航选项的页面；\n>>\n>>  all：所有的文章和顶部导航选项的页面。\n>\n>` content：`是否包含搜索到的文章的全部内容。如果false，生成的结果只包括标题和创建时间这些信息，没有文章主体。默认情况下是true.\n> \n> `format：`搜索到的内容、选项的格式。\n>>\n>>html(默认)：将html原文本缩略。\n>>\n>> striptags：将html原文本缩略，并删除所有标记。\n>> \n>> raw：记下每一篇文章或每一页的文字。\n\n\n\n## 修改主题Theme目录下_config.yml配置文件\n![](Snipaste_2023-04-25_11-15-46.jpg)\n\n## 启动Hexo\n![](Snipaste_2023-04-25_11-19-29.jpg)","categories":["技术博客"],"tags":["hexo-generator-searchdb"]},{"title":"Hexo图片不显示解决","url":"//13094.html","content":"\n## 安装插件及页面配置\n\n<br>\n\n安装插件\n```\nnpm install hexo-renderer-marked\n```\n\n修改hexo根目录配置文件_config.yml\n```\n#更改hexo设置\npost_asset_folder: true\n#添加marked插件设置\nmarked:\n  prependRoot: true\n  postAsset: true\n```\n\n模拟创建新页面\n```\nhexo n testPage\n```\n在文件testPage.md中引入图片命令\n\n> vscode编辑器中正常预览现实图片\n```\n![](./testPage/test.jpg)\n```\n> hexo发布网页\n```\n![](test.jpg)\n```\n\n<br>\n\n## 模拟创建页面-预览效果截图\n\n<br>\n\nVscode中预览**图片展示**（图片使用的相对路径）\n![](Snipaste_2023-04-23_21-27-55.jpg)\n\n<br>\n\nHexo部署页面打包预览**图片不展示**\n![](Snipaste_2023-04-23_21-29-58.jpg)\n\n<br>\n\nHexo部署页面打包预览**图片展示**\n![](Snipaste_2023-04-23_21-31-41.jpg)\n\n\n## 日常编辑、发布工作流\n\n<br>\n\n> 备注：在上述插件已经安装且配置文件已如上述所示修改完成后\n\n1. 通过命令 `hexo n newPage`创建新的页面\n2. 复制已创建的`newPage`文件夹及`newPage.md`文件到vscode工作目录下\n3. 在vscode中正常书写信息、引用相关图片素材资源放置`newPage`文件夹中\n4. 在vscode中完成书写后，复制当前步骤[**2**]的文件夹及文件到hexo的工作目录下覆盖初始创建的文件夹及目录\n5. 全局替换hexo工作目录下`newPage.md`文件中图片引入代码`./newPage/`，使其图片目录由`![](./newPage/xxx.jpg)`为变为`![](xxx.jpg)`\n6. 执行`hexo g`命令进行打包，运行`hexo s`命令预览页面\n7. 复制hexo工作目录下`public`下所有资源到相应仓库下进行提交发布即可\n\n\n## 补充vscode下编辑md文件的相关插件\n![](Snipaste_2023-04-23_21-48-18.jpg)\n\n\n## 最新补充\n\n`hexo-renderer-markdown-it`比`hexo-renderer-marked`更强大!\n\n新增插件:\n`hexo-renderer-markdown-it (需要卸载:hexo-renderer-marked)`\n\n\n此时图片显示不出来,需要额外安装插件:\n`hexo-renderer-markdown-it`","categories":["技术博客"],"tags":["hexo-renderer-marked"]},{"title":"Hexo设置文章加密","url":"//59357.html","content":"\n> [Hexo博客设置文章加密](https://blog.csdn.net/WwLK123/article/details/124436871)\n>\n\n## 安装插件\n```\nnpm install hexo-blog-encrypt\n```\n![](Snipaste_2023-04-26_11-01-29.jpg)\n\n## 增加`_config.yml`配置项\n```\nencrypt:\n  enable: true  \n```\n\n## 页面模板添加加密字段\n```\npassword: \nmessage: \n```\n![](Snipaste_2023-04-26_11-17-21.jpg)\n\n## 启动运行\n\n**文章首页展示-已加密**\n\n![](Snipaste_2023-04-26_11-19-08.jpg)\n\n**文章预览页-已加密**\n\n![](Snipaste_2023-04-26_11-21-03.jpg)","categories":["技术博客"],"tags":["hexo-blog-encrypt"]},{"title":"Hexo通过windows的bat脚本联动","url":"//15065.html","content":"\n## 想法初衷\n\n> 通过Windows的bat脚本一键化对hexo执行部署打包等相关命令\n\n---\n\n\n## 脚本代码\n\n### 一键运行`hexo n`\n> 在vscode中进行编辑，编辑完成后直接**处理图片前缀**后部署本地环境预览后发布\n```\n:: 防止中文乱码\nchcp 65001\n\n:: 不打印其他命令的回显(放在'@echo off'上此注释会被输出到控制台)\n@echo off\n\n:: 初始化参数配置\nset BlogPath=D:\\workSpace\\Hexo\\blog\necho 博客目录：%BlogPath%\n\nset CopyFrom=D:\\workSpace\\Hexo\\blog\\source\\_posts\\\necho 复制目录：%CopyFrom%\n\nset ParseTo=D:\\workSpace\\Vscode\\\necho 粘贴目录：%ParseTo%\n\n:: 配合'goto begin'回到此处重复执行操作\n:: :begin\n\n:: 获取输入\nset input=\nset /p input=请输入新增页面名称:\n\n:: 去除输入的所有空格（因为空格会导致hexo n创建新页面失败）\nset \"input=%input: =%\"\n\n:: 打印用户输入参数\necho %input%\n\n:: 执行cmd命令(cmd /c 表示执行完毕后关闭窗口)\nstart cmd /c \"cd/d %BlogPath% && hexo n '%input%' \"\n\n:: 等待最长5s继续往下执行操作（原因：需要等待 hexo n 的文件创建好，然后执行复制操作!）\n:: timeout /t 5 /nobreak > NUL\n\n:: 复制创建文件到vscode工作目录下\n:: copy  %CopyFrom%%input%.md  %ParseTo%\n\n:: 创建空文件夹\n:: md %ParseTo%%input%\n\n:: 可配合':begin'进行重复执行操作\n:: goto begin\n\n:: 暂停\n:: pause\n\n:: 退出关闭窗口\nexit\n```\n\n\n### 一键运行`hexo s`\n```\n:: 防止中文乱码\nchcp 65001\n\n@echo off\n\n:: 获取最新代码（关闭自动更新）\n:: start cmd /c \"cd/d D:\\workSpace\\Blog\\blog\\themes\\butterfly && git pull \"\n:: 清空public打包目录/打包资源/本地部署\nstart cmd /k \"cd/d D:\\workSpace\\Hexo\\blog && hexo clean && hexo g && hexo s\"\n```\n\n\n### 一键部署`github pages`\n> 原文件的编辑更新代码提交`giteee`信息规范即可，提交到`github pages`仓库部署的页面可随意。\n```\n:: 防止中文乱码\nchcp 65001\n\n@echo off\n\n:: 初始化参数配置\nset BlogDeployPath=D:\\workSpace\\Hexo\\blog\\.deploy\\ODUODUOKE.github.io\nset HexoPublicPath=D:\\workSpace\\Hexo\\blog\\public\nset delBatName=del.bat\n\n:: start cmd /c \"cd/d %BlogDeployPath% && call %delBatName%\"\n:: timeout /t 5 /nobreak \n\nstart cmd /c \"robocopy.exe %HexoPublicPath% %BlogDeployPath% /E /COPY:DAT /DCOPY:T\"\ntimeout /t 5 /nobreak \n\nstart cmd /c \"cd/d %BlogDeployPath% && git add . && git commit -m \"update\" && git push origin main && call %delBatName%\"\n```\n\n\n## 提交推送\n> vscode编辑的原文件及资源，我提交的`gitee`\n> hexo打包的部署页面这个提交是`github pages`\n\n### vscode下文件提交git\n> 安装git插件，直接在vscode中将相关文件提交至仓库\n\n### hexo下部署文件提交git\n> 通过脚本推送部署,不需要人工干预\n\n\n## TODO\n后续期望是通过一键脚本启动完服务后，通过`curl`监听到指定端口地址访问状态正常，然后启动浏览器（无需人工启动浏览器进行预览）。\n\n\n## 其他\n\n### 一键部署`github pages`注意事项\n\n\n![](Snipaste_2023-04-28_10-37-15.jpg)\n\n.gitgnore文件内容如下：\n```\ndel.bat\n```\n\n### del.bat 脚本命令代码\n```\n:: 防止中文乱码\nchcp 65001\n\n@echo off\n\n:: 设置保护目录、文件参数配置\nset defendDirName01=.git\nset defendBatSelf01=del.bat\nset defendBatSelf02=.gitignore\n\n\nfor /D %%i in (*) DO (\n\tif not %%i==%defendDirName01% (\n\t\tif not %%i==保留文件夹02（示例） (\n\t\t\trem echo 删文件夹：%%i \n\t\t\trd /S /Q %%i\n\t\t)\n\t)\n)\n\nfor %%i in (*) DO (\n\tif not %%i==%defendBatSelf01% (\n\t\tif not %%i==%defendBatSelf02% (\n\t\t\trem echo 删除文件：%%i \n\t\t\tdel %%i \n\t\t) \n\t)\n)\n```\n\n\n\n### 参考资料\n\n[bat批处理脚本中文乱码问题解决](https://blog.csdn.net/u012815136/article/details/101549751)\n\n[.Bat之批处理实现手动输入变量参数](https://blog.csdn.net/laozhuxinlu/article/details/52853787)\n\n[使用bat脚本自动打开cmd并执行命令](https://blog.csdn.net/s_y_w123/article/details/111353912)\n\n[写一个打开cmd窗口并执行cmd命令的Windows脚本（.bat文件）](https://blog.csdn.net/weixin_46909756/article/details/108726489)\n\n[bat文件命令行去除变量的空格](https://blog.csdn.net/sinat_16741503/article/details/72869123)\n\n[Bat 等待一段指定的时间](https://blog.csdn.net/l_o_s/article/details/103417243)\n\n[Windows copy命令](https://blog.csdn.net/JintGuo/article/details/77542490)\n\n[bat 复制文件和文件夹（目录](https://blog.csdn.net/weixin_40277264/article/details/121531320)\n\n[BAT ---- 删除部分文件和文件夹，仅保留指定文件、和文件夹](https://blog.csdn.net/shijianduan1/article/details/105718813)\n\n[curl http_code 状态码](https://www.cnblogs.com/wangyh702/p/11420287.html)\n\n[windows下bat脚本监听http服务](https://blog.csdn.net/zsx18273117003/article/details/93421783)\n\n[Curl学习日记2 - 在Windows CMD命令行中使用Curl](https://blog.csdn.net/weixin_42585386/article/details/106767065)\n\n---\n> 未使用，但是觉得以后会涉及，于是记录下来\n\n[在批处理(cmd，bat)下传递参数和获取参数](https://blog.csdn.net/Lvbey/article/details/118611287)\n\n---\n\n> robocopy 的使用教程忘记留存链接下来了。\n\n原本使用xcopy，经过测试发现复制过来的文件和原目录的文件里面多出来一个page文件夹和一个content.json （应该使我哪里步骤有问题导致的）。\n\n**备注： 如果复制到的目录下存在`.git`目录，文件会自动暂存区，导致我明明把目录下文件删除了，然后执行脚本复制好几次都失败！当时使用的`xcopy`，它输出日志100%copyied ，然后实际目录下是空的。**\n\n---\n\n\n\n","categories":["技术博客"],"tags":["Windows系统bat脚本"]},{"title":"Hexo自用插件记录","url":"//3085.html","content":"\n<!-- # 现安装插件截图 -->\n<!-- ![](./Hexo自用插件记录/Snipaste_2023-04-30_22-27-05.jpg) -->\n\n# TODO 待完善更新\n\n# 已启用插件\n\n## hexo-abbrlink  ⭐⭐⭐⭐⭐\n生成固定永久文章链接\n\n### 修改配置\n![](./Hexo自用插件记录/Snipaste_2023-04-30_22-58-03.jpg \"修改配置截图\")\n#### hexo配置修改\n```\n#permalink: :year/:month/:day/:title/ #hexo默认地址\npermalink: posts/:abbrlink.html\n```\n#### hexo-abbrlink 配置修改\n```\nabbrlink:\n  alg: crc16\n  rep: dec\n  drafts: false\n  auto_category:\n     enable: true\n     depth:      \n     over_write: false \n  auto_title: false \n  auto_date: false \n  force: false\n```\n### 效果预览\n#### 未修改前\n![](./Hexo自用插件记录/Snipaste_2023-04-30_23-20-34.jpg)\n#### 已修改后\n![](./Hexo自用插件记录/Snipaste_2023-04-30_23-18-00.jpg)\n\n\n\n## hexo-auto-category ⭐⭐⭐⭐⭐\n用途: 文章的自动分类插件\n\n## hexo-lazyload-image ⭐⭐⭐⭐\n用途: 图片懒加载\n\n## hexo-neat ⭐⭐⭐⭐\n用途: 资源文件压缩\n\n## hexo-renderer-markdown-it ⭐⭐⭐⭐\n用途: 更高级的markdown的渲染插件\n\n### markdown-it-imsize ⭐⭐⭐⭐\n> 属于 `hexo-renderer-markdown-it ` 额外插件\n> \n用途: 设置图片尺寸大小\n\n### markdown-it-expandable\n> 属于 `hexo-renderer-markdown-it ` 额外插件\n\n用途: 自动展开/隐藏\n\n## hexo-asset-image ⭐⭐⭐⭐⭐\n用途: 解决图片不显示问题\n\n修改 `_config.yml` 中 `post_asset_folder: true`\n\n![](./Hexo自用插件记录/Snipaste_2023-04-30_23-03-42.jpg)\n\n### md文件中引用图片方式\n\n```\n#引用图片格式\n## 方式1\n![](./Hexo自用插件记录/Snipaste_2023-04-30_23-06-10.jpg)\n## 方式2\n![](Snipaste_2023-04-30_23-06-10.jpg)\n```\n\n![](./Hexo自用插件记录/Snipaste_2023-04-30_23-06-10.jpg)\n\n\n## hexo-wordcount ⭐⭐⭐\n用途: 统计字数\n\n## hexo-generator-sitemap ⭐⭐\n用途: 生成站点地图(Google)\n\n## hexo-generator-baidu-sitemap ⭐⭐\n用途: 生成站点地图(Baidu)\n\n## hexo-generator-searchdb ⭐⭐⭐\n用途: 搜索插件\n\n## hexo-generator-index-custom ⭐⭐⭐⭐\n用途: 支持置顶/隐藏文章\n\n\n\n## hexo-blog-encrypt ⭐⭐⭐⭐\n用途: 文章加密\n\n\n# 已停用插件\n\n## hexo-generator-feed\n用途: 实现RSS订阅\n\n## hexo-generator-index-pin-top\n用途: 文章置顶展示\n\n### 缺点\n如果同时需要设置文章置顶与隐藏,功能缺失!\n\n## hexo-generator-index2\n用途: 文章主页隐藏\n\n### 缺点\n如果同时需要设置文章置顶与隐藏,功能缺失!\n\n## hexo-helper-live2d\n用途: 二次元看板娘\n\n### 模型\n`live2d-widget-model-shizuku`\n\n`live2d-widget-model-hijiki`\n\n### 缺点\n\n## hexo-tag-cloud\n用途: 标签云\n\n### 缺点","categories":["技术博客"],"tags":["Hexo自用插件集合"]},{"title":"Idea优化启动下载pre-built","url":"//2255.html","content":"\n[取消Download pre-built shared indexes Pre-built maven...自动下载](https://blog.csdn.net/MXDMAX/article/details/120989540)\n\n\n关闭路径：`File → Settings → Tools → Shared Indexes`\n\n![](./Idea优化启动下载pre-built/Snipaste_2024-02-21_21-28-27.png)\n\n","categories":["技术博客"]},{"title":"基于Hexo+GitHub Page搭建个人博客","url":"//47912.html","content":"\n<br/>\n\n本次教程参考资料：\n> [手把手教你使用Hexo + Github Pages搭建个人独立博客](https://segmentfault.com/a/1190000004947261 \"来源:segmentfault\")\n> [我是如何利用Github Pages搭建起我的博客，细数一路的坑](https://zhuanlan.zhihu.com/p/334815426 \"来源：知乎\")\n>\n\n# 搭建Hexo博客\n___\n\n\n<br/>\n\n1. [Node.js下载安装](https://nodejs.org/en)\n   ![](nodejs.jpg)\n\n<br/>\n\n2. [Git下载安装](https://git-scm.com/)\n   ![](git.jpg)\n\n<br/>\n\n3. 安装Hexo\n\n    <br/>\n\n   3.1 Windows下用CMD命令窗口打开\n   ![](Snipaste_2023-04-23_09-35-00.jpg) \n\n   3.2 安装Hexo模块\n   ```\n   npm install hexo-cli -g #将模块全局安装\n   ```\n   > --save #将模块安装到项目目录下\n\n   3.3 初始化Hexo\n   ```\n   \n   hexo init blog #初始化博客目录（'blog'可修改其他名称）\n   cd blog\n   npm install #安装依赖配置\n   ```\n   ![](Snipaste_2023-04-23_09-38-35.jpg)\n\n   3.4 启动Hexo\n   ```\n   hexo g # 或者hexo generate\n   hexo s # 或者hexo server\n   ```\n        启动完成后，可以在[http://localhost:4000/](http://localhost:4000/) 进行查看\n    <br/>\n\n   ![](Snipaste_2023-04-23_09-40-24.jpg)\n\n    <br/>\n\n   命令解释：\n    - hexo generate (hexo g) 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹\n   - hexo server (hexo s) 启动本地web服务，用于博客的预览\n   - hexo deploy (hexo d) 部署播客到远端（比如github, heroku等平台）\n   - hexo new \"postName\" (hexo n) #新建文章  \n   - hexo new page \"pageName\" #新建页面\n\n    <br/>\n\n    3.5 常用组合命令\n    ```\n    hexo s -g #生成预览\n    hexo d -g #生成部署\n    ```\n\n\n---\n# Hexo主题设置\n\n1. 安装主题\n   ```\n   hexo clean\n   git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia\n   ```\n   ![](init_hexo_theme.jpg)\n\n<br/>\n\n2. 启用主题\n   > 修改Hexo目录下的_config.yml配置文件中的theme属性，将其设置为yilia\n\n![](update_hexo_theme.jpg)\n\n<br/>\n\n3. 更新主题并启动Hexo\n   ```\n   cd themes/yilia\n   git pull\n   hexo g\n   hexo s\n   ```\n   ![](new_theme_yilia.jpg)\n\n---\n\n# Github Pages \n\n<br/>\n\n   1. 创建GitHub Page仓库\n   \n   <br/>\n\n   ![](Snipaste_2023-04-23_10-21-35.jpg \"图片来源：上述知乎博客\")\n\n   <br/>\n\n2. 开启GitHub Page仓库\n   \n    <br/>\n\n        进入设置\n   ![](Snipaste_2023-04-23_10-22-02.jpg \"图片来源：上述知乎博客\")\n\n    <br/>\n\n         确认仓库站点是否开通（一般是默认开通的）\n\n   ![](Snipaste_2023-04-23_10-22-13.jpg \"图片来源：上述知乎博客\")\n\n  <br/>\n\n  ---\n\n  # 部署Hexo到GitHub Page仓库\n  1. 使用Hexo deploy部署\n   \n```\n#需要安装扩展\nnpm install hexo-deployer-git --save\n```\n\n<br/>\n\n    \n修改_config.xml配置文件\n    \n    对应blog根目录：D:\\workSpace\\Test\\TestHexo\\blog\\_config.xml\n\n<br>\n\n    原配置文件截图:\n\n![](Snipaste_2023-04-23_10-33-56.jpg)\n\n\n\n    修改后配置文件截图：\n![](Snipaste_2023-04-23_10-35-37.jpg)\n\n执行部署命令\n\n```\nhexo d\n```\n\n<br/>\n\n2. 使用Git 命令部署\n\n<br/>\n   \n克隆当前仓库到目录\n\n```\ngit clone  xxxabc.git .deploy/xxxabc\n```\n\ndeply脚本\n> 用于Linux环境下一键部署发布Hexo到GitHub Page仓库\n\n```\nhexo generate\ncp -R public/* .deploy/xxxabc\ncd .deploy/xxxabc\ngit add .\ngit commit -m “update”\ngit push origin master\n```\n\n通过`hexo g`在public下生成新的待发布页面，通过命令`copy`到克隆下的仓库中，在通过`git`命令进行`push`到远端仓库进行发布","categories":["技术博客"]},{"title":"hexo博客新增评论系统","url":"//24291.html","content":"\n\n[butterfly主题配置-添加评论系统](https://lxh0510.github.io/2023/03/07/butterfly%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/index.html)\n\n---\n\n[valine官网](https://valine.js.org/quickstart.html)\n\n[leancloud官网](https://www.leancloud.cn/)\n\n---\n\n## 修改配置文件`_config.butterfly.yml:`\n```\ncomments:\n  # Up to two comments system, the first will be shown as default\n  # Choose: Disqus/Disqusjs/Livere/Gitalk/Valine/Waline/Utterances/Facebook Comments/Twikoo/Giscus/Remark42/Artalk\n  use: Valine\n  text: true # Display the comment name next to the button\n  # lazyload: The comment system will be load when comment element enters the browser's viewport.\n  # If you set it to true, the comment count will be invalid\n  lazyload: true\n  count: true # Display comment count in post's top_img\n  card_post_count: false # Display comment count in Home Page\n```\n\n## 添加`valine`配置文件\n```\nvaline:\n  appId: xxxx                #从leancloud官网获得\n  appKey: xxxx\t\t     #从leancloud官网获得\t\n  avatar: monsterid # gravatar style https://valine.js.org/#/avatar\n  serverURLs: # This configuration is suitable for domestic custom domain name users, overseas version will be automatically detected (no need to manually fill in)\n  bg: # valine background\n  visitor: false\n  option:\n```\n\n## 配置绑定安全api请求\n![](./hexo博客新增评论系统/image%20copy.png)\n\n## 删除评论数据\n\n![](./hexo博客新增评论系统/image.png)\n\n","categories":["技术博客"]},{"title":"Idea打包SpringBoot多模块项目以Docker镜像方式部署","url":"//63317.html","content":"\n\n\n## 文档简述\n\n1. Linux环境下安装Docker，并且开启外部访问`2375`端口\n2. Idea项目的根目录编辑`DOCKERFILE`文件\n   1. 注意： FROM 引用的镜像，linux下docker需要pull拉取该镜像\n3. Idea项目配置war打包方式改为jar方式\n4. Idea配置Docker插件，并设置远程docker的服务地址\n\n\n## Docker\n### Linux下Docker的安装\n> 参考博客：[Linux docker 环境搭建](https://blog.csdn.net/qq_38951990/article/details/120831117)\n>> 配置Docker的镜像加速此处不予赘述\n\n安装依赖\n```\nyum install -y yum-utils device-mapper-persistent-data lvm2 \n```\n\n安装Docker-CE\n```\nyum install -y docker-ce \n```\n\n启动Docker\n```\nsystemctl enable docker\nsystemctl start docker\n```\n### Docker开放外部访问端口\n\n编辑配置文件`vim /usr/lib/systemd/system/docker.service\n`\n\n在`ExecStart`新增如下配置\n```\n-H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock\n```\n![](./Idea打包SpringBoot多模块项目以Docker镜像方式部署/Snipaste_2023-05-27_15-48-01.jpg)\n\n防火墙开放2375端口\n```\nfirewall-cmd --zone=public --add-port=2375/tcp --permanent\n```\n\n重启docker\n```\nsystemctl restart docker\n```\n\n验证端口开启结果\n```\ntelnet 127.0.0.1 2375\n```\n\n\n## Idea\n\n### 安装Docker插件\n\n安装Docker插件\n![](./Idea打包SpringBoot多模块项目以Docker镜像方式部署/Snipaste_2023-05-27_15-53-49.jpg)\n\n配置Docker远程地址\n![](./Idea打包SpringBoot多模块项目以Docker镜像方式部署/Snipaste_2023-05-27_15-53-22.png)\n\n\n### 编辑DOCKERFILE文件\n```\n# 基础镜像使用Java\nFROM openjdk:8-jre-alpine\n# VOLUME 指定了临时文件目录为/tmp。\n# 其效果是在主机 /var/lib/docker 目录下创建了一个临时文件，并链接到容器的/tmp\nVOLUME /tmp\n#日志文件目录\nVOLUME /usr/local/services/logs\n# 将jar包添加到容器中并更名为app.jar\nADD module_web/target/ylf_pay.jar app.jar\nENTRYPOINT [\"java\",\"-Xmx500m\",\"-jar\",\"-Dspring.profiles.active=dev\",\"app.jar\"]\n# 指定容器需要映射到主机的端口\nEXPOSE 9090\n```\n\n> 参考博客-扫盲： [Docker EXPOSE指令详解](https://blog.csdn.net/wang7376/article/details/130449568)\n\n#### 查看docker容器下的日志\n\n进入容器的命令模式\n```\ndocker exec -it `容器id` /bin/sh\n```\n\n退出\n```\nexit\n```\n\n### 打包部署镜像\n\n#### Idea打包项目为jar包\n\n在项目对外发布web模块的build需要指定application入口类\n```\n    <build>\n        <finalName>ylf_pay</finalName>\n\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <configuration>\n                    <!--指定唯一入口类，也就是Application的位置-->\n                    <mainClass>org.jumutang.com.Application</mainClass>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-surefire-plugin</artifactId>\n                <configuration>\n                    <skip>true</skip>\n                </configuration>\n            </plugin>\n\n        </plugins>\n\n    </build>\n```\n\n![](./Idea打包SpringBoot多模块项目以Docker镜像方式部署/Snipaste_2023-05-27_15-58-28.jpg)\n\n\n#### Idea部署镜像\n\n> 需要先打包jar，在运行docker部署镜像。报错：找不到jar文件！！！\n\nIdea-Docker插件'>'启动时会默认创建容器启动（自行关闭后续通过命令指定参数启动）\n![](./Idea打包SpringBoot多模块项目以Docker镜像方式部署/Snipaste_2023-05-27_16-01-59.jpg)\n\n\n部署执行完成后，可在linux下查看到镜像文件\n![](./Idea打包SpringBoot多模块项目以Docker镜像方式部署/Snipaste_2023-05-28_08-36-45.jpg)\n\n## 部署运行\n\n### Linux下运行\nlinux下命令\n```\n docker run -d -p 8283:8283 --name ylfpay_docker ylfpay\n```\n\n> - -d 后台启动\n> - -p 暴露端口：内部端口\n> - --name 部署容器名称\n\n### 镜像打包推送远程服务\n例如：小程序云\n![](./Idea打包SpringBoot多模块项目以Docker镜像方式部署/Snipaste_2023-05-28_09-10-38.jpg)\n\n![](./Idea打包SpringBoot多模块项目以Docker镜像方式部署/Snipaste_2023-05-28_09-11-09.jpg)\n\n\n## 错误排查\n### Docker镜像启动失败查询日志\n```\ndocker logs 容器Id\n```\n![](./Idea打包SpringBoot多模块项目以Docker镜像方式部署/Snipaste_2023-05-27_16-04-51.jpg)\n\n","categories":["技术博客"],"tags":["Docker","SpringBoot","Idea"]},{"title":"Idea的Maven仓库配置","url":"//64116.html","content":"\n[maven - mirrorOf 的坑、多镜像切换（避免一切无厘头报错） ](https://www.cnblogs.com/alexgl2008/p/13949291.html)\n\n---\n\n## 问题描述\nIdea配置Repository不生效,导致项目获取不到相应依赖。\n\n![](./Idea的Maven仓库配置/Snipaste_2024-02-22_16-57-14.png)\n\n## 原因\n[maven pom中的repository节点配置没有起作用](https://blog.csdn.net/tswisdom/article/details/79892366)\n> 写`*`会覆盖掉所有的，不管是哪个repository，最后都被这个镜像所mirror掉了，导致pom文件中的repository不生效了。\n\n`mirrorOf`官方说明\n```\n* = everything\nexternal:* = everything not on the localhost and not file based.\nrepo,repo1 = repo or repo1\n*,!repo1 = everything except repo1\n```\n\n![](./Idea的Maven仓库配置/Snipaste_2024-02-22_17-00-45.png)\n\n\n# todo \n还是得下来把这个搞懂才行~\n","categories":["技术博客"],"tags":["Maven"]},{"title":"MacBookPro2017安装win11系统","url":"//54799.html","content":"\n\n>\n> 参考博客：[macOS 安装 Win11 常见问题及解决方案](https://www.bilibili.com/read/cv16325309)\n>\n> 关联文章：[Win11绕过TPM升级](/posts/30832.html)\n> \n> [Rufus工具官网](http://rufus.ie/zh/)\n\n\n## 流程简要记录\n1. mac下boot camp安装win10（最高支持win10）\n2. 使用`rufus`工具刷入Win11镜像到U盘\n3. mac开机进入win10系统，然后插入U盘升级系统\n\n## 先装win10在升级win11目的\n保留win10下的驱动，保证win11安装后系统驱动不缺失。\n\n## 踩坑记录\nmac开机option按住，选择`rufus`刷写的U盘，安装win11后，系统存在问题。\n\n系统问题\n- 无线网卡驱动缺失，有线网卡驱动正常（通过拓展坞外接网线方式）\n- 键盘驱动缺失，键盘失灵\n- 触摸板驱动缺失，触摸板失灵\n\n","categories":["技术博客"]},{"title":"Mac下安装Idea2022.03版本并激活","url":"//45478.html","content":"\n> WebStorm的`jh`方式同理\n\nIdea历史版本下载：\n```\nhttps://www.jetbrains.com/idea/download/other.html\n```\nWebstorm历史版本下载：\n```\nhttps://www.jetbrains.com/webstorm/download/other.html\n```\n\n\n\n## 打开`Finder`目录`应用程序`\n![](./Mac%E4%B8%8B%E5%AE%89%E8%A3%85Idea2022-03%E7%89%88%E6%9C%AC%E5%B9%B6%E6%BF%80%E6%B4%BB/1.png)\n\n## 右键选择`Idea`打开包内容，复制`jh`工具文件夹到此处\n![](./Mac%E4%B8%8B%E5%AE%89%E8%A3%85Idea2022-03%E7%89%88%E6%9C%AC%E5%B9%B6%E6%BF%80%E6%B4%BB/2.png)\n\n## 修改Idea的配置文件\n![](./Mac%E4%B8%8B%E5%AE%89%E8%A3%85Idea2022-03%E7%89%88%E6%9C%AC%E5%B9%B6%E6%BF%80%E6%B4%BB/3.png)\n\n## 添加如下内容\n```\n-javaagent:C:\\Program Files\\JetBrains\\jetbra\\ja-netfilter=jetbrains\n```\n![](./Mac%E4%B8%8B%E5%AE%89%E8%A3%85Idea2022-03%E7%89%88%E6%9C%AC%E5%B9%B6%E6%BF%80%E6%B4%BB/4.png)\n\n## Idea启动输入相应`jh`码\n### Idea\n```\n6G5NXCPJZB-eyJsaWNlbnNlSWQiOiI2RzVOWENQSlpCIiwibGljZW5zZWVOYW1lIjoic2lnbnVwIHNjb290ZXIiLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJQU0kiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBEQiIsImZhbGxiYWNrRGF0ZSI6IjIwMjUtMDgtMDEiLCJwYWlkVXBUbyI6IjIwMjUtMDgtMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiSUkiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJQUEMiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBHTyIsImZhbGxiYWNrRGF0ZSI6IjIwMjUtMDgtMDEiLCJwYWlkVXBUbyI6IjIwMjUtMDgtMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFNXIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQV1MiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBQUyIsImZhbGxiYWNrRGF0ZSI6IjIwMjUtMDgtMDEiLCJwYWlkVXBUbyI6IjIwMjUtMDgtMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFJCIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQQ1dNUCIsImZhbGxiYWNrRGF0ZSI6IjIwMjUtMDgtMDEiLCJwYWlkVXBUbyI6IjIwMjUtMDgtMDEiLCJleHRlbmRlZCI6dHJ1ZX1dLCJtZXRhZGF0YSI6IjAxMjAyMjA5MDJQU0FOMDAwMDA1IiwiaGFzaCI6IlRSSUFMOi0xMDc4MzkwNTY4IiwiZ3JhY2VQZXJpb2REYXlzIjo3LCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-SnRVlQQR1/9nxZ2AXsQ0seYwU5OjaiUMXrnQIIdNRvykzqQ0Q+vjXlmO7iAUwhwlsyfoMrLuvmLYwoD7fV8Mpz9Gs2gsTR8DfSHuAdvZlFENlIuFoIqyO8BneM9paD0yLxiqxy/WWuOqW6c1v9ubbfdT6z9UnzSUjPKlsjXfq9J2gcDALrv9E0RPTOZqKfnsg7PF0wNQ0/d00dy1k3zI+zJyTRpDxkCaGgijlY/LZ/wqd/kRfcbQuRzdJ/JXa3nj26rACqykKXaBH5thuvkTyySOpZwZMJVJyW7B7ro/hkFCljZug3K+bTw5VwySzJtDcQ9tDYuu0zSAeXrcv2qrOg==-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU/Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8/COMrxRlZW5mfzo0xsK0dQGNH3UoG/9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABqRoNGxAQct9dQUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE/BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5/FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB/R5oUlebwaTE6WZNBs+TA/qPj+5/we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329/WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V/0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ/c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0//lOmVya/PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0/WFPl1aw5VV/VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH/0onD\n```\n\n### WebStorm\n```\n8R927DG13X-eyJsaWNlbnNlSWQiOiI4UjkyN0RHMTNYIiwibGljZW5zZWVOYW1lIjoic2lnbnVwIHNjb290ZXIiLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJQU0kiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IldTIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUFdTIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQQ1dNUCIsImZhbGxiYWNrRGF0ZSI6IjIwMjUtMDgtMDEiLCJwYWlkVXBUbyI6IjIwMjUtMDgtMDEiLCJleHRlbmRlZCI6dHJ1ZX1dLCJtZXRhZGF0YSI6IjAxMjAyMjA5MDJQU0FOMDAwMDA1IiwiaGFzaCI6IlRSSUFMOjIwMTEzMjMwMjYiLCJncmFjZVBlcmlvZERheXMiOjcsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0=-Jev3eIT6wPDh59rzeBG67oHD8GcYHifz9+OkIePP3Qo49dGX1DqLTGJgOxSClHrshRzjOktdBYwkwpeTrDMwgeGu+cy0OhzvtQMeh7R3HrEQkhGbNBjfpbW6nq6Mhv8k6Duoiw3XiU434V5iM6DgRN3Yzo8VKxU7Kb4u/SQnPTd+PR64hYJjblVXUzGHZUX4w8RBej3T0EREccs36bfnnPC2X91K/qbvr9C0uY/feHAMpuekMks0v4qApbInpw5O+elLE3l8txlNWhWSC8m/O/S7iydf27hV5mgePM5422Rpvm4dmA2DIQcq7xxdt4X67DmVGMC2yIFiH4hfkqySWg==-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU/Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8/COMrxRlZW5mfzo0xsK0dQGNH3UoG/9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABqRoNGxAQct9dQUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE/BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5/FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB/R5oUlebwaTE6WZNBs+TA/qPj+5/we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329/WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V/0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ/c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0//lOmVya/PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0/WFPl1aw5VV/VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH/0onD\n```","categories":["技术博客"]},{"title":"Idea创建SpringBoot项目集成Mybatis","url":"//62125.html","content":"\n\n## Idea初始化构建项目\n![](./Idea创建SpringBoot项目集成Mybatis/Snipaste_2023-06-13_21-32-36.png)\n\n![](./Idea创建SpringBoot项目集成Mybatis/Snipaste_2023-06-13_21-33-54.png)\n\n## SpringBoot-yml配置文件\n\n### DataSource\n```\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://192.168.136.180:3306/demo?characterEncoding=UTF-8\n    username: root\n    password: 123456\n```\n\n### Mybatis\n```\nmybatis:\n  #对应dao接口实现xml文件目录\n  mapper-locations: classpath:/mapper/*.xml\n  #对应实体类文件目录\n  type-aliases-package: org.mu.com.demo.entity\n```\n## SpringBoot-Application类\n启动类添加`MapperScan`自动扫描集成包\n```\n@MapperScan(basePackages = \"org.mu.com.demo.dao\")\n```\n\n![](./Idea创建SpringBoot项目集成Mybatis/Snipaste_2023-06-13_21-36-34.png)\n\n\n## Mybatis-Xml文件\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n\n<!--mapper的命名空间-->\n<mapper namespace=\"org.mu.com.demo.dao.DemoMapper\">\n\n    <!--对应dao接口方法-->\n\n</mapper>\n```\n\n## 代码压缩包\n> 鼠标右键，从链接另存文件，直接点击是跳转！\n>\n> \n[demo.zip](./Idea%E5%88%9B%E5%BB%BASpringBoot%E9%A1%B9%E7%9B%AE%E9%9B%86%E6%88%90Mybatis/demo.zip)\n","categories":["技术博客"],"tags":["Idea","SpringBoot 3.0","Mybatis"]},{"title":"Idea运行eclipse项目并启动","url":"//21279.html","content":"\n\n[IDEA 导入旧（带WebRoot目录）的非MAVEN项目配置教程](https://blog.csdn.net/qq_43458533/article/details/115226961)\n\n[解决MySQL8.0报错Client does not support authentication protocol requested by server...问题](https://blog.csdn.net/qq_42372031/article/details/133639714)\n\n[修复 MySQL 8.4 的 \"mysql_native_password is not loaded\" 插件未加载错误](https://www.tubring.cn/articles/fix-php-mysql-84-mysql_native_password-not-loaded)\n\n---\n\n# Idea 导入 eclipse 项目\n\n顶部博客参考已经很详细了\n\n# 按照mysql 8.4 (win安装版本)\n\n> 查看 my.ini 文件位置，需要`cmd`->`services.msc`->`mysql服务`-> `属性`\n\nmysql 8.4 已取消`mysql_native_password`插件，需要在`my.ini`配置文件中启用\n```\nmysql_native_password=ON\n```\n\n\n","categories":["技术博客"]},{"title":"Mac下根据监听端口查询指定进程PID并关闭","url":"//10549.html","content":"\n[参考博客](https://www.ghxi.com/jc2023080802.html)\n\n\n# 查看特定端口的占用情况\n\n## 使用lsof命令\n\n查询8080端口占用情况\n```\nlsof -i :8080\n```\n\n## 使用netstat命令\n```\nnetstat -anp tcp -v | grep \n```\n\n# 终止占用端口的进程\n> 例如：pid=1234\n```\nkill 1234\n```\n","categories":["技术博客"],"tags":["Mac"]},{"title":"Centos7关闭图形化界面","url":"//46473.html","content":"\n> 参考博客：[Centos7怎么关闭图形化界面](https://jingyan.baidu.com/article/2d5afd693e2480c4a2e28ec2.html)\n\n## 永久关闭图形化界面\n\n查看当前启动模式\n```\nsystemctl get-default\n```\n\n设置多用户模式\n```\nsystemctl set-default multi-user.target\n```\n\n重启\n```\nreboot\n```\n\n## 临时关闭图形化界面\n\n命令行界面\n```\ninit 3\n```\n\n图形化界面\n```\ninit 5\n```","categories":["技术博客"]},{"title":"FastDFS与Nginx完美结合","url":"//26583.html","content":"\n\n方式一\n\n[从零开始搭建高效的文件服务器：FastDFS与Nginx完美结合，内网穿透实现公网访问](https://blog.csdn.net/m0_63951142/article/details/130590990)\n> 已完整搭建测试步骤，到nginx配置处\n\n[用FastDFS一步步搭建文件管理系统 #权限控制](https://www.cnblogs.com/chiangchou/p/fastdfs.html)\n> 参考权限控制配置\n\n---\n方式二\n\n[Nginx搭建文件服务器](https://blog.csdn.net/weixin_49511376/article/details/129461595)\n> 仅通过Nginx搭建文件服务器，不依赖FastDFS组件\n\n---\n\n\n","categories":["技术博客"]},{"title":"解决Mac每次打开终端都需要执行souce ～/.bash_profile","url":"//29337.html","content":"\n> 参考博客：[解决 Mac 每次打开终端都要执行source ~/.bash_profile](https://blog.csdn.net/Sky_QiaoBa_Sum/article/details/124429926)\n\n在 `~/.bash_profile` 中配置环境变量, 可是每次重启终端后配置的不生效.需要重新执行 : `source ~/.bash_profile`,\n后来发现zsh加载的是 `~/.zshrc`文件，而 .zshrc文件中并没有定义任务环境变量（或者此文件不存在）。\n\n### 解决方式\n在`~/.zshrc`（不存在则创建它）文件最后，增加一行：\n`source ~/.bash_profile`\n\n","categories":["技术博客"]},{"title":"Mac配置Maven环境变量","url":"//59322.html","content":"\n\n[参考博客](https://blog.csdn.net/weixin_43805744/article/details/128023702)\n\n\n# 官网下载Maven\n官网地址：https://maven.apache.org ，点击左边`Download`\n![](./Mac%E9%85%8D%E7%BD%AEMaven%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/1.png)\n![](./Mac%E9%85%8D%E7%BD%AEMaven%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/2.png)\n\n# 配置Maven环境\n```\nvim ~/.zshrc\n```\n\n添加如下代码\n```\nexport MAVEN_HOME=/Users/（Mac用户名）/Environment/apache-maven-3.8.6\nexport PATH=$MAVEN_HOME/bin:$PATH\n```\n\n退出并保存\n```\n:wq\n```\n\n刷新配置文件\n```\nsource ~/.zshrc\n```\n\n检查环境配置\n```\nmvn -v\n```\n\n# 配置Maven-阿里云源\n```\n<mirror>\n    <id>aliyunmaven</id>\n    <name>阿里云公共仓库</name>\n    <url>https://maven.aliyun.com/repository/public</url>\n    <mirrorOf>*</mirrorOf>        \n</mirror>\n```\n\n","categories":["技术博客"]},{"title":"Linux下OpenSSL1.x版本升级OpenSSL3.x版本记录","url":"//36981.html","content":"\n\n[OpenSSL官网](https://www.openssl.org/source/)\n\n[openssl-3.3.0.tar.gz](https://www.openssl.org/source/openssl-3.3.0.tar.gz)\n\n\n## 安装编译环境\n```\nyum -y install gcc gcc-c++ zlib-devel openssl-devel pam-devel perl-IPC-Cmd\n```\n\n## 安装openSSL 3.x 版本\n\n### 配置阶段\n```\nwget https://www.openssl.org/source/openssl-3.3.0.tar.gz\n```\n```\ntar -zxvf openssl-3.3.0.tar.gz\n```\n\n> 不指定 `prefix` 时，OpenSSL 会安装在以下默认路径 `/usr/local`：\n- 二进制文件：`/usr/local/bin`\n- 库文件：`/usr/local/lib`\n- 头文件：`/usr/local/include/openssl`\n- 配置文件：`/usr/local/ssl`\n\n```\ncd openssl-3.3.0 && ./config --prefix=/usr/local/openssl_3.3\n```\n\n\n配置完成\n![](./Linux下OpenSSL1-x版本升级OpenSSL3-x版本记录/Snipaste_2024-05-25_20-13-16.png)\n\n### 安装阶段\n```\nmake -j 2 \n```\n> `-j 2` 表示同时两个线程执行\n\n```\nmake install -j 2\n```\n\n### 配置阶段\n\n备份旧版本的openssl\n```\ncp -rf /usr/bin/openssl /usr/bin/openssl.bak\n```\n```\nrm -rf /usr/bin/openssl\n```\n\n创建新的符号链接指向新版本（软连接）\n```\nln -s /usr/local/openssl_3.3/bin/openssl /usr/bin/openssl\n```\n```\nln -s /usr/local/openssl_3.3/include/openssl /usr/include/openssl\n```\n\n---\n\nssh-keygen需要依赖openssl的libcrypto (报错情况：[openssl: error while loading shared libraries: libssl.so.3: cannot open shared object file: No such](https://blog.csdn.net/x_xx_xxx_xxxx/article/details/89645493))\n\n\n```\nln -snf /usr/local/openssl_3.3/lib64/libssl.so.3 /usr/lib/libssl.so.3\n```\n```\nln -snf /usr/local/openssl_3.3/lib64/libcrypto.so.3 /usr/lib/libcrypto.so.3\n```\n\n更新动态链接库路径\n```\necho \"/usr/local/openssl_3.3/lib/\" >> /etc/ld.so.conf\n```\n```\nldconfig\n```\n\n更改环境变量\n```\necho 'export PATH=/usr/local/openssl_3.3/bin:$PATH' >> /etc/profile\n```\n```\necho 'export LD_LIBRARY_PATH=/usr/local/openssl_3.3/lib64:$LD_LIBRARY_PATH' >> /etc/profile\n```\n```\nsource /etc/profile\n```\n\n### 验证阶段\n```\nopenssl version\n```\n\n![](./Linux下OpenSSL1-x版本升级OpenSSL3-x版本记录/Snipaste_2024-05-25_20-34-17.png)\n\n## 问题记录\n### 编译`./config`报错\n[编译OpenSSL时报错，Can‘t locate IPC/Cmd.pm in @INC](https://blog.csdn.net/sd4493091/article/details/122220902)\n\n![](./Linux下OpenSSL1-x版本升级OpenSSL3-x版本记录/Snipaste_2024-05-25_20-11-28.png)\n\n```\nyum -y install perl-IPC-Cmd\n```\n\n### 刷新动态库报错\n\n执行命令`ldconfig`报错\n\n![](./Linux下OpenSSL1-x版本升级OpenSSL3-x版本记录/Snipaste_2024-05-26_09-39-07.png)\n\n\n[解决方案](https://blog.csdn.net/liukun321/article/details/6908635)\n```\nmv /usr/lib64/libLLVM-7.so /usr/lib64/libLLVM-7\n```\n```\nln -sf /usr/lib64/libLLVM-7.so /usr/lib64/libLLVM-7\n```\n![](./Linux下OpenSSL1-x版本升级OpenSSL3-x版本记录/Snipaste_2024-05-26_09-48-35.png)\n","categories":["技术博客"]},{"title":"vscode(mac)解决Ctrl+C退出终端时不可用问题","url":"//9763.html","content":"\n[参考博客](https://article.juejin.cn/post/7248798768307552311)\n\n![](./vscode-mac-%E8%A7%A3%E5%86%B3Ctrl-C%E9%80%80%E5%87%BA%E7%BB%88%E7%AB%AF%E6%97%B6%E4%B8%8D%E5%8F%AF%E7%94%A8%E9%97%AE%E9%A2%98/1.png)\n\n\n# 官网1.77版本下载地址\n[vscode 1.77](https://code.visualstudio.com/updates/v1_77)\n\n![](./vscode-mac-%E8%A7%A3%E5%86%B3Ctrl-C%E9%80%80%E5%87%BA%E7%BB%88%E7%AB%AF%E6%97%B6%E4%B8%8D%E5%8F%AF%E7%94%A8%E9%97%AE%E9%A2%98/2.png)\n\n\n# 注意：关闭自动升级\n![](./vscode-mac-%E8%A7%A3%E5%86%B3Ctrl-C%E9%80%80%E5%87%BA%E7%BB%88%E7%AB%AF%E6%97%B6%E4%B8%8D%E5%8F%AF%E7%94%A8%E9%97%AE%E9%A2%98/3.png)\n\n\n\n\n\n","categories":["技术博客"],"tags":["Mac","Vscode"]},{"title":"Linux下OpenSSH升级9.x版本记录","url":"//25890.html","content":"\n## 前言\n\n- 已验证系统版本\n- - centos6.x\n- - centos7.x\n- - 麒麟系统，可能出现sshd重启卡死情况，但实际是启动的。\n\n## 安装 Telnet 服务和 xinetd\n防止openSSH升级失败，导致无法连接服务器\n\n ### 关闭防火墙\n\n`sh`脚本命令: 判断启用的防火墙，并尝试关闭防火墙。\n\nfirewalld\n```\nservice firewalld stop\n```\n\niptables\n``` \nservice iptables stop\n```\n\n### 安装 Telnet 服务和 xinetd\n```\nyum install -y telnet-server xinetd\n```\n\n配置服务\n```\ncat <<EOL > /etc/xinetd.d/telnet\nservice telnet\n{\n    flags           = REUSE\n    socket_type     = stream\n    wait            = no\n    user            = root\n    server          = /usr/sbin/in.telnetd\n    log_on_failure  += USERID\n    disable         = no\n}\nEOL\n```\n\n### 启动并设为开机自启\n> 根据情况选择其一\n \n\nsystemctl命令方式\n```\nsystemctl start xinetd\n```\n```\nsystemctl enable xinetd\n```\n\n常规命令执行方式\n```\nservice xinetd start\n```\n```\nchkconfig xinetd on\n```\n\n#### 卸载关闭 xinetd\n\n执行升级openSSH成功后，可以卸载关闭`xinetd`服务\n\ncentos6\n```\nservice xinetd stop\nchkconfig xinetd off\nyum remove -y telnet-server xinetd\n``` \n\ncentos7\n```\nsystemctl stop xinetd\nsystemctl disable xinetd\nyum remove -y telnet-server xinetd\n```\n\n\n## 升级安装OpenSSH\n\n[openssh官网](http://www.openssh.com/)\n\n[openssh-9.7p1.tar.gz](https://cdn.openbsd.org/pub/OpenBSD/OpenSSH/portable/openssh-9.7p1.tar.gz)\n\n### 安装依赖环境\n```\nyum -y install gcc gcc-c++ zlib-devel openssl-devel pam-devel perl-IPC-Cmd\n```\n\n```\nwget https://cdn.openbsd.org/pub/OpenBSD/OpenSSH/portable/openssh-9.7p1.tar.gz\n```\n\n```\ntar -zxvf openssh-9.7p1.tar.gz\n```\n\n---\n\n### 配置环境\n\n```\ncd openssh-9.7p1/ && ./configure --prefix=/usr/local/openssh --sysconfdir=/etc/ssh --with-ssl-dir=/usr/local/openssl_3.3 --with-zlib --with-pam\n```\n- --prefix=/usr/local/openssh 指定 OpenSSH 的安装路径\n- --sysconfdir=/etc/ssh 指定 SSH 配置文件路径\n- --with-ssl-dir=/usr/local/openssl 指定 OpenSSL 库路径\n- --with-zlib 启用 zlib 压缩支持\n- --with-pam 启用 PAM 认证支持\n\n```\nmake -j 2\n```\n```\nmake install -j 2 \n```\n\n### 备份旧版本并创建符号链接\n\n备份旧版本\n```\ncp -rf  /usr/bin/ssh /usr/bin/ssh.bak\n```\n```\ncp -rf  /usr/sbin/sshd /usr/sbin/sshd.bak\n```\n```\nrm -rf  /usr/bin/ssh\n```\n```\nrm -rf  /usr/sbin/sshd\n```\n```\ncp -rf /etc/ssh/sshd_config /etc/ssh/sshd_config.bak\n```\n---\n\n创建软链接\n\n```\nln -s /usr/local/openssh/bin/ssh /usr/bin/ssh\n```\n```\nln -s /usr/local/openssh/sbin/sshd /usr/sbin/sshd\n```\n\n### 更新配置文件和库路径\n\n更新库路径\n```\necho \"/usr/local/openssh/lib\" | tee -a /etc/ld.so.conf\n```\n```\nldconfig\n```\n\n更新环境变量\n```\necho 'export PATH=/usr/local/openssh/bin:$PATH' | tee -a /etc/profile\n```\n```\nsource /etc/profile\n```\n\n### 验证 sshd_config 文件\n对比配置文件(可选)\n```\ndiff /etc/ssh/sshd_config /etc/ssh/sshd_config.bak\n```\n\n恢复配置文件(可选)\n```\ncp /etc/ssh/sshd_config.bak /etc/ssh/sshd_config\n```\n\n### 重启 SSH 服务并验证\n\n重启\n```\nsystemctl restart sshd\n```\n或\n```\nservice sshd restart\n```\n---\n验证\n```\nssh -V\n```\n\n## 问题记录\n\n### 启动失败\n \n![](./Linux下OpenSSH升级9-x版本记录/Snipaste_2024-05-25_21-33-10.png)\n\n /etc/ssh/ssh_host_ed25519_key 文件的权限设置过于宽松。SSH 主机密钥文件需要更严格的权限，以确保其安全性。具体来说，只有 root 用户应该拥有读取和写入权限，其他用户不应有任何权限。\n\n #### 修复文件权限\n ```\nchmod 600 /etc/ssh/ssh_host_rsa_key /etc/ssh/ssh_host_ecdsa_key /etc/ssh/ssh_host_ed25519_key\n ```\n\n #### 验证文件权限\n ```\n ls -l /etc/ssh/ssh_host_*\n ```\n\n ![](./Linux下OpenSSH升级9-x版本记录/Snipaste_2024-05-25_21-36-40.png)\n\n ![](./Linux下OpenSSH升级9-x版本记录/Snipaste_2024-05-25_21-38-07.png)\n\n ### 配置不支持\n![](./Linux下OpenSSH升级9-x版本记录/Snipaste_2024-05-25_21-40-23.png)\n\n```\nsed -i 's/^GSSAPIAuthentication/#&/' /etc/ssh/sshd_config && sed -i 's/^GSSAPICleanupCredentials/#&/' /etc/ssh/sshd_config && sed -i 's/^UsePAM/#&/' /etc/ssh/sshd_config\n```\n\n允许root用户登录服务器(可选)\n```\n#sed -i 's/#PermitRootLogin yes/PermitRootLogin yes/g' /etc/ssh/sshd_config \n```\n### 无法正常重启\n\n问题描述：\n> 执行命令 systemctl restart sshd会卡住，然后ctrl c，在执行 systemctl status sshd，发现已启动\n\n\n查看sshd日志\n```\njournalctl -u sshd\n```\n![](./Linux下OpenSSH升级9-x版本记录/Snipaste_2024-05-25_22-03-30.png)\n\n[编译升级最新OpenSSH_8.4p1, 替换sshd.service,解决启动卡死的问题](https://blog.csdn.net/tmaccs/article/details/111230780)\n\n#### 解决步骤\n\n##### 安装依赖包\n\ncentos\n```\nyum install systemd-devel -y\n```\nubuntu\n```\napt-get install libsystemd-dev\n```\n\n#### 修改源码\n1. 在源码目录下，找到`sshd.c`\n\n2. 在开头添加引用\n```\n#include <systemd/sd-daemon.h>\n```\n\n3. 在函数`server_accept_loop`(第二处位置)前添加代码：`sd_notify(0, \"READY=1\")`\n```\n/* Signal systemd that we are ready to accept connections */\nsd_notify(0, \"READY=1\");\n\n/* Accept a connection and return in a forked child */\nserver_accept_loop(&sock_in, &sock_out,&newsock, config_s);\n}\n```\n\n#### 修改编译文件`Makefile `\n\n> 需要先`./configure ...`才会生成`Makefile`文件\n\n找到变量`LIBS`，修改如下：\n```\nLIBS=-lcrypto -ldl -lutil -lz -lcrypt -lresolv -lsystemd\n```\n\n```\nmake \n```\n\n```\nmake install\n```\n\n","categories":["技术博客"]},{"title":"Linux下history命令添加时间戳","url":"//10429.html","content":"\n[linux历史命令history 增加时间记录](https://blog.csdn.net/zhangh571354026/article/details/132160001)\n\n\n编辑环境变量文件\n```\nvi ~/.bashrc\n```\n\n添加配置\n```\nexport HISTTIMEFORMAT=' %F %T '\n```\n\n刷新环境变量\n```\nsource ~/.bashrc\n```\n\n","categories":["技术博客"]},{"title":"Linux下mkdir命令使用","url":"//45857.html","content":"\n> 参考博客：[Linux技巧(三)： seq命令 / mkdir -p 批量创建/删除文件夹 详解](https://blog.csdn.net/succing/article/details/122286002)\n\n\n## 一次性级联创建多级+平级目录\n> 注：目录下有子目录，则各目录层级需用大括号括起来，中间用/分隔\n```\nmkdir -p src/{{main,test}/{java,resources},main/webapp}\n```\n\n![](./Linux下mkdir命令使用/Snipaste_2023-06-07_06-44-29.png)\n\n## 一次创建多个平级目录，下面都分别创建同一个文件夹\n```\nmkdir -p Project/{a,b,c,d}/src\n```\n![](./Linux下mkdir命令使用/Snipaste_2023-06-07_06-47-23.png)\n\n### 查看目录树形结构`tree`\n```\nyum install -y tree;\n```","categories":["技术博客"],"tags":["Linux","mkdir命令"]},{"title":"Linux下crontab定时脚本配置","url":"//54243.html","content":"\n[crontab中如何实现每隔多少天执行一次脚本](https://cloud.tencent.com/developer/article/1453912)\n\n\n脚本`sh`文件\n```\n#!/bin/bash\n#crontab -e: `00 01 * * 5 . /etc/profile;/bin/sh /usr/local/nginx/logs/clean.sh >> /usr/local/nginx/logs/cleanLogFile.log 2>&1`\n\ntime=`date \"+%Y-%m-%d %H:%M:%S\"`\necho 开始执行clean.sh脚本时间: $time\n\n#清空日志文件\n> /usr/local/nginx/logs/xxxFile.log\n\ntime=`date \"+%Y-%m-%d %H:%M:%S\"`\necho 结束执行clean.sh脚本时间: $time\necho -e \"\\n\"\n```\n\n定时`crontab`配置\n> 每周五凌晨1点执行定时任务\n```\n00 01 * * 5 . /etc/profile;/bin/sh /usr/local/nginx/logs/clean.sh >> /usr/local/nginx/logs/cleanLogFile.log 2>&1\n```\n\n\n\n","categories":["技术博客"]},{"title":"Linux下新磁盘挂载扩容","url":"//50034.html","content":"\n\n# 挂载新硬盘至新分区\n\n[linux挂载硬盘步骤（简单易用，直接上手，无废话）](https://blog.csdn.net/bill_wjn/article/details/106013425)\n\n---\n\n## 查看磁盘挂载情况\n```\nfdisk -l\n```\n\n![](./Linux下新磁盘挂载扩容/image.png)\n\n## 新硬盘分区\n```\nfdisk /dev/vdb\n```\n> 图片资源引用博客内容\n![](./Linux下新磁盘挂载扩容/20200509103142218.png)\n\n\n## 格式化硬盘文件类型\n\n\n给硬盘进行格式化\n```\nmkfs.xfs /dev/vdb1\n```\n\n## 挂载磁盘\n\n创建新目录\n```\nmkdir -p /usr/local/services\n```\n\n将新分区 `/dev/vdb1` 挂载到目录下\n```\nmount /dev/vdb1 /usr/local/services\n```\n\n查看挂载情况\n```\nmount\n```\n\n![](./Linux下新磁盘挂载扩容/image%20copy%204.png)\n\n## 设置自动挂载\n\n获取需要挂载磁盘`UUID`\n```\nblkid\n```\n![](./Linux下新磁盘挂载扩容/image%20copy.png)\n\n修改`/etc/fstab`文件\n```\nvim /etc/fstab\n```\n![](./Linux下新磁盘挂载扩容/image%20copy%202.png)\n\n重启\n```\nreboot\n```\n\n查看磁盘信息\n```\ndf -Th\n```\n![](./Linux下新磁盘挂载扩容/image%20copy%203.png)\n\n\n\n# 挂载新硬盘至新分区（LVM卷组方式）\n\n\n[Linux系统系统盘扩容，亲测可用](https://blog.csdn.net/Honnyee/article/details/111150101)\n\n[【解决】linux磁盘扩容大全：新增磁盘、原磁盘扩容、home分区root分区扩容](https://blog.csdn.net/yy4545/article/details/125873011)\n\n---\n\n### 注意使用`pvdisplay`或`lvdisplay`查看有无卷组信息，当前博客是基于卷组扩容磁盘！！！ \n\n\n---\n\n博客基于`#1` `挂载新硬盘至新分区`，在指定分区扩容则需如下步骤：\n\n1. 移除原挂载磁盘信息：\n```\numount /dev/vdb1\n```\n\n2. 注释代码配置文件中内容项：\n```\nvim /etc/fstab\n```\n\n---\n\n## 查看磁盘分区\n```\nfdisk -l\n```\n![](./Linux下新磁盘挂载扩容/image%20copy%205.png)\n\n> 当前博客内容基于#1配置，所以需要删除原`/dev/vdb`已分区信息\n> ![](./Linux下新磁盘挂载扩容/image%20copy%206.png)\n\n## 创建新分区\n```\nfdisk /dev/vdb\n```\n\n输入：\n```\nm #菜单menu选项提示\nn #创建新分区\np #主分区\np #打印分区信息\nt #变更分区类型\n8e # 8e 对应 Linux LVM\np #打印分区信息(已变更类型)\nw #保存退出\n```\n\n强制让内核重新查找分区表，否则操作需要重启才能生效\n```\npartprobe\n```\n\n## 新添加硬盘支持`LVM`技术\n\n创建物理卷\n```\npvcreate /dev/vdb1\n```\n> pvs  查看pv信息\n\n> 若命令`pvcreate`不存在\n> 则需要执行`yum -y install lvm2`安装\n\n![](./Linux下新磁盘挂载扩容/image%20copy%207.png)\n\n创建卷组vg1\n```\nvgcreate vg1 /dev/vdb1\n```\n> vgs 查看vg信息\n\n把vg1剩余容量做成逻辑卷lv1\n```\nlvcreate -n lv1 -l 100%FREE vg1\n```\n> lvs   查看lv信息\n\n## 逻辑卷制作文件系统\n```\nfdisk -l\n```\n![](./Linux下新磁盘挂载扩容/image%20copy%208.png)\n \n```\nmkfs.xfs /dev/mapper/vg1-lv1\n```\n\n```\nblkid /dev/mapper/vg1-lv1\n```\n\n![](./Linux下新磁盘挂载扩容/image%20copy%2010.png)\n\n## 临时挂载\n![](./Linux下新磁盘挂载扩容/image%20copy%209.png)\n\n## 系统重启自动挂载\n修改`/etc/fstab`文件\n```\nUUID=a682900a-8be9-4f9f-bda9-73c7235ec20f /usr/local/services     xfs     defaults        0 0\n```\n\n## 重启验证挂载是否成功\n```\nreboot\n```\n\n此种方式挂载磁盘的优点是，后续需要挂载新硬盘分区就特别容易实现，且方便管理。\n\n# 扩容根分区（非LVM卷组方式）\n\n[Linux 扩容 / 根分区(LVM+非LVM)](https://zhuanlan.zhihu.com/p/83340525)\n\n> 关注博客：`三、CentOS7，非LVM根分区扩容步骤`","categories":["技术博客"]},{"title":"Linux下自签名SSL证书","url":"//702.html","content":"\n[IP地址自签名证书](https://www.cnblogs.com/dirigent/p/15246731.html)\n\n\n## 创建CA (证书认证机构)\n\n创建私钥\n```\nopenssl genrsa -out ca.key 2048\n```\n- `genrsa` 表示生成一个RSA私钥\n- `-out ca.key` 指定生成的私钥文件名为 ca.key，并将其输出到当前目录\n- `2048` RSA密钥的长度为2048位\n\n创建公钥\n```\nopenssl req -new -x509 -days 208 -key ca.key -out ca.crt\n```\n- `req` 表示操作与证书签名请求（CSR）相关的部分\n- `-new` 生成一个新的证书签名请求（CSR）\n- `-x509` 生成一个自签名证书，而不是一个证书签名请求（CSR）\n- `-days 208` 证书的有效期为208天\n- `-key ca.key` 使用之前生成的私钥文件 ca.key\n- `-out ca.crt` 指定输出的证书文件名为 ca.crt\n\n## 配置文件\nopenssl.cnf\n>  OpenSSL 配置文件，用于生成证书签名请求（Certificate Signing Request，CSR）\n```\n[req]\n# 指定请求中所用的主体部分名称配置段\ndistinguished_name = req_distinguished_name\n# 在请求中使用的扩展配置段\nreq_extensions = v3_req\n\n[req_distinguished_name]\n# 国家名称字段（2个字母的代码）\ncountryName = Country Name (2 letter code)\n# 国家名称字段的默认值为美国\ncountryName_default = US\n# 州或省名称字段（全名）\nstateOrProvinceName = State or Province Name (full name)\n# 州或省名称字段的默认值为纽约州\nstateOrProvinceName_default = NY\n# 城市名称字段\nlocalityName = Locality Name (eg, city)\n# 城市名称字段的默认值为纽约市\nlocalityName_default = NYC\n# 组织单位名称字段\norganizationalUnitName  = Organizational Unit Name (eg, section)\n# 组织单位名称字段的默认值为 'xxx'\norganizationalUnitName_default  = xxx\n# 常用名称字段\ncommonName = xxx\n# 常用名称字段的最大长度为64个字符\ncommonName_max  = 64\n\n[ v3_req ]\n# 表示这是一个CA证书，可以用来签发其他证书\nbasicConstraints = CA:TRUE\n# 定义密钥的用途，包括不可否认性、数字签名和密钥加密。\nkeyUsage = nonRepudiation, digitalSignature, keyEncipherment\n# 指定备用名称字段（例如IP地址），并引用 alt_names 段\nsubjectAltName = @alt_names\n\n[alt_names]\n# 备用IP地址1，值为192.168.0.10\nIP.1 = 192.168.0.10\n# 备用IP地址2，值为x.x.x.x（需要替换为实际IP地址）\nIP.2 = x.x.x.x\n```\n\n\nv3.ext\n>  OpenSSL 配置文件的一部分，用于定义证书扩展\n```\n# 标识颁发该证书的CA的密钥\n## `keyid`:使用CA密钥的标识符\n## `issuer`:使用颁发者的名称和序列号\nauthorityKeyIdentifier=keyid,issuer\n\n# 定义证书的基本约束：这是一个终端用户证书，而不是CA证书，不能用来签发其他证书\nbasicConstraints=CA:FALSE\n\n# 定义证书密钥的用途\n## `digitalSignature`:用于验证数字签名\n## `nonRepudiation`:确保签名者无法否认已签名的数据\n## `keyEncipherment`:用于加密密钥数据\n## `dataEncipherment`:用于加密数据\nkeyUsage=digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment\n\n# 定义主题备用名称字段，包含备用名称的信息\n## `@alt_names`:引用配置文件中名为 alt_names 的段落\nsubjectAltName=@alt_names\n\n[alt_names]\n# 备用IP地址1，值为192.168.0.10\nIP.1 = 192.168.0.10\n# 备用IP地址2，值为x.x.x.x（需要替换为实际IP地址）\nIP.2 = x.x.x.x\n```\n\n## 生成签服务器证书\n\n私钥\n```\nopenssl genrsa -out server.key 2048\n```\n\n公钥\n\n```\n openssl req -new -days 208 -key server.key -out server.csr -config openssl.cnf\n```\n\nCA服务器签名\n> 使用CA证书和私钥签署一个证书签名请求（CSR），生成一个新的证书\n```\nopenssl x509 -days 208 -req -sha256 -extfile v3.ext -CA ca.crt -CAkey ca.key -CAcreateserial -in server.csr -out server.crt\n```\n\n- `-sha256` 使用SHA-256哈希算法签名证书\n- `-extfile v3.ext` 指定包含扩展配置的文件 v3.ext\n- `--CAcreateserial` 生成并保存一个新的CA序列号文件\n- `-in server.csr` 指定要签署的证书签名请求（CSR）文件 server.csr\n- `-out server.crt` 指定输出的签署后的证书文件名为 server.crt\n- `-CA ca.crt`  使用CA证书 ca.crt 进行签名\n- `-CAkey ca.key` 使用CA私钥 ca.key 进行签名\n\n\n## 部署nginx\n```\nserver {\n    listen 443 ssl default_server;\n    ssl_certificate /etc/nginx/ssl/server.crt;\n    ssl_certificate_key /etc/nginx/ssl/server.key;\n\n    location / {\n        proxy_redirect off;\n        proxy_pass http://127.0.0.1:8080;\n        proxy_set_header Host $http_host;\n    }\n}\n```\n\n![](./Linux下自签名SSL证书/微信图片_20240604104721.png)\n\n![](./Linux下自签名SSL证书/Snipaste_2024-06-04_10-47-34.png)","categories":["技术博客"]},{"title":"Linux下安装JDK环境","url":"//59283.html","content":"\n## JDK安装\n\n### JDK1.8\n\n解压到目录\n```\ntar -zxvf jdk-8u151-linux-x64.tar.gz\n```\n\nJDK环境变量\n```\nexport JAVA_HOME=/opt/jdk/jdk1.8.0_151\nexport JRE_HOME=/opt/jdk/jdk1.8.0_151/jre\nexport CLASS_PATH=.:$JAVA_HOME/lib:$JRE_HOME/lib\nexport PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin\n```\n\n\n\n### JDK11\n> 参考博客：[卸载openJDK](https://blog.csdn.net/luChenH/article/details/106940652)\n>\n> 参考博客：[Linux安装JDK11](https://blog.csdn.net/weixin_50093343/article/details/109442668)\n\n\n配置文件`/etc/profile`\n```\nJAVA_HOME=/opt/jdk/jdk_11\nCLASSPATH=.:$JAVA_HOME/lib.tools.jar\nPATH=$JAVA_HOME/bin:$PATH\nexport JAVA_HOME CLASSPATH PATH\n```\n\n### 补充JDK11的jre目录生成\n\n[Linux 下，jdk11 没有 jre 解决办法](https://blog.csdn.net/Hcy_code/article/details/123207737)\n\n> cd 到 jdk11 的根目录下，输入命令：\n```\n./bin/jlink --module-path jmods --add-modules java.desktop --output jre\n```\n\n## 验证JAVA环境安装\n\n刷新配置\n```\nsource /etc/profile\n```\n\n测试输出\n```\njava -version\n```","categories":["技术博客"],"tags":["Linux","JDK"]},{"title":"Linux下还原阿里云rds数据到自建数据库","url":"//21580.html","content":"\n\n## vm虚拟机下`/home`分区空间还原`/root`\n\n[linux(centos7) home目录磁盘空间转移到root下](https://blog.csdn.net/qq_36975640/article/details/116212447)\n\n查看分区\n![](./Linux下还原阿里云rds数据到自建数据库/Snipaste_2024-06-24_15-12-42.png)\n```\ndf -h\n```\n\n备份分区\n> 按实际需要情况进行\n```\ntar cvf /tmp/home.tar /home\n```\n停止分区\n\n```\nyum install psmisc -y\n```\n\n> 执行当前命令后ssh控制台可能出现闪断，重连即可！\n```\nfuser -km /home/\n```\n\n---\n\n> 备注：截图命令缺失`xfs_growfs /dev/mapper/centos-root`\n\n![](./Linux下还原阿里云rds数据到自建数据库/Snipaste_2024-06-24_15-14-46.png)\n\n卸载分区\n```\numount /home\n```\n\n删除分区所在的lv(逻辑卷)\n> (centos-home和centos-root 系统可能不一样)\n```\nlvremove /dev/mapper/centos-home\n```\n\n扩展`/root`所在的lv\n```\nlvextend -L +100G /dev/mapper/centos-root\n```\n\n扩展`/root`文件系统\n```\nxfs_growfs /dev/mapper/centos-root\n```\n\n进行检查\n```\ndf -Th\n```\n\n### 若需要还原`/home`目录分区\n\n还原`/home`分区，我没有实际执行命令,以下内容来源自参考博客。\n\n---\n\n重新创建`/home`的lv\n> 创建时计算好剩余的磁盘容量，建议比剩余小1G左右\n```\nlvcreate -L 10G -n /dev/mapper/centos-home\n```\n\n创建文件系统\n```\nyum -y install xfsprogs -y\n```\n```\nmkfs.xfs /dev/mapper/centos-home\n```\n\n挂载系统\n```\nmount /dev/mapper/centos-home\n```\n\nhome文件恢复\n```\ntar xvf /tmp/home.tar -C /home/\n```\n\n完成可进行检查\n```\ndf -Th\n```\n\n\n## 阿里云RDS恢复自建数据库\n\n[RDS MySQL物理备份用XtraBackup恢复到自建数据库\\_云数据库 RDS(RDS)-阿里云帮助中心](https://help.aliyun.com/zh/rds/apsaradb-rds-for-mysql/restore-the-data-of-an-apsaradb-rds-for-mysql-instance-from-a-physical-backup-file-to-a-self-managed-mysql-database?spm=5176.19908310.help.dexternal.575a1450yWHqmm)\n\n### 准备工作\n备份解压路径\n> 上述命令的$USER:$USER表示从环境变量中获取当前用户及用户组，无需修改\n```\nsudo mkdir /var/mysql_bkdata\nsudo chown -R $USER:$USER /var/mysql_bkdata\n```\n\n创建数据库数据目录\n```\nsudo mkdir /var/mysql_newdata\nsudo chown -R $USER:$USER /var/mysql_newdata\n```\n\n\n### 安装工具\n\n安装备份恢复工具Percona XtraBackup\n> MySQL 5.7、5.6或5.5实例，下载并安装Percona XtraBackup 2.4\n```\nwget https://downloads.percona.com/downloads/Percona-XtraBackup-2.4/Percona-XtraBackup-2.4.28/binary/redhat/7/x86_64/percona-xtrabackup-24-2.4.28-1.el7.x86_64.rpm\n```\n```\nyum localinstall -y percona-xtrabackup-24-2.4.28-1.el7.x86_64.rpm\n```\n\n安装解压工具qpress\n```\n## 下载可执行文件的tar包\nwget \"https://help-static-aliyun-doc.aliyuncs.com/file-manage-files/zh-CN/20230406/flxd/qpress-11-linux-x64.tar\"\n\n## 解压下载的tar包，取出可执行文件\ntar -xvf qpress-11-linux-x64.tar\n\n## 设置qpress文件的执行权限\nsudo chmod 775 qpress\n\n## 拷贝qpress到/usr/bin中\nsudo cp qpress /usr/bin\n```\n\n### 下载备份文件\n![](./Linux下还原阿里云rds数据到自建数据库/Snipaste_2024-06-24_16-01-54.png)\n\n> 题主已下载rds的物理备份文件到本地\n\n> 下载压缩文件格式：`tar.gz`\n```\ntar -izxvf /root/hins20149963_data_20240619085620.tar.gz -C /var/mysql_bkdata/\n```\n\n### 恢复备份文件到自建数据库\n\n> 恢复数据库前，请先停止自建数据库服务\n\n\n> 在关闭自建redis实例后，需要执行`ps -ef | grep mysql`检查下，是否`mysql_safe`进程存活，存在则`kill -9 pid`，否则上述启动进程无效！\n\n![](./Linux下还原阿里云rds数据到自建数据库/Snipaste_2024-06-24_16-15-55.png)\n\n```\ninnobackupex --defaults-file=/var/mysql_bkdata/backup-my.cnf --apply-log /var/mysql_bkdata/\n```\n\n修改自建数据库的数据目录（datadir）\n```\nvim /etc/my.cnf\n```\n\n修改datadir参数\n```\ndatadir=/var/mysql_newdata\n```\n\n恢复数据\n\n![](./Linux下还原阿里云rds数据到自建数据库/Snipaste_2024-06-24_16-34-25.png)\n> [XtraBackup工具详解 Part 6 使用innobackupex对全备进行恢复](https://cloud.tencent.com/developer/article/1681351)\n\n\n~~sudo innobackupex --defaults-file=/etc/my.cnf --copy-back /var/mysql_bkdata/~~\n\n> 由于题主虚拟机磁盘空间不足够大，命令做调整`--move-back`，使用`move`命令后文件会移动，旧目录依然存在。\n```\nsudo innobackupex --defaults-file=/etc/my.cnf --move-back /var/mysql_bkdata/\n```\n\n启动数据库\n\n> （可选）查看当前rds的实例参数`lower_case_table_names`等于`1`，则需要进行如下步骤\n\n![](./Linux下还原阿里云rds数据到自建数据库/Snipaste_2024-06-24_16-24-02.png)\n\n```\nvim /etc/my.cnf\n```\n```\nlower_case_table_names=1\n```\n\n数据目录授权\n```\nchown -R mysql:mysql /var/mysql_newdata\n```\n启动mysql进程\n```\nmysqld --defaults-file=/etc/my.cnf --user=mysql --datadir=/var/mysql_newdata &\n```\n\n\n#### 重置root密码（可选）\n\n> 题主这里是懒的去找之前阿里云rds已建用户账户信息，选择直接重置root密码\n\n---\n\n```\nvim /etc/my.cnf\n```\n\n添加如下配置\n```\nskip-grant-tables\n```\n\n重启mysql服务\n```\nservice mysql restart;\n```\n\n登录mysql（回车进入）\n```\nmysql -uroot -p\n```\n\n由于恢复的mysql数据库用户`root`无`localhost`记录，于是将host为`127.0.0.1`的用户记录修改`%`任意ip可登录\n```\nupdate user set host ='%' where user='root' and host = '127.0.0.1';\n\nflush privileges;\n```\n\n将`/etc/my.cnf`配置文件还原\n```\n#skip-grant-tables\n```\n\n重启mysql服务\n```\nservice mysql restart;\n```\n\n---\n\n> `skip-grant-tables` 模式下，无法创建新用户,此步骤可跳过！\n\n创建用户并授权命令\n```\nCREATE USER 'root'@'%' IDENTIFIED BY '123456';\n```\n```\ngrant all privileges on *.* to 'root'@'%' identified by '123456';\n```\n```\ngrant all privileges on *.* to 'root'@'%' identified by '123456';\n```","categories":["技术博客"]},{"title":"Linux中VIM使用技巧","url":"//9930.html","content":"\n## VIM命令行模式跳转首位/末尾\n> [vim命令行模式跳至行首/行尾](https://blog.csdn.net/m0_38068876/article/details/115393229)\n\n跳转首位\n```\n$ 或者 0\n```\n跳转末尾\n```\nA\n```\n","categories":["技术博客"]},{"title":"Linux系统修改主机名hostName","url":"//24783.html","content":"\n\n\n\n \n\n\n## 临时修改主机名（重启后失效）\n### 命令修改主机名\n```\nhostname newhostname\n```\n### 修改主机名报错\n\n> 错误信息：hostname： the specified hostname is invalid\n> \n![](./Linux系统修改主机名hostName/Snipaste_2023-05-12_12-35-53.jpg)\n\n#### 解决方式\n```\nhostnamectl set-hostname newhostname\n```\n\n## 永久修改主机名（重启后生效）\n### 修改配置文件 <font color='red'>/etc/sysconfig/network</font>\n\n```\n#修改/增加hostname主机名\nhostname=newhostname\n```\n\n### 修改配置文件 <font color='red'>/etc/hosts</font>\n\n> 一般是不用修改hosts文件，可见原博客详解。\n\n```\n#添加对应主机名的ip地址\n127.0.0.1 newhostname\n```\n\n## 参考博客\n> [Linux下如何永久修改主机名](https://blog.csdn.net/qq_39629343/article/details/80253121)\n>\n> [在Linux系统中使用hostname命令修改主机名报错“the specified hostname is invalid“](https://blog.csdn.net/cnds123321/article/details/123673882)\n\n","categories":["技术博客"]},{"title":"Linux下设置防火墙拦截其他IP对SSH端口访问","url":"//32797.html","content":"\n[linux firewalld 查看防火墙规则](https://blog.csdn.net/weixin_43951230/article/details/103492462)\n\n[CentOS7使用firewall-cmd打开关闭防火墙与端口 以开放8080端口为例](https://blog.csdn.net/qq754772661/article/details/115233110)\n\n[CENTOS7中FIREWALL防火墙](https://www.cnblogs.com/faithH/p/11811286.html)\n\n---\n\n## IpTables\n> 基于Centos6 及以下版本\n\n### 允许特定IP访问SSH端口\n\n> **-I:表示在头部（大写的i）**, \n**-A:表示追加到底部**\n\n\n```\n/sbin/iptables -A INPUT -p tcp --dport 22 -s 192.168.1.100/32 -j ACCEPT\n```\n\n拒绝其他IP访问SSH端口\n> 危险：将导致拒绝所有其他ip地址访问22端口（已中招！！呆逼...自述）\n\n~~/sbin/iptables -A INPUT -p tcp --dport 22 -j DROP~~\n\n\n \n\n### 查看验证\n```\nservice iptables save && service iptables restart \n```\n\n### 删除防火墙规则\n```\niptables -L -n --line-number\n```\n```\niptables -D INPUT 3 #删除INPUT的第三条已添加规则，这里3代表第几行规则\n```\n\n查看防火墙规则配置文件\n```\ncat /etc/sysconfig/iptables\n```\n\n### 统计防火墙已配置规则\n> `ACCEPT`: 表示以`ACCEPT`开头的记录行\n```\niptables -L | grep -E '^ACCEPT' | wc -l\n```\n\n### 防火墙是否开启\n```\nservice iptables status;\n```\n>  没有开启则输出：`iptables: Firewall is not running.` 【注意：并不代表所以情况均如此!!!】-> 见下文\n\n---\n\n## Firewalld \n> 基于Centos7及以上版本\n\nFirewalld\n### 允许特定IP访问SSH端口\n```\nfirewall-cmd --permanent --add-rich-rule='rule family=\"ipv4\" source address=\"192.168.1.100/32\" port protocol=\"tcp\" port=\"22\" accept'\n```\n\n拒绝其他IP访问SSH端口\n> 危险：将导致拒绝所有其他ip地址访问22端口（已中招！！呆逼...自述）\n \n~~sudo firewall-cmd --permanent --add-rich-rule='rule family=\"ipv4\" source address=\"0.0.0.0/0\" port protocol=\"tcp\" port=\"22\" reject'~~\n \n\n### 重载规则\n```\nfirewall-cmd --reload\n```\n\n### 查看规则\n```\nfirewall-cmd --list-all\n```\n\n### 删除规则\n```\nfirewall-cmd --permanent --remove-rich-rule '要删除的防火墙规则'\n```\n\n> 示例：`firewall-cmd --permanent --remove-rich-rule 'rule family=\"ipv4\" source address=\"10.182.5.1/32\" port port=\"22\" protocol=\"tcp\" accept'`\n\n查看防火墙规则配置文件\n```\ncat /etc/firewalld/zones/public.xml\n```\n\n**掩码：知识补充**\n\nCIDR（Classless Inter-Domain Routing）表示法中的掩码格式用于指定IP地址范围。下面是常见的CIDR表示法：\n\n`/0`：表示`全范围`，即0.0.0.0/0，它匹配所有可能的IP地址，相当于没有过滤，因为子网掩码为0时，IP地址的每一位都是可变的。\n\n`/32`：表示`单个IP地址`，例如192.168.1.1/32，它匹配一个特定的IP地址，因为子网掩码为32时，IP地址的每一位都是固定的。\n\n`/24`：表示`一个子网`，例如192.168.1.0/24，它匹配192.168.1.0到192.168.1.255之间的所有IP地址，因为子网掩码为24时，IP地址的前24位是网络部分，后8位是主机部分，可以有256个不同的地址。\n\n## 【旧】判断当前防火墙类型\n\n> 将`Firewalld`防火墙检测在前，然后`Iptables`防火墙检测在后。\n\n在`麒麟`服务器中发现，同时具有`Iptables`和`Firewalld`,且默认开启的为`Firewalld`,在执行脚本`sh`时由`service iptables status`导致重定向命令`systemctl status iptables.service`开启了防火墙`iptables`关闭了`Firewalld`\n\n```\n#!/bin/bash\n\n# 检查是否正在使用 firewalld\nif [ -f /etc/firewalld/firewalld.conf ]; then\n    echo \"当前正在使用 firewalld。\"\n    exit 0\nfi\n\n# 检查是否正在使用 iptables\nif [ -f /etc/sysconfig/iptables ]; then\n    echo \"当前正在使用 iptables。\"\n    exit 0\nfi\n\necho \"无法确定当前使用的防火墙。\"\nexit 1\n```\n\n### 补充信息\n\n由于centos6下部分服务器存在差异情况：\n执行命令`service iptables status;`会出现两种情况返回输出：\n\n1. \n\n```\niptables: Firewall is not running.\n```\n\n2. \n```\niptables\n   Loaded: loaded (/usr/lib/systemd/system/iptables.service; disabled; vendor preset: disabled)\n   Active: inactive (dead) since Wed 2024-05-08 10:19:53 CST; 13min ago\n  Process: 358493 ExecStart=/usr/libexec/iptables/iptables.init start (code=exited, status=0/SUCCESS)\n  Process: 358645 ExecStop=/usr/libexec/iptables/iptables.init stop (code=exited, status=0/SUCCESS)\n Main PID: 358493 (code=exited, status=0/SUCCESS)\n\n5月 08 10:03:25 qilinmbgui systemd[1]: Starting IPv4 firewall with iptables...\n5月 08 10:03:25 qilinmbgui iptables.init[358493]: iptables: Applying firewall rules: [  OK  ]\n5月 08 10:03:25 qilinmbgui systemd[1]: Started IPv4 firewall with iptables.\n5月 08 10:19:53 qilinmbgui systemd[1]: Stopping IPv4 firewall with iptables...\n5月 08 10:19:53 qilinmbgui iptables.init[358645]: iptables: Setting chains to policy ACCEPT: nat mangle raw security filter [FAILED]\n5月 08 10:19:53 qilinmbgui iptables.init[358645]: iptables: Flushing firewall rules: [  OK  ]\n5月 08 10:19:53 qilinmbgui systemd[1]: iptables.service: Succeeded.\n5月 08 10:19:53 qilinmbgui systemd[1]: Stopped IPv4 firewall with iptables.\n```\n\n\n## 【新】判断当前防火墙类型（已优化）\n\n**添加防火墙命令脚本（测试版本）**\n```\n#!/bin/bash\n\n# 检查是否正在使用 firewalld\nif [ -f /etc/firewalld/firewalld.conf ]; then\n    echo \"当前正在使用 firewalld \"\n\n\n    # 运行 firewall-cmd --state 命令并将结果保存到变量中\n    firewall_state=$(firewall-cmd --state)\n\n    # 判断防火墙状态是否为running\n    if [ \"$firewall_state\" = \"running\" ]; then\n        echo \"防火墙正在运行.\"\n\n    #############################\n    ########## 操作命令 ##########\n    #############################\n\n    else\n        echo \"防火墙未运行.\"\n    fi\n\n    exit 0\nfi\n\n# 检查是否正在使用 iptables\nif [ -f /etc/sysconfig/iptables ]; then\n    echo \"当前正在使用 iptables。\"\n\n    # 运行 service iptables status 命令并检查输出\n    status_output=$(service iptables status)\n\n    # 检查输出是否包含 \"not running\"\n    if [[ \"$status_output\" != *\"not running\"* || \"$status_output\" == *\"Active: active\"* ]]; then\n        \n        # 获取当前已配置防火墙规则数量\n        if iptables -L | grep -c -E '^ACCEPT' > 0; then\n            echo \"iptables 防火墙正在运行.\"\n\n            #############################\n            ########## 操作命令 ##########\n            #############################\n\n        else\n            echo \"iptables 服务处于停止状态\"\n        fi\n    else\n        echo \"iptables 服务处于停止状态\"\n    fi\n\n    exit 0\nfi\n \n\necho \"无法确定当前使用的防火墙。\"\nexit 1\n```\n\n**添加防火墙命令脚本（完整版本）**\n\nfirewalld防火墙规则\n```\n#添加防火墙规则（允许放行指定ip来源访问22端口）\nfirewall-cmd --permanent --add-rich-rule='rule family=\"ipv4\" source address=\"10.182.5.1/32\" port protocol=\"tcp\" port=\"22\" accept'\nfirewall-cmd --permanent --add-rich-rule='rule family=\"ipv4\" source address=\"10.182.5.11/32\" port protocol=\"tcp\" port=\"22\" accept'\nfirewall-cmd --permanent --add-rich-rule='rule family=\"ipv4\" source address=\"xx.xxx.x.25/32\" port protocol=\"tcp\" port=\"22\" accept'\nfirewall-cmd --permanent --add-rich-rule='rule family=\"ipv4\" source address=\"xx.xxx.x.29/32\" port protocol=\"tcp\" port=\"22\" accept'\n#应用防火墙规则\nfirewall-cmd --reload\n#输出防火墙规则\nfirewall-cmd --list-all\n```\n\niptables防火墙规则\n```\n#添加防火墙规则（允许放行指定ip来源访问22端口）\n/sbin/iptables -I INPUT -p tcp --dport 22 -s 10.182.5.1/32 -j ACCEPT\n/sbin/iptables -I INPUT -p tcp --dport 22 -s 10.182.5.11/32 -j ACCEPT\n/sbin/iptables -I INPUT -p tcp --dport 22 -s xx.xxx.x.25/32 -j ACCEPT\n/sbin/iptables -I INPUT -p tcp --dport 22 -s xx.xxx.x.29/32 -j ACCEPT \n#应用防火墙规则\nservice iptables save\nservice iptables restart\n#输出防火墙规则\ncat /etc/sysconfig/iptables\n```\n\n## 防火墙端口转发配置\n\n> 已确认！通过自定义端口转发访问，不会绕过已配置的防火墙规则。\n\n**在一般情况下，firewalld的端口转发规则是应用在防火墙流量经过转发之前的阶段，而不是在目标端口接收流量后的阶段。因此，如果你在22端口上设置了指定IP访问规则，端口转发不会绕过这些规则。**\n\n---\n\n为避免后续在犯错，我决定留一个备用端口。 \n通过`Firewalld`端口转发，将其他自定义端口流量转发至于`22`端口，这样即使ssh的默认端口由于防火墙规则配置出错导致无法连接，我也有备用解决方案！\n\n### SSH 连接自定义端口命令\n> 格式：ssh -p 端口号 用户名@主机地址\n\n```\nssh -p root@192.168.226.131\n```\n\n### Firewalld端口转发规则\n\n#### 开启Firewalld端口转发\n> 默认是关闭端口转发\n```\nfirewall-cmd --zone=public --add-masquerade --permanent\n```\n\n```\nfirewall-cmd --reload\n```\n\n#### 添加端口转发规则\n\n将8080端口转发至22端口\n```\nfirewall-cmd --zone=public --add-forward-port=port=8080:proto=tcp:toport=22 --permanent\n```\n\n```\nfirewall-cmd --reload\n```\n#### 查询端口转发规则\n```\nfirewall-cmd --zone=public --list-all\n```\n> 观察是否输出：`forward-ports: `port=8080:proto=tcp:toport=22:toaddr=\n\n#### 删除端口转发规则\n> 同上防火墙删除规则\n\n## 调整SSH端口\n[Linux系统配置ssh监听多个端口方法](https://blog.csdn.net/zhangmingcai/article/details/82895824)\n\n**注意：如果系统升级过`ssh`，即使修改配置文件`/etc/ssh/sshd_config`也不会生效，升级`openssh`后，配置文件被修改到`/usr/local/etc/sshd_config`**\n\n\n### 脚本命令\n```\n#!/bin/bash\n\n# 添加新的listenAddress配置到sshd_config文件\necho \"listenAddress 0.0.0.0:22\" | sudo tee -a /etc/ssh/sshd_config\necho \"listenAddress 0.0.0.0:2201\" | sudo tee -a /etc/ssh/sshd_config\n\n# 修改SELinux配置文件(重启生效)\nsed -i 's/^SELINUX=.*/SELINUX=disabled/' /etc/selinux/config\n\n# 检查SELinux状态并打印日志\nselinux_status=$(getenforce)\necho \"SELinux status: $selinux_status\"\nif [ \"$selinux_status\" == \"Permissive\" ]; then\n    echo \"SELinux is in Permissive mode.\"\nelse\n    echo \"SELinux is not in Permissive mode.\"\n    \n    # 设置SELinux为宽容模式（立即生效）\n    setenforce 0\nfi\n\n# 重启sshd服务\nservice sshd restart\n\n```\n\n---\n\n### 修改默认端口\n例如：修改默认`22`端口为`2201`\n```\nPort 2201\n#AddressFamily any\n#ListenAddress 0.0.0.0\n#ListenAddress ::\n```\n\n### 监听多个端口\n\n> `selinux`需设置为`disabled`，否则不生效！\n\n```\n#Port 22\n#AddressFamily any\nlistenAddress 0.0.0.0:22\nlistenAddress 0.0.0.0:2201\nlistenAddress 0.0.0.0:2202\n#ListenAddress ::\n```\n\n### 重启SSH服务\n```\nservice sshd restart\n```\n\n### 查看sshd的端口情况\n```\nnetstat -anp|grep sshd\n```\n\n### 补充：修改`selinux`\n\n#### 立即生效方案\n\n设置宽容模式，`permissive` （不执行但产生警告）\n```\nsetenforce 0\n```\n\n检查设置结果\n```\ngetenforce\n```\n\n---\n\n#### 需要重启方案\n```\nvim /etc/selinux/config\n```\n\n修改内容\n```\nSELINUX=disabled\n```\n\n重启应用修改\n```\nreboot\n```\n\n验证修改\n> 如果SELinux已被禁用，命令的输出应该显示SELinux status: disabled。\n```\nsestatus\n```\n\n## 脚本命令\n\n### 添加防火墙规则\n> 添加指定IP的SSH防火墙规则，并同时开启备用SSH端口\n\n- centos6 （待确认）\n- centos7 ok\n- 麒麟 ok\n\n**解决复制代码格式打乱：使用 `:set paste` 命令开启 Paste 模式，这样在插入模式下粘贴内容时会关闭自动缩进，可以保持原始格式。插入模式下，使用 `:set nopaste` 命令可以关闭 Paste 模式。**\n\n```\n#!/bin/bash\n\n# 定义配置放开的ssh端口数组\nconfigs=(\"ListenAddress 0.0.0.0:22\" \"ListenAddress 0.0.0.0:2201\")\n# 定义备用SSH端口访问IP地址【备用SSH】\nbak_ip_addresses=(\"xx.xxx.x.25/32\" \"xx.xxx.x.29/32\")\n\n# 定义要添加的IP地址和端口【主要SSH】\nip_addresses=(\"10.182.5.1/32\" \"10.182.5.11/32\" \"xx.xxx.x.25/32\" \"xx.xxx.x.29/32\")\nport=\"22\"\n\n# 定义ssh配置文件路径\nfile=\"/etc/ssh/sshd_config\"\n\n# 定义selinux配置文件\nselinux_config=\"/etc/selinux/config\"\n\n# 遍历配置数组\nfor config in \"${configs[@]}\"; do\n    # 使用grep命令检查配置是否存在于文件中\n    if grep -q \"^$config\" \"$file\"; then\n        echo \"$config 配置已存在\"\n    else\n        # 如果配置不存在，则追加到文件中\n        echo \"$config\" | tee -a \"$file\" > /dev/null\n        echo \"$config 配置已添加到 $file\"\n    fi\ndone\n\n\n# 检查SELinux状态并打印日志\nselinux_status=$(getenforce)\necho \"SELinux status: $selinux_status\"\nif [ \"$selinux_status\" == \"Permissive\" ] || [ \"$selinux_status\" == \"Disabled\" ] ; then\n    echo \"SELinux 当前属于宽容模式\"\nelse\n    echo \"SELinux 已修改为宽容模式\"\n    \n    # 修改SELinux配置文件(重启生效)\n    sed -i 's/^SELINUX=.*/SELINUX=disabled/' \"$selinux_config\"\n\n    # 设置SELinux为宽容模式（立即生效）\n    setenforce 0\nfi\n\n# 重启sshd服务\nservice sshd restart\n\n# 检查是否正在使用 firewalld\nif [ -f /etc/firewalld/firewalld.conf ]; then\n    echo \"当前正在使用 firewalld \"\n\n    # 运行 firewall-cmd --state 命令并将结果保存到变量中\n    firewall_state=$(firewall-cmd --state)\n\n    # 判断防火墙状态是否为running\n    if [ \"$firewall_state\" = \"running\" ]; then\n        echo \"防火墙正在运行.\"\n\n    #############################\n    ########## 操作命令 ##########\n\n    # 指定规则文件路径\n    rules_file=\"/etc/firewalld/zones/public.xml\"\n    # 指定备份文件路径\n    backup_file=\"/etc/firewalld/zones/firewalld_backup_$(date +%Y%m%d_%H%M%S).rules\"\n    # 备份当前规则文件\n    cp \"$rules_file\" \"$backup_file\"\n    # 输出备份文件路径\n    echo \"Firewalld规则文件已备份到: $backup_file\"\n\n    # 循环遍历IP地址数组(firewalld没有相关方法实现对重复规则的检查，但重复的规则不会被frewalld添加到防火墙规则中。)\n    for ip in \"${ip_addresses[@]}\"; do\n        # 构建规则\n        rule=\"rule family=\\\"ipv4\\\" source address=\\\"$ip\\\" port protocol=\\\"tcp\\\" port=\\\"$port\\\" accept\"\n\n        firewall-cmd --permanent --add-rich-rule=\"$rule\"\n    done\n\n    # 循环遍历端口数组->添加备用SSH端口访问IP地址的防火墙规则\n    for config in \"${configs[@]}\"; do\n        # 提取端口号\n        port=$(echo \"$config\" | awk -F ':' '{print $2}')\n\n        # 循环遍历IP地址数组\n        for ip in \"${bak_ip_addresses[@]}\"; do\n            # 构建规则\n            rule=\"rule family=\\\"ipv4\\\" source address=\\\"$ip\\\" port protocol=\\\"tcp\\\" port=\\\"$port\\\" accept\"\n            \n            # 添加规则\n            firewall-cmd --permanent --add-rich-rule=\"$rule\"\n            echo \"备用SSH_已添加规则：$rule\"\n        done\n    done\n\n    #应用防火墙规则\n    firewall-cmd --reload\n    #输出防火墙规则\n    #firewall-cmd --list-all\n\n    #############################\n\n    else\n        echo \"防火墙未运行.\"\n    fi\n\n    exit 0\nfi\n\n# 检查是否正在使用 iptables\nif [ -f /etc/sysconfig/iptables ]; then\n    echo \"当前正在使用 iptables。\"\n\n    # 运行 service iptables status 命令并检查输出\n    status_output=$(service iptables status)\n\n    # 检查输出是否包含 \"not running\"\n    if [[ \"$status_output\" != *\"not running\"* || \"$status_output\" == *\"Active: active\"* ]]; then\n        \n        # 获取当前已配置防火墙规则数量\n        if iptables -L | grep -c -E '^ACCEPT' > 0; then\n            echo \"iptables 防火墙正在运行.\"\n\n            #############################\n            ########## 操作命令 ##########\n\n \n            # 指定备份文件路径\n            backup_file=\"/etc/sysconfig/iptables_backup_$(date +%Y%m%d_%H%M%S).rules\"\n            # 保存当前iptables规则到备份文件中\n            iptables-save > \"$backup_file\"\n            # 输出备份文件路径\n            echo \"iptables规则已备份到: $backup_file\"\n\n            # 检查规则是否存在\n            if iptables -C INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT &>/dev/null; then\n                # 规则存在，删除它\n                iptables -D INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT\n                echo \"默认允许新连接22端口：规则已删除\"\n            else\n                echo \"默认允许新连接22端口：规则不存在\"\n            fi\n\n\n            # 检查规则是否已经存在的函数\n            rule_exists() {\n                local rule=\"$1\"\n                local table=\"$2\"\n                /sbin/iptables -C \"$table\" $rule &>/dev/null\n            }\n\n            # 循环遍历IP地址数组\n            for ip in \"${ip_addresses[@]}\"; do\n                # 构建规则\n                rule=\"-p tcp --dport $port -s $ip -j ACCEPT\"\n                \n                # 检查规则是否已经存在\n                if ! rule_exists \"$rule\" \"INPUT\"; then\n                    # 如果规则不存在，则添加规则\n                    /sbin/iptables -I INPUT $rule\n                    echo \"已添加规则：$rule\"\n                else\n                    echo \"规则已存在：$rule\"\n                fi\n            done\n\n\n            # 循环遍历端口数组->添加备用SSH端口访问IP地址的防火墙规则\n            for config in \"${configs[@]}\"; do\n                # 提取端口号\n                port=$(echo \"$config\" | awk -F ':' '{print $2}')\n\n                # 循环遍历IP地址数组\n                for ip in \"${bak_ip_addresses[@]}\"; do\n                    # 构建规则\n                    rule=\"-p tcp --dport $port -s $ip -j ACCEPT\"\n                    \n                    # 检查规则是否已经存在\n                    if ! rule_exists \"$rule\" \"INPUT\"; then\n                        # 如果规则不存在，则添加规则\n                        /sbin/iptables -I INPUT $rule\n                        echo \"备用SSH_已添加规则：$rule\"\n                    else\n                        echo \"规则已存在：$rule\"\n                    fi\n                done\n            done\n\n            #应用防火墙规则\n            service iptables save && service iptables restart\n            \n            #输出防火墙规则\n            #cat /etc/sysconfig/iptables\n\n            #############################\n\n        else\n            echo \"iptables 服务处于停止状态\"\n        fi\n    else\n        echo \"iptables 服务处于停止状态\"\n    fi\n\n    exit 0\nfi\n \n\necho \"无法确定当前使用的防火墙。\"\nexit 1\n```\n\n\n### OpenSSH修复CVE-2023-38408漏洞\n- centos6 fail\n- centos7 ok\n- 麒麟 ok\n\n```\n#!/bin/bash\n#https://blog.51cto.com/qiuyue/6904175\n\n\n# 指定下载目录\ndownload_dir=\"/tmp/\"\n\n# 指定要下载的文件\nfile=\"openssh-9.3p2.tar.gz\"\n\n# 指定要下载的URL\nurl=\"https://mirrors.aliyun.com/pub/OpenBSD/OpenSSH/portable/\"\n\n# 检查wget是否存在\nif which wget &>/dev/null; then\n    echo \"wget已安装\"\n    # 使用wget下载文件到指定目录\n    wget -P \"$download_dir\" \"$url$file\"\nelse\n    echo \"wget未安装\"\n    exit 1\nfi\n\n# 备份配置文件\ncd /etc/ssh && cp sshd_config{,.bak}\ncd /etc/pam.d && cp sshd{,.bak}\n\n# 按照依赖包\nyum -y install gcc gcc-c++ zlib-devel openssl-devel pam-devel\n\n#编译新版本\ntar -xf \"$download_dir$file\" -C /usr/src\n\ncd /usr/src/openssh-9.3p2 && ./configure --prefix=/usr --sysconfdir=/etc/ssh --with-zlib --with-pam\n\nrpm -qa | grep openssh\n\nrpm -e --nodeps `rpm -qa | grep openssh`\n\nmake && make install\n\necho $?\n\n# 修复权限\nchmod 600 /etc/ssh/ssh_host_rsa_key /etc/ssh/ssh_host_ecdsa_key /etc/ssh/ssh_host_ed25519_key\n\n# 复制配置文件并授权\ncp -a contrib/redhat/sshd.init /etc/init.d/sshd && chmod u+x /etc/init.d/sshd\n\n# 还原之前备份的配置文件\ncd /etc/ssh && mv -f sshd_config.bak sshd_config\ncd /etc/pam.d && mv -f sshd.bak sshd\n\n# 允许root用户远程登录（生产服务器一般属于`普通用户`登录后切`su`用户）\n# sed -i 's/#PermitRootLogin yes/PermitRootLogin yes/g' /etc/ssh/sshd_config\n\n# 设置开机自启\nchkconfig --add sshd\nchkconfig sshd on\nchkconfig --list\n\n# 重启SSH\nsystemctl restart sshd\n\n# 查看SSH版本\nssh -V\n\n```\n\n\n### Centos6 升级 (OpenSSH修复CVE-2023-38408漏洞)\n\n> 补充下 : centos6 更新源\n\n```\nwget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-vault-6.10.repo\n```\n```\nyum clean all && yum makecache\n```\n\n---\n\n[Linux - centos6.6升级openssh9.7p1](https://www.cnblogs.com/houhuilinblogs/p/18110421)\n\n[openSSH升级常见报错汇总](https://blog.csdn.net/qq_26963433/article/details/108510090)\n\n[【已解决】openssl: error while loading shared libraries: libssl.so.3: cannot open shared object file: No](https://blog.csdn.net/qq_45742250/article/details/134876045)\n\n[Centos7安装、配置SSH服务远程登录](https://blog.csdn.net/weixin_38924500/article/details/106783645)\n\n> 当SSH升级失败，无法登录情况下，登录VM虚机，然后在终端下重新安装openSSH服务即可。\n\n[完美解决 unbuntu中vim编辑完成后 按ESC毫无反映](https://blog.csdn.net/A496608119/article/details/116501497)\n\n> 按ESC退出编辑模式：\n\n> 再同时按 shift键和：键 就可以出现：\n\n> 如果你按shift键+：没有反映，需要将输入法切换成英文输入法\n\n---\n\n安装环境依赖\n```\nyum -y install gcc zlib-devel openssh-devel\n```\n\n安装perl\n\n```\ntar -zxvf perl-5.38.2.tar.gz\n```\n\n```\n./Configure -des -Dprefix=/usr/local/perl\n```\n\n```\nmake && make install \n```\n\n配置环境变量\n> `/etc/profile`\n\n```\necho 'export PATH=/usr/local/perl/bin/:$PATH' >> /etc/profile\n```\n\n```\nsource /etc/profile\n```\n\n```\nperl -v\n```\n\n---\n\n安装 zlib\n```\ntar -zxvf zlib.tar.gz\n```\n```\n./configure  --prefix=/usr/local/zlib\n```\n```\nmake && make install\n```\n配置环境变量\n```\necho 'export LD_LIBRARY_PATH=/usr/local/zlib/lib:$LD_LIBRARY_PATH' >> /etc/profile\n```\n\n```\nsource /etc/profile\n```\n\n检查是否具有目录`include` 、 `lib` 、 `share`\n```\nls /usr/local/zlib/\n```\n\n---\n\n安装 openssl\n\n```\ntar -zxvf openssl-3.2.1.tar.gz\n```\n```\n./config --prefix=/usr/local/openssl\n```\n```\nmake && make install\n```\n配置环境变量\n```\necho 'export PATH=/usr/local/openssl/bin:$PATH' >> /etc/profile\n```\n```\necho 'export LD_LIBRARY_PATH=/usr/local/openssl/lib64:$LD_LIBRARY_PATH' >> /etc/profile\n```\n```\nsource /etc/profile\n```\n\n刷新缓存\n```\nldconfig\n```\n查看版本\n```\nopenssl version\n```\n\n---\n\n安装openssh\n\n解压`Openssh9.7p1`文件\n```\ntar -zxvf openssh-9.7p1.tar.gz\n```\n\n \n\n```\n./configure --prefix=/usr/local/openssh --sysconfdir=/etc/ssh --with-ssl-dir=/usr/local/openssl --with-zlib=/usr/local/zlib\n```\n\n```\nmake && make install\n```\n\n针对不支持配置进行注释\n\n> /etc/ssh/sshd_config line 81: Unsupported option GSSAPIAuthentication\n> /etc/ssh/sshd_config line 83: Unsupported option GSSAPICleanupCredentials\n> /etc/ssh/sshd_config line 97: Unsupported option UsePAM\n\n```\nsed -i 's/^GSSAPIAuthentication/#&/' /etc/ssh/sshd_config\nsed -i 's/^GSSAPICleanupCredentials/#&/' /etc/ssh/sshd_config\nsed -i 's/^UsePAM/#&/' /etc/ssh/sshd_config\n```\n\n\n配置环境变量\n```\necho 'export PATH=/usr/local/openssh/bin:$PATH' >> /etc/profile\n```\n\n```\nsource /etc/profile\n```\n\n查看版本信息\n```\nssh -V\n```\n\n创建软连接\n\n```\nln -snf /usr/local/openssh/bin/ssh-keygen /usr/bin/ssh-keygen\n# ssh-keygen需要依赖openssl的libcrypto\nln -snf /usr/local/openssl/lib64/libcrypto.so.3 /usr/lib64/libcrypto.so.3\n```\n```\nln -snf /usr/local/openssh/sbin/sshd /usr/sbin/sshd\n```\n\n重启SSH服务\n```\nservice sshd restart;\n```\n\n> 若`root`用户无法登录，则修改`/etc/ssh/sshd_config`文件，修改`PermitRootLogin yes` 即可\n\n\n---\n\n\n错误命令\n~~./configure --prefix=/usr --sysconfdir=/etc/ssh~~\n \n\n编译报错: **configure: error: *** working libcrypto not found, check config.log** \n\n[升级openssh编译报错“configure: error: *** working libcrypto not found, check config.log”的解决办法](https://www.cnblogs.com/wholj/p/10944407.html)\n```\nyum install -y openssl-devel\n```\n\n\n#### Centos6 升级 (OpenSSH修复CVE-2023-38408漏洞)【SH脚本版】\n\n[linux多核处理下提高编译速度 make -j](https://blog.csdn.net/u014114990/article/details/50310667)\n\n[解决Linux关闭ssh连接导致执行的程序停掉的问题](https://blog.csdn.net/Ben_zp/article/details/107044657)\n\n```\n# 示例代码\nnohup sh start.sh > run.log 2>&1 &\n```\n\n```\n#!/bin/bash\n\n# ------------------------------------------------\n\n# 定义一个生成备份文件名的方法\ngenerate_backup_name() {\n    echo \".backup_$(date +%Y%m%d_%H%M%S)\"\n}\n\ngenerate_backup_date() {\n    echo \"$(date +%Y%m%d)\"\n}\n\n# 定义一个备份路径的方法\nbackup_path() {\n    local path=$1\n    local backup_name=$2\n\n    if [ -d \"$path\" ]; then\n        # 处理目录备份\n        local parent_dir=$(dirname \"$path\")\n        local dir_name=$(basename \"$path\")\n        cp -r \"$path\" \"$parent_dir/$dir_name$backup_name\" || { echo \"Failed to backup directory $path\"; return 1; }\n        echo \"Backup created: $parent_dir/$dir_name$backup_name\"\n    elif [ -f \"$path\" ]; then\n        # 处理文件备份\n        local dir=$(dirname \"$path\")\n        local file=$(basename \"$path\")\n        cp \"$path\" \"$dir/$file$backup_name\" || { echo \"Failed to backup file $path\"; return 1; }\n        echo \"Backup created: $dir/$file$backup_name\"\n    else\n        echo \"$path does not exist\"\n        return 1\n    fi\n}\n\n# 定义一个解压方法\nextract_tar_gz() {\n    local tar_file=$1\n    local dest_dir=$2\n\n    # 检查 tar.gz 文件是否存在\n    if [ ! -f \"$tar_file\" ]; then\n        echo \"File $tar_file does not exist\"\n        return 1\n    fi\n\n    # 检查目标目录是否存在，如果不存在则创建\n    if [ ! -d \"$dest_dir\" ]; then\n        mkdir -p \"$dest_dir\" || { echo \"Failed to create directory $dest_dir\"; return 1; }\n    fi\n\n    # 解压 tar.gz 文件到指定目录\n    tar -xzf \"$tar_file\" -C \"$dest_dir\"  || { echo \"Failed to extract $tar_file to $dest_dir\"; return 1; }\n\n    echo \"Extracted $tar_file to $dest_dir\"\n}\n\n# 定义一个提取文件名的方法(去掉`.tar.gz`)\nextract_filename_exp() {\n    local url=$1\n    local basename\n\n    # 提取文件名（不包括扩展名）\n    basename=$(basename \"$url\" .tar.gz)\n\n    echo \"$basename\"\n}\n\n\n# 定义一个提取文件名的方法\nextract_filename() {\n    local url=$1\n    local filename\n\n    # 提取 ? 前的部分\n    filename=$(echo \"$url\" | cut -d '?' -f 1)\n\n    echo \"$filename\"\n}\n\n# ------------------------------------------------\n\n# 指定下载目录\ndownload_dir=\"/root/\"\n\n# 指定要下载的URL\nURL_PRIFIX=\"https://XXX.aliyuncs.com/ssh_upgrade/\"\n\n# 指定要下载的文件\nperl_URL=\"perl-5.38.2.tar.gz?OSSAccessKeyId=LTAI4FnhQ9DsrVxZW9uwDd1q&Expires=1716373493&Signature=IaiQ9Z6XPONkqS2nZxu6v2OSVI8%3D\"\n\nzlib_URL=\"zlib-1.3.1.tar.gz?OSSAccessKeyId=LTAI4FnhQ9DsrVxZW9uwDd1q&Expires=1716373463&Signature=T3p9uD%2BgwE51hAbHv5er2zYqFG8%3D\"\n\nopenSSL_URL=\"openssl-3.2.1.tar.gz?OSSAccessKeyId=LTAI4FnhQ9DsrVxZW9uwDd1q&Expires=1716373445&Signature=XO1njdaYbF1DDJ5ybrkAYf7BWNI%3D\"\n\nopenSSH_URL=\"openssh-9.7p1.tar.gz?OSSAccessKeyId=LTAI4FnhQ9DsrVxZW9uwDd1q&Expires=1716373429&Signature=%2BKlQOrhJsUPOvlPKiCH6Ancufu8%3D\"\n\n# 检查wget是否存在\nif which wget &>/dev/null; then\n    echo \"wget已安装\"\nelse\n    echo \"wget未安装,通过yum命令安装中...安装完成后继续执行下载任务!\"\n    yum install -y wget\nfi\n\n# 生成日期\noption_date=$(generate_backup_date)\n# 生成备份文件名\nbackup_name=$(generate_backup_name)\n# 开始备份文件或目录\nbackup_path \"/etc/ssh/sshd_config\" \"$backup_name\"\nbackup_path \"/etc/pam.d/sshd\" \"$backup_name\"\n#backup_path \"/usr/bin/openssl\" \"$backup_name\"\n#backup_path \"/usr/lib/systemd/system\" \"$backup_name\"\n\n# 按照依赖包\nyum -y install gcc gcc-c++ zlib-devel openssl-devel pam-devel\n\n##开始安装perl##\nwget -O \"$download_dir$(extract_filename $perl_URL)\" \"$URL_PRIFIX$perl_URL\" #下载安装文件\nperl=$(extract_filename \"$perl_URL\")     #从url中获取perl.tar.gz文件名\nperl_dir=$(extract_filename_exp \"$perl\") #获取`perl`中获取解压后目录名\nextract_tar_gz \"$download_dir$perl\" \"/opt/${option_date}/\" #解压文件到指定目录下\ncd /opt/${option_date}/$perl_dir\n./Configure -des -Dprefix=/usr/local/perl \nmake -j \nmake install -j \necho 'export PATH=/usr/local/perl/bin/:$PATH' >> /etc/profile && source /etc/profile\nperl_version=$(perl -v 2>&1)\necho \"perl已安装，版本：$perl_version\"\n\n##开始安装zlib##\nwget -O \"$download_dir$(extract_filename $zlib_URL)\" \"$URL_PRIFIX$zlib_URL\"\nzlib=$(extract_filename \"$zlib_URL\")\nzlib_dir=$(extract_filename_exp \"$zlib\")\nextract_tar_gz \"$download_dir$zlib\" \"/opt/${option_date}/\"\ncd /opt/${option_date}/$zlib_dir\n./configure  --prefix=/usr/local/zlib \nmake -j\nmake install -j\necho 'export LD_LIBRARY_PATH=/usr/local/zlib/lib:$LD_LIBRARY_PATH' >> /etc/profile && source /etc/profile\nzlib_check=$(ls -1 /usr/local/zlib/*)\nif [ -n \"$zlib_check\" ]; then\n    echo \"zlib已安装，/usr/local/zlib/目录下已存在文件：\"\n    echo \"$zlib_check\"\nelse\n    echo \"zlib未安装或者目录下没有文件\"\n    exit 1\nfi\n\n##开始安装openssl##\nwget -O \"$download_dir$(extract_filename $openSSL_URL)\" \"$URL_PRIFIX$openSSL_URL\"\nopenssl=$(extract_filename \"$openSSL_URL\")\nopenssl_dir=$(extract_filename_exp \"$openssl\")\nextract_tar_gz \"$download_dir$openssl\" \"/opt/${option_date}/\"\ncd /opt/${option_date}/$openssl_dir\n./config --prefix=/usr/local/openssl \nmake -j\nmake install -j\necho 'export PATH=/usr/local/openssl/bin:$PATH' >> /etc/profile\necho 'export LD_LIBRARY_PATH=/usr/local/openssl/lib64:$LD_LIBRARY_PATH' >> /etc/profile\nsource /etc/profile\nldconfig\nopenssl_version=$(openssl version 2>&1)\necho \"openssl已安装，版本：$openssl_version\"\n\n##开始安装openssh##\nwget -O \"$download_dir$(extract_filename $openSSH_URL)\" \"$URL_PRIFIX$openSSH_URL\"\nopenssh=$(extract_filename \"$openSSH_URL\")\nopenssh_dir=$(extract_filename_exp \"$openssh\")\nextract_tar_gz \"$download_dir$openssh\" \"/opt/${option_date}/\"\ncd /opt/${option_date}/$openssh_dir\n./configure --prefix=/usr/local/openssh --sysconfdir=/etc/ssh --with-ssl-dir=/usr/local/openssl --with-zlib=/usr/local/zlib \nmake -j\nmake install -j\necho 'export PATH=/usr/local/openssh/bin:$PATH' >> /etc/profile\nsource /etc/profile\n\n##创建软连接##\nln -snf /usr/local/openssh/bin/ssh-keygen /usr/bin/ssh-keygen\n# ssh-keygen需要依赖openssl的libcrypto\nln -snf /usr/local/openssl/lib64/libcrypto.so.3 /usr/lib64/libcrypto.so.3\nln -snf /usr/local/openssh/sbin/sshd /usr/sbin/sshd\n\n##还原配置文件##\ncd /etc/ssh && mv -f \"/etc/ssh/sshd_config$backup_name\" sshd_config\ncd /etc/pam.d && mv -f \"/etc/pam.d/sshd$backup_name\" sshd\n\n##注释不支持配置项##\nsed -i 's/^GSSAPIAuthentication/#&/' /etc/ssh/sshd_config\nsed -i 's/^GSSAPICleanupCredentials/#&/' /etc/ssh/sshd_config\nsed -i 's/^UsePAM/#&/' /etc/ssh/sshd_config\n\n##防止升级后ssh-v查询为旧版本号##\n#ssh_path=$(which ssh)\n#mv \"${ssh_path}\" \"${ssh_path}${$backup_name}\"\n#sshd_path=${which sshd}\n#mv \"${sshd_path}\" \"${sshd_path}${$backup_name}\"\n#cp /usr/local/openssh/bin/ssh /usr/bin/ssh\n#cp /usr/local/openssh/sbin/sshd  /usr/sbin/sshd\n\n##重启SSH服务##\nservice sshd restart\n\nssh_version=$(ssh -V 2>&1)\necho \"ssh已安装，版本：$ssh_version\"\n```\n\n##### 注意事项\n\n我这边升级之后遇到问题有，`ssh -V`输出日志 ssh 是9.3版本的，当我执行`source /etc/profile`在执行`ssh -V`就是9.7版本的。\n\n> 参考博客：[Openssh升级后版本不对应](https://www.cnblogs.com/SyXk/p/14658194.html)\n\n---\n\n获取ssh位置\n```\nwhich ssh \n```\n> /usr/bin/ssh\n\n获取sshd位置\n```\nwhich sshd\n```\n> /usr/sbin/sshd\n\n备份ssh和sshd文件\n```\nmv /usr/bin/ssh /usr/bin/ssh.bak20240522\n```\n```\nmv /usr/sbin/sshd /usr/sbin/sshd.bak20240522\n```\n\n通过环境变量配置文件可知，新升级ssh目录位置\n> export PATH=/usr/local/openssh/bin:$PATH\n\n```\ncp /usr/local/openssh/bin/ssh /usr/bin/ssh\n```\n```\ncp /usr/local/openssh/sbin/sshd  /usr/sbin/sshd\n```\n\n再次验证ssh版本信息\n```\nssh -V \n```\n\n\n### 防止ssh升级失败导致无法连接服务器\n\n#### 防火墙Iptables\n```\n#!/bin/bash\n\n# ================================\n# Script Name: setup_telnet.sh\n# Description: This script installs and configures Telnet as a backup method for connecting to the server.\n# Author: Your Name\n# Date: YYYY-MM-DD\n# Version: 1.0\n# ================================\n\n# 检查是否以 root 用户运行\nif [ \"$(id -u)\" -ne 0 ]; then\n    echo \"请以 root 用户运行此脚本。\"\n    exit 1\nfi\n\n# 安装 Telnet 服务和 xinetd\necho \"正在安装 Telnet 服务和 xinetd...\"\nyum install -y telnet-server xinetd\n\n# 配置 xinetd 启动 Telnet\necho \"正在配置 xinetd 启动 Telnet...\"\ncat <<EOL > /etc/xinetd.d/telnet\nservice telnet\n{\n    flags           = REUSE\n    socket_type     = stream\n    wait            = no\n    user            = root\n    server          = /usr/sbin/in.telnetd\n    log_on_failure  += USERID\n    disable         = no\n}\nEOL\n\n# 启动并启用 xinetd 服务\necho \"正在启动并启用 xinetd 服务...\"\nservice xinetd start\n#systemctl enable xinetd #(如果当前命令不存在)\nchkconfig xinetd on\n\n# 使用 iptables 配置防火墙规则\necho \"正在配置防火墙规则...\"\n# 允许 Telnet 连接\niptables -I INPUT -p tcp --dport 23 -j ACCEPT\n# 提交规则更改\niptables-save > /etc/sysconfig/iptables\n\n# 提示成功信息\necho \"Telnet 服务已成功安装并配置。请尽快测试 Telnet 连接并在不再需要时禁用该服务。\"\n\n# 提示测试 Telnet 连接的方法\necho \"使用以下命令从另一台机器测试 Telnet 连接：\"\necho \"telnet <your_server_ip>\"\n\n# 最后，重新加载 iptables 以应用新规则\necho \"正在重新加载 iptables 配置...\"\nsystemctl restart iptables\n\n```\n\n#### 防火墙Firewalld\n```\n#!/bin/bash\n\n# ================================\n# Script Name: setup_telnet.sh\n# Description: This script installs and configures Telnet as a backup method for connecting to the server.\n# Author: Your Name\n# Date: YYYY-MM-DD\n# Version: 1.0\n# ================================\n\n# 检查是否以 root 用户运行\nif [ \"$(id -u)\" -ne 0 ]; then\n    echo \"请以 root 用户运行此脚本。\"\n    exit 1\nfi\n\n# 安装 Telnet 服务和 xinetd\necho \"正在安装 Telnet 服务和 xinetd...\"\nyum install -y telnet-server xinetd\n\n# 配置 xinetd 启动 Telnet\necho \"正在配置 xinetd 启动 Telnet...\"\ncat <<EOL > /etc/xinetd.d/telnet\nservice telnet\n{\n    flags           = REUSE\n    socket_type     = stream\n    wait            = no\n    user            = root\n    server          = /usr/sbin/in.telnetd\n    log_on_failure  += USERID\n    disable         = no\n}\nEOL\n\n# 启动并启用 xinetd 服务\necho \"正在启动并启用 xinetd 服务...\"\nsystemctl start xinetd\nsystemctl enable xinetd\n\n# 确认防火墙允许 Telnet 连接\necho \"正在配置防火墙以允许 Telnet 连接...\"\nfirewall-cmd --permanent --add-port=23/tcp\nfirewall-cmd --reload\n\n# 提示成功信息\necho \"Telnet 服务已成功安装并配置。请尽快测试 Telnet 连接并在不再需要时禁用该服务。\"\n\n# 提示测试 Telnet 连接的方法\necho \"使用以下命令从另一台机器测试 Telnet 连接：\"\necho \"telnet <your_server_ip>\"\n\n```\n\n#### 禁用telnet服务\n\ncentos6\n```\nservice xinetd stop\nchkconfig xinetd off\nyum remove -y telnet-server xinetd\n```\n\ncentos7\n```\nsystemctl stop xinetd\nsystemctl disable xinetd\nyum remove -y telnet-server xinetd\n```\n\n\n#### SSH升级后，无法使用ftp服务\n[升级OpenSSH后SFTP无法连接问题修改](https://blog.csdn.net/u013008898/article/details/129726480)\n\n```\nvim  /etc/ssh/sshd_config\n```\n\n```\n#override default of no subsystems\n#Subsystem      sftp    /usr/local/openssh/libexec/sftp-server改成下面这句\nSubsystem      sftp    internal-sftp\n```\n\n```\nsystemctl restart sshd\n```","categories":["技术博客"]},{"title":"Linux服务器部署环境nginx,mysql,redis,tomcat(非Docker版)","url":"//9011.html","content":"\n记录下Linux（centos 7.0）下安装相关服务并配置环境\n\n## Mysql 8.0\n[linux 安装mysql8.0 超详细图文教程](https://blog.csdn.net/u011421988/article/details/107234718)\n\n### 问题\n[初始化Mysql报错：error while loading shared libraries: libaio.so.1: cannot open shared object](https://blog.csdn.net/qq_41817925/article/details/118674315)\n\nmysql8.0 初始化后数据库未设置大小写敏感问题解决\n[参考博客](https://blog.csdn.net/fjw/article/details/111180223)\n![](./Linux服务器部署环境nginx-mysql-redis-tomcat-非Docker版/image.png)\n\n我的操作步骤\n\n删除mysql的数据库`data`目录下：\n> data: 初始化时自定义的目录\n```\nrm -rf /home/mysql/mysql-8.0/data\n```\n\n在`/home/mysql/mysql-8.0/bin`目录下重新初始化数据库\n> 需要设置大小写敏感: --lower-case-table-names=1\n```\n./mysqld --user=mysql --basedir=/home/mysql/mysql-8.0 --datadir=/home/mysql/mysql-8.0/data/ --initialize --lower-case-table-names=1\n```\n\n配置文件`my.cnf`添加命令\n```\nlower-case-table-names=1\n```\n\n后续内容在对照博客操作即可\n\n> 补充内容\n\n[Mysql 8.0创建用户并授权](https://blog.csdn.net/qq_41566366/article/details/121763099)\n[Linux下修改mysql的默认端口号](https://blog.csdn.net/qq_40596572/article/details/102759373)\n\n## Nginx 1.24\n[Linux 安装 Nginx 并配置为系统服务（超详细](https://blog.csdn.net/u013737132/article/details/134271857)\n\n\n## Tomcat 9.0\n[linux中tomcat设置service服务启动](https://blog.csdn.net/princejwg/article/details/114634016)\n\n移除tomcat的自启动命令\n```\nchkconfig --del tomcat\n```\n\n\n## Redis 4.0\n[linux下安装redis(超详细，每一步命令都有命令截图及运行截图)](https://blog.csdn.net/m0_37959155/article/details/108897863)\n\n[Redis开机启动#2.5](https://developer.aliyun.com/article/789869)\n\n## 设置linux中文编码\n[centos7中文显示正方形怎么解决](https://wenku.csdn.net/answer/e6754f9a42844e73961fa1cca475329d)\n\n### 问题\n[redis启动报错：/var/run/redis_6379.pid exists, process is already running or crashed](https://www.jianshu.com/p/65a27254f2b8)\n\n[Redis服务停止报错解决方案[NOAUTH Authentication required]](https://developer.aliyun.com/article/518398)\n\nredis的持久化开启\n> redis.conf 修改如下命令\n```\nappendonly yes\n```\n","categories":["技术博客"]},{"title":"Linux常用命令","url":"//48231.html","content":"\n\n## 服务器端口探测\n```\nyum install -y nmap\n```\n\nnmap直接IP地址/域名\n```\nnmap -Pn 127.0.0.1\n``` \n\n![](./Linux常用命令/Snipaste_2023-12-14_09-20-48.png)\n\n\n","categories":["技术博客"]},{"title":"Linux设置时间并开启自动同步校准","url":"//24138.html","content":"\n\n> 来源：为知笔记|个人转存\n\n## 设置时区\n设置时区亚洲.上海\n```\ntimedatectl set-timezone Asia/Shanghai\n```\n## 设置时间\n\n1. 将系统日期设置为2017年11月3日\n```\ndate -s 11/03/17\n```\n\n\n2. 将系统时间设置为14点20分50秒\n```\ndate -s 14:20:50\n```\n\n3. 系统时间自动系统同步\n```\nyum install -y ntpdate;\n```\n> 清华大学时间：ntp.tuna.tsinghua.edu.cn\n```\nntpdate time.windows.com\n```\n\n\n4. 定时同步系统时间 \n\n编辑定时任务\n```\ncrontab -e\n```\n每天的5点10分crontab运行一次命令，自动同步系统时间，并且同步到硬件时间\n```\n10 5 * * * root (/usr/sbin/ntpdate  time.windows.com && /sbin/hwclock -w) &> /var/log/ntpdate.log\n```\n\n## 查看系统硬件时钟\n```\nhwclock  --show\n```","categories":["技术博客"],"tags":["Linux","Linux重装后必做事项"]},{"title":"SSH连接错误-No_supported_authentication_methods_available","url":"//12698.html","content":"\n[SSH连接错误【No supported authentication methods available】解决方案](https://blog.csdn.net/weixin_43272781/article/details/114010865)\n\n> 未参考博客解决方式，依照实际情况进行处理\n\n打开配置文件\n```\nvi /etc/ssh/sshd_config\n```\n\n添加允许访问配置信息\n\n![](./SSH连接错误-No-supported-authentication-methods-available/Snipaste_2023-11-06_16-45-44.png)\n\n\n重启sshd服务\n```\nsystemctl restart sshd\n```","categories":["技术博客"]},{"title":"Linux获取文件权限","url":"//46292.html","content":"\n```\n# 获取参考文件的权限\nstat -c \"%a\" reference_file\n```\n\n```\n# 将权限应用到目标文件\nchmod $reference_permissions target_file\n```\n","categories":["技术博客"]},{"title":"vim使用指令记录","url":"//26485.html","content":"\n[参考博客](https://blog.csdn.net/qq_66581313/article/details/127583038)\n\n\n## 光标移动\n\n指定方向移动\n- 左边 `h`\n- 右边 `l(是L)`\n- 下边 `j`\n- 上边 `k`\n\n## 光标定位\n\n光标定位到最右侧，按`$`符号\n\n![](./vim使用指令记录/Snipaste_2023-11-04_17-36-19.png)\n\n\n光标定位到最右侧，按`^`符号\n\n![](./vim使用指令记录/Snipaste_2023-11-04_17-39-07.png)\n\n\n光标定位到底部,按`shift + g`\n\n![](./vim使用指令记录/Snipaste_2023-11-04_17-41-21.png)\n\n光标回到顶部,按`gg`\n\n![](./vim使用指令记录/Snipaste_2023-11-04_17-42-20.png)\n\n\n光标定位到指定行数,按`n + shift + g`\n![](./vim使用指令记录/Snipaste_2023-11-04_17-46-06.png)\n\n## 文本复制\n\n- 复制 `yy`\n  - 复制多行 `nyy`\n- 粘贴 `p`\n  - 粘贴多行 `np`\n- 撤销 `u`\n  - 取消撤销 `ctrl + r`\n- 删除 `dd`\n  - 删除多行 `ndd`\n\n---\n\n\n> 剪切 `ndd + p`\n>> `ndd` 先删除\n>> `P` 粘贴\n\n## 文本编辑\n\n大小写转换,按`shift + ~`\n> 批量大小写转换,按 `n + shift + ~`\n\n![](./vim使用指令记录/Snipaste_2023-11-04_18-01-36.png)\n\n文本替换，按`shift + r`\n![](./vim使用指令记录/Snipaste_2023-11-04_18-07-36.png)\n\n行内删除，按`x`\n> 行内删除多个，按`n+x`\n\n![](./vim使用指令记录/Snipaste_2023-11-04_18-10-34.png)\n\n\n设置行号,按`:set nu`\n![](./vim使用指令记录/Snipaste_2023-11-04_18-15-41.png)\n\n取消行号,按`:set nonu`\n![](./vim使用指令记录/Snipaste_2023-11-04_18-16-39.png)\n\n\n## 分屏操作\n\n分屏操作，按`:vs fileStr`\n> `fileStr`是文件名 \n\n跨屏操作，按`ctrl + ww`\n\n## 替换字符\n\n单次替换,按 `:%s/替换前名称/替换后名称`\n\n全局替换,按 `:%s/替换前名称/替换后名称/g`\n> `/g` 表示全局操作\n\n","categories":["技术博客"]},{"title":"VM虚拟机中固定Linux系统IP地址","url":"//10212.html","content":"\n## 设置DNS和GATE网关地址\n\n下载工具\n```\nyum install -y bind-utils\n```\n\n解析www.baidu.com域名地址，获取DNS配置\n```\nnslookup www.baidu.com\n```\n![](./VM虚拟机中固定Linux系统IP地址/p0JRHOCDl9DtsT4mV24OV6UGvmvQpYtLHhTCASC7AbY.png)\n\n配置更新到`ifcfg-ens33`配置文件中\n```\nvim /etc/sysconfig/network-scripts/ifcfg-ens33\n```\n\n```\nGATEWAY=192.168.119.2\nDNS1=114.114.114.114\n```\n\n![](./VM虚拟机中固定Linux系统IP地址/tot7P5Sdo35ZY2BDmYkPMWChUQN9IRhVI8k951TVPO4.png)\n\n## 固定虚拟机下IP地址\n> 步骤01解决问题是：固定IP地址后可能出现无法上网问题\n \n跳转到指定目录地址\n```\ncd /etc/sysconfig/network-scripts/\n```\n\n修改网络配置文件\n```\nvim ifcfg-ens33\n```\n\n修改配置项\n```\nBOOTPROTO=\"none\"\nIPADDR=192.168.0.118\n```\n\n重启网络服务\n```\nservice network restart\n```","categories":["技术博客"],"tags":["Linux","Centos7","VM","IP"]},{"title":"SSH配置免密登录","url":"//63196.html","content":"\n[ssh免密登录配置方法及配置](https://blog.csdn.net/weixin_44966641/article/details/123955997)\n\n\n## A服务器生成密钥\n> 需要配置多台服务器免密登录，建议区分`id_rsa`文件名称\n```\nssh-keygen -t rsa -C \"your email\" -f id_rsa_【密钥名】\n```\n\n## 将密钥分发至B服务器\n> B服务器目录：`~/.ssh/authorized_keys`\n```\nssh-copy-id -i ~/.ssh/【你的密钥】.pub 【用户名】@【ip地址】\n```\n\n## 配置A服务器的config文件\n> A服务器目录： `~/.ssh/config`\n```\nHost 【B服务器IP地址】\nHostName 【B服务器IP地址】\nUser 【B服务器用户名】\nPreferredAuthentications publickey\nIdentityFile 【生成的私钥文件路径】\n```\n\n## 测试免密登录\n```\nssh 【B服务器用户名】@【B服务器IP地址】\n```\n\n## 补充\n自定义ssh端口登录\n```\nssh -p 【PORT端口】 【用户名】@【密码】\n```\n\n","categories":["技术博客"]},{"title":"Js中常用判断为空方法","url":"//63167.html","content":"\n> 参考博客：[JS 中常用判断为空的方法](https://blog.csdn.net/CEZLZ/article/details/121153716)\n\n## 变量是否为空\n```\nfunction isEmpty(obj) {\n  for (item in obj) {\n    if (obj.hasOwnProperty(item)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nconsole.log(isEmpty({ a: 1 }));\nconsole.log(isEmpty({}));\n```\n\n## 数组是否为空\n```\nfunction isEmpty(arr) {\n  if (arr instanceof Array && !arr.length) {\n    return true;\n  }\n\n  return false;\n}\n\nconsole.log(isEmpty([1, 2]));\nconsole.log(isEmpty([]));\n\n```\n\n## 变量是否为空\n```\nstr === '' || str.trim().length === 0\n```\n\n## 判断数据是数组还是对象\n```\nfunction _isArrOrObj(value) {\n  if (typeof value !== 'object') return '既不是数组也不是对象';\n  // if (value instanceof Array) return '是数组'\n  if (Array.isArray(value)) return '是数组'\n  return '是对象'\n}\n\nconsole.log(_isArrOrObj(1))   // '既不是数组也不是对象'\nconsole.log(_isArrOrObj({}))  // '是对象'\nconsole.log(_isArrOrObj([]))  // '是数组'\nconsole.log(_isArrOrObj(function(){}))  // '既不是数组也不是对象'\n```","categories":["技术博客"],"tags":["JavaScript"]},{"title":"关于Linux的防火墙相关操作命令记录","url":"//614.html","content":"\n\n## Firewalld\n\n禁止某个端口\n```\nfirewall-cmd --permanent --add-rich-rule='rule family=\"ipv4\" port port=\"9090\" protocol=\"tcp\" reject'\n```\n\n```\nfirewall-cmd --reload\n```\n\n查看防火墙规则\n> 只显示/etc/firewalld/zones/public.xml中防火墙策略\n```\nfirewall-cmd --list-all \n```\n\n查看所有的防火墙策略\n```\nfirewall-cmd --list-all-zones \n```\n\n---\n\n[防火墙无法关闭，可参考当前博客内容](https://www.wo0ow.com/64790.html)\n\n通过命令`service firewalld status;`查询防火墙是关闭的，但是通过命令`firewall-cmd --state`防火墙是运行中的。\n\n```\nsystemctl stop firewalld\npkill -f firewalld\nsystemctl start firewalld\n```\n```\nsystemctl stop firewalld\n```\n\n## Iptables\n\n\n","categories":["技术博客"]},{"title":"Java内存模型？volatile 关键字？synchronized 关键字和 volatile 关键字的区别?","url":"//50822.html","content":"\n\n## Java内存模型\n> 参考博客：[一文看懂Java内存模型（JMM）](https://blog.csdn.net/c15158032319/article/details/117361782)\n\n## volatile 关键字\n> 参考博客：[Java种volatile关键字详解](https://www.cnblogs.com/zhengbin/p/5654805.html)\n\n## synchronized 关键字和 volatile 关键字的区别\n> 参考博客：[volatile和synchronized的区别](https://blog.csdn.net/suifeng3051/article/details/52611233)\n","categories":["技术博客"]},{"title":"Java中保证多线程的顺序执行","url":"//39606.html","content":"\n> 参考博客：[保证多线程顺序执行，四种方案，你知道几种？](https://blog.csdn.net/o9109003234/article/details/118347488)\n\n常规操作-启动三个线程执行\n```\n    public static void main(String[] args) {\n\n        Thread thread = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                System.out.println(\"线程1\");\n            }\n        });\n\n        Thread thread2 = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                System.out.println(\"线程2\");\n            }\n        });\n\n        Thread thread3 = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                System.out.println(\"线程3\");\n            }\n        });\n\n        thread.start();\n        thread2.start();\n        thread3.start();\n        \n    }\n\n```\n\n控制台\n```\n线程2\n线程3\n线程1\n```\n\n## 方案一\n`join()方法`\n\n使用`join()`方法改进后代码\n```\n    public static void main(String[] args) {\n\n        Thread thread = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                System.out.println(\"线程1\");\n            }\n        });\n\n        Thread thread2 = new Thread(new Runnable() {\n            @Override\n            public void run() {\n\n                try {\n                    thread.join();\n                } catch (InterruptedException e) {\n                    throw new RuntimeException(e);\n                }\n\n                System.out.println(\"线程2\");\n            }\n        });\n\n        Thread thread3 = new Thread(new Runnable() {\n            @Override\n            public void run() {\n\n                try {\n                    thread2.join();\n                } catch (InterruptedException e) {\n                    throw new RuntimeException(e);\n                }\n\n                System.out.println(\"线程3\");\n            }\n        });\n\n        thread.start();\n        thread2.start();\n        thread3.start();\n\n    }\n```\n\n控制台\n```\n线程1\n线程2\n线程3\n```\n\n## 方案二\n\n`CountDownLatch`\n\n## 方案三\n单线程池\n\n```\n    public static void main(String[] args) {\n\n        Thread thread = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                System.out.println(\"线程1\");\n            }\n        });\n\n        Thread thread2 = new Thread(new Runnable() {\n            @Override\n            public void run() {\n\n                try {\n                    thread.join();\n                } catch (InterruptedException e) {\n                    throw new RuntimeException(e);\n                }\n\n                System.out.println(\"线程2\");\n            }\n        });\n\n        Thread thread3 = new Thread(new Runnable() {\n            @Override\n            public void run() {\n\n                try {\n                    thread2.join();\n                } catch (InterruptedException e) {\n                    throw new RuntimeException(e);\n                }\n\n                System.out.println(\"线程3\");\n            }\n        });\n\n\n        ExecutorService executorService = Executors.newSingleThreadExecutor();\n        executorService.submit(thread);\n        executorService.submit(thread2);\n        executorService.submit(thread3);\n\n        executorService.shutdown();\n\n\n    }\n\n```\n\n控制台\n```\n线程1\n线程2\n线程3\n```\n\n\n## 方案四\n`CompletableFuture`\n\n```\n\n    public static void main(String[] args) {\n\n        Thread t1 = new Thread(new Work(),\"线程1\");\n        Thread t2 = new Thread(new Work(),\"线程2\");\n        Thread t3 = new Thread(new Work(),\"线程3\");\n\n        CompletableFuture.runAsync(()->t1.start()).thenRun(()->t2.start()).thenRun(()->t3.start());\n\n    }\n\n    static class Work implements  Runnable{\n        @Override\n        public void run() {\n            System.out.println(\"执行\"+Thread.currentThread().getName());\n        }\n    }\n```\n\n控制台\n```\n执行线程1\n执行线程2\n执行线程3\n```\n","categories":["技术博客"]},{"title":"解决SSH登录慢，等待时间长的问题","url":"//60053.html","content":"\n[参考博客](https://zhuanlan.zhihu.com/p/360121631)\n\n修改文件：`vim /etc/ssh/sshd_config`\n\n添加配置项:\n> 配置存在则修改，不存在则创建\n\n```\nUseDNS no\n```\n\n```\nGSSAPIAuthentication no\n```\n\n重启ssh服务\n```\nsystemctl restart sshd.service\n```","categories":["技术博客"]},{"title":"@ConditionalOnBean和@ConditionalOnMissingBean两个注解","url":"//5517.html","content":"\n\n[条件注解 ConditionalOnBean、ConditionalOnMissingBean、ConditionalOnClass、ConditionalOnMissingClass](https://blog.csdn.net/weixin_40910372/article/details/108204833)\n\n```\n@ConditionalOnBean         //\t当给定的在bean存在时,则实例化当前Bean\n@ConditionalOnMissingBean  //\t当给定的在bean不存在时,则实例化当前Bean\n@ConditionalOnClass        //\t当给定的类名在类路径上存在，则实例化当前Bean\n@ConditionalOnMissingClass //\t当给定的类名在类路径上不存在，则实例化当前Bean\n```\n","categories":["技术博客"]},{"title":"Java内存溢出问题分析","url":"//33571.html","content":"\n\n[JVM参数-XX:+HeapDumpOnOutOfMemoryError使用方法](https://blog.csdn.net/lusa1314/article/details/84134458)\n\n[jvm内存溢出排查（使用idea自带的内存泄漏分析工具)](https://blog.csdn.net/weixin_43982359/article/details/132316552)\n\n[使用Memory Analyzer分析内存溢出问题（分析hprof文件）](https://blog.csdn.net/qq_21187515/article/details/117447080)\n\n[JVisualVM的使用教程](https://blog.csdn.net/DevelopmentStack/article/details/117385852)\n\n[Jvisualvm设置中文](https://blog.csdn.net/qq_30999361/article/details/124701310)\n\n[JVM-线程暴增问题排查-真实案例](https://blog.csdn.net/j5564/article/details/100974158)\n\n\n[查看 Linux 上正在运行的所有 Java 程序列表](https://blog.csdn.net/qq_29689343/article/details/132079958)\n\n[解决 java.lang.OutOfMemoryError: unable to create new native thread](https://blog.csdn.net/bowenlaw/article/details/111031120)\n\n\n[解决 java.lang.OutOfMemoryError： unable to create new native thread](https://blog.csdn.net/thwsir/article/details/86480956)\n\n\n加在`setenv.sh`\n> 系统发生内存溢出会自动保存当前dump日志文件\n```\n-XX:+HeapDumpOnOutOfMemoryError\n```\n\n\n查看进程数\n```\nps -eLf | wc -l\n```\n\n","categories":["技术博客"]},{"title":"隐藏SSH版本号","url":"//61156.html","content":"\n\n> [隐藏SSH版本信息](https://www.cnblogs.com/Hi-blog/p/How-To-Hide-SSH-Version.html)\n\n\n## 查看SSH的版本信息\n```\nsshd -v\n```\n![](./隐藏SSH版本号/Snipaste_2023-05-23_10-54-48.jpg)\n\n### 使用nmap外部扫描\n```\n#安装\nyum install -y nmap;\n```\n\n```\n#扫描指定ip的22端口\nnmap -p 22 -sV -v -n 192.168.116.129\n```\n\n![](./隐藏SSH版本号/Snipaste_2023-05-23_10-57-39.jpg)\n截图中是已修改后SSH版本信息 `X.X`\n\n## 备份文件、修改SSH版本信息\n\n查看sshd的文件位置\n```\nwhich sshd\n```\n\n备份\n```\ncp /usr/sbin/sshd /usr/sbin/sshd.bak\n```\n\n替换\n#格式语法：sed 's/原字符串/替换字符串/g'\n```\nsed -i 's/OpenSSH_7.4/OpenSSH_x.x/g' /usr/sbin/sshd\n```\n\n## 查看修改后的SSH的版本信息\n\n![](./隐藏SSH版本号/Snipaste_2023-05-23_11-05-17.jpg)\n\n【注】在替换版本的时候，如果替换为任意字符，可能会导致 core dump， 具体原因不明，可以参考上面的做法，隐藏具体版本信息即可。","categories":["技术博客"]},{"title":"Java多线程-线程池有哪些参数、线程池工作原理、线程池各个参数干啥的","url":"//21595.html","content":"\n[Java线程池详解](https://javaguide.cn/java/concurrent/java-thread-pool-summary.html)","categories":["技术博客"]},{"title":"Java创建线程池7种方法","url":"//10804.html","content":"\n\n> [Java创建线程池7种方法](https://blog.csdn.net/xhhhx_/article/details/124366229)\n\n> [面试突击：线程池有几种创建方式？推荐使用哪种？](https://blog.csdn.net/HongYu012/article/details/123331122)\n\n\n","categories":["技术博客"]},{"title":"Java多线程","url":"//58847.html","content":"\n\n> [java多线程使用详解与案例，超详细](https://blog.csdn.net/languageStudent/article/details/114794891)\n\n\n## Lambda表达式方式启动线程\n```\n  public static void main(String[] args) {\n        new Thread(()->{\n            System.out.println(\"开始了一个线程\"+new Date());\n        }).start();\n    }\n```\n\n## Java多线程使用的三种方式\n\n1. 继承Thread类，并重写run方法\n2. 实现Runnable接口，重写run方法\n3. 实现Callable<返回值>接口，重写call方法\n\n### 继承Thread类\n\n```\npublic class ThreadDemo02 extends  Thread{\n\n    @Override\n    public void run() {\n        System.out.println(\"你好呀\");\n    }\n\n    public static void main(String[] args) {\n        new ThreadDemo02().start();\n    }\n\n}\n```\n\n### 实现Runnable接口\n```\npublic class ThreadDemo03 implements  Runnable{\n\n    @Override\n    public void run() {\n        System.out.println(\"你好呀\");\n    }\n\n    public static void main(String[] args) {\n        new Thread(new ThreadDemo03()).start();\n    }\n\n}\n```\n\n### 实现callable\n```\npublic class ThreadDemo04 implements Callable<Boolean> {\n\n    @Override\n    public Boolean call() throws Exception {\n        System.out.println(\"你好呀\");\n        return Thread.currentThread().isAlive();\n    }\n\n    public static void main(String[] args) {\n        \n        FutureTask<Boolean> task = new FutureTask<>(new ThreadDemo04());\n        new Thread(task).start();\n        System.out.println(\"线程执行结果:\"+task.get());\n\n    }\n}\n```\n\n控制台\n```\n你好呀\n线程执行结果:true\n```","categories":["技术博客"]},{"title":"Java线程的死锁","url":"//58164.html","content":"\n线程的死锁\n> 代码来源于《并发编程之美》\n```\npublic class deadlock {\n\n\n    private static Object resources1 = new Object();\n\n    private static Object resources2 = new Object();\n \n\n    public static void main( String [] args ){\n\n        new Thread(()->{\n                    synchronized (resources1){\n                        System.out.println(Thread.currentThread()+\"get resources1\");\n\n                        try{\n                            Thread.sleep(1000);\n                        } catch (InterruptedException e) {\n                            throw new RuntimeException(e);\n                        }\n\n                        System.out.println(Thread.currentThread()+\" waitting get resources2\");\n\n                        synchronized ( resources2 ){\n                            System.out.println(Thread.currentThread()+\"get resources2\");\n                        }\n                    }\n                },\"线程1\").start();\n\n        new Thread(()->{\n                    synchronized (resources2){\n                        System.out.println(Thread.currentThread()+\"get resources2\");\n\n                        try {\n                            Thread.sleep(1000);\n                        } catch (InterruptedException e) {\n                            throw new RuntimeException(e);\n                        }\n\n                        System.out.println(Thread.currentThread()+\" waitting get resources1\");\n\n                        synchronized (resources1){\n                            System.out.println(Thread.currentThread()+\"get resources1\");\n                        }\n\n                    }\n                },\"线程2\").start();\n    }\n\n}\n```\n\n运行结果\n```\nThread[线程1,5,main]get resources1\nThread[线程2,5,main]get resources2\nThread[线程1,5,main] waitting get resources2\nThread[线程2,5,main] waitting get resources1\n```","categories":["技术博客"]},{"title":"Java线程池有哪些参数？阻塞队列有几种？拒绝策略有几种？新线程添加的流程?","url":"//50604.html","content":"\n\n\n> 参考博客：[Java线程池七个参数详解](https://blog.csdn.net/ye17186/article/details/89467919)\n>\n\n\n\n## Java线程池参数\n### 1. corePoolSize 线程池核心线程大小\n### 2. maximumPoolSize 线程池最大线程数量\n### 3. keepAliveTime 空闲线程存活时间\n### 4. unit 空闲线程存活时间单位\n### 5. workQueue 工作队列\n   1. ArrayBlockingQueue \n      > 基于数组的有界阻塞队列，按FIFO排序。新任务进来后，会放到该队列的队尾，有界的数组可以防止资源耗尽问题。当线程池中线程数量达到corePoolSize后，再有新任务进来，则会将任务放入该队列的队尾，等待被调度。如果队列已经是满的，则创建一个新线程，如果线程数量已经达到maxPoolSize，则会执行拒绝策略。\n   2. LinkedBlockingQuene\n      > 基于链表的无界阻塞队列（其实最大容量为Interger.MAX），按照FIFO排序。由于该队列的近似无界性，当线程池中线程数量达到corePoolSize后，再有新任务进来，会一直存入该队列，而基本不会去创建新线程直到maxPoolSize（很难达到Interger.MAX这个数），因此使用该工作队列时，参数maxPoolSize其实是不起作用的。\n   3. SynchronousQuene\n      > 一个不缓存任务的阻塞队列，生产者放入一个任务必须等到消费者取出这个任务。也就是说新任务进来时，不会缓存，而是直接被调度执行该任务，如果没有可用线程，则创建新线程，如果线程数量达到maxPoolSize，则执行拒绝策略。\n    4. PriorityBlockingQueue\n        > 具有优先级的无界阻塞队列，优先级通过参数Comparator实现。 \n\n### 6. threadFactory 线程工厂\n### 7. handler 拒绝策略\n   1. CallerRunsPolicy\n      > 在调用者线程中直接执行被拒绝任务的run方法，除非线程池已经shutdown，则直接抛弃任务。\n   2. AbortPolicy\n       > 直接丢弃任务，并抛出RejectedExecutionException异常。\n   3. DiscardPolicy\n       > 直接丢弃任务，什么都不做。\n   4. DiscardOldestPolicy\n       > 抛弃进入队列最早的那个任务，然后尝试把这次拒绝的任务放入队列\n\n## 阻塞队列一共有7种\n> 参考博客: [线程池中7种阻塞队列的介绍、区别与选择](https://blog.csdn.net/qq_40306697/article/details/119718820)\n>\n\n\n## 拒绝策略有4种\n\n## 新线程添加的流程?\n> 参考博客：[关于线程池的工作队列及新线程的流程顺序](https://www.cnblogs.com/liumz0323/p/11287037.html)\n\n","categories":["技术博客"]},{"title":"Java秒杀系统设计","url":"//37286.html","content":"\n> [《进大厂系列》系列-秒杀系统设计](https://zhuanlan.zhihu.com/p/92307325)\n>\n> [面试了十个应届生九个都是秒杀系统，你确定你们那是秒杀？](https://blog.csdn.net/qq_35190492/article/details/107833096)\n\n## Url动态化\n\n[秒杀系统中如何动态生成下单随机URL](https://blog.csdn.net/canot/article/details/53966987)\n\n个人理解：\n1. 前端调用下单接口之前先调用一个获取md5的接口\n   1. 未到秒杀时间开始不得响应\n   2. 接口不得重复提交，一个唯一标识的用户只能指定时间获取一次 \n2. 调用下单接口url地址pathValue拼接当前md5实现调用接口地址动态化\n\n目的：\n防止秒杀活动开始前，下单地址被提前获取进而造成利用脚本刷单情况发生。\n\n## 前端资源静态化\nCDN这种对前端资源缓存，加速访问\n\n## 前端按钮控制\n1. 默认置灰，不可按。调用时候调用接口查询北京时间然后开启\n2. 时间到了，也可以延时1秒左右按钮正常可点击\n\n## Redis\n1. 可以使用Redis集群\n2. 使用lua脚本实现redis的cas操作，避免redis库存更新在并发情况出现问题\n\n## 数据库乐观锁提高效率\n\n示例语句\n```\nupdate table set count = count -1,version = version +1  where goodsid=1 and count > 0 and version = xxx\n```\n\n### 悲观锁\n1. for update 行锁\n2. 储存过程\n\n## MQ进行消费\n通过MQ对秒杀订单进行处理消费","categories":["技术博客"]},{"title":"SpringBoot对Spring框架有什么优势?","url":"//49304.html","content":"> [Spring和SpringBoot比较，解惑区别](https://www.jianshu.com/p/ffe5ebe17c3a)\n\n1. 创建独立的`spring`引用\n2. 嵌入式`Tomcat`、`Jetty`、 `Undertow`容器（无需部署war文件）\n3. 提供的`starters`简化构建配置\n4. 提供生产指标,例如: 指标\\健壮检查和外部化配置\n5. 没有代码生成和xml配置要求\n\n","categories":["技术博客"]},{"title":"Jdk1.8新特性","url":"//13923.html","content":"\n\n\n> 参考博客：[JDK1.8 新特性](https://blog.csdn.net/qq_29411737/article/details/80835658)\n>\n> 参考博客：[JDK1.8新特性实战](https://javaguide.cn/java/new-features/java8-common-new-features.html)\nJDK1.8新特性\n- Lambda表达式\n- 函数式接口\n- 方法引用和构造器调用\n- Stream API\n- 接口中默认方法和静态方法\n- 新时间日期API","categories":["技术博客"]},{"title":"Java是引用传递还是值传递?","url":"//7068.html","content":"\n> [Java中的参数传递，到底是值传递还是引用传递？](https://blog.csdn.net/weixin_43232955/article/details/106082129)\n\n答: 值传递","categories":["技术博客"]},{"title":"Spring的两大特点是什么?","url":"//50574.html","content":"\n- IOC 控制反转\n- AOP 面向切面编程\n\n## IOC \n作用: 不用开发者手动new创建对象,直接由Spring的容器进行管理,需要用的时候直接获取即可.\n\n### IOC的使用场景\n- 正常情况下我们使用一个对象时都是需要new Object() 的。而ioc是把需要使用的对象提前创建好，放到spring的容器里面。需要使用的时候直接使用就行，而且可以设置单例或多例，非常灵活。\n- 我们在service层想调用另外一个service的方法，不需要去new了，直接把它交给spring管理，然后用注解的方式引入就能使用\n\n## AOP\n> [什么是 AOP，AOP 的作用是什么？](https://blog.csdn.net/jjclove/article/details/124386972)\n\n### AOP的使用场景\n- 事务管理\n  - 访问数据库，而你不想管事务，所以，Spring在你访问数据库之前，自动帮你开启事务，当你访问数据库结束之后，自动帮你提交/回滚事务！\n- 权限检查\n  - 判断用户访问接口是否具有可执行权限(切自定义注解)\n- 日志记录\n  - 登录日志和操作日志就是通过aop+反射的方式实现的\n- ...\n\n### 常见通知\n- 前置通知 @Before\n- 后置通知 @After\n- 返回通知 @AfterReturning\n- 异常通知 @AfterThrowing\n- 环绕通知 @Around","categories":["技术博客"]},{"title":"SpringBoot的自动装配原理","url":"//12723.html","content":"\n\nhttps://blog.csdn.net/Object_de_Father/article/details/109392088","categories":["技术博客"]},{"title":"SpringBoot的依赖注入","url":"//62919.html","content":"\n> 参考博客: [@Autowried和@Resource区别](https://blog.csdn.net/qq_45590494/article/details/114444371)\n>\n> 参考博客：[SpringBoot依赖注入](https://blog.csdn.net/cb2474600377/article/details/53740312)\n\n## Autowired\n\n- 默认注入方式`byType`根据类型匹配；\n- 当多个实现时，则通过`byName`注入；\n- 通过配合@Qualifier注解显式指定name，指明具体使用的实现类；\n\n\n## Resource\n\n- 默认通过`byName`注入，没有匹配则通过`byType`注入;\n\n### 重要属性 `name` 和 `type` \n`name`和`type`用来显式指定`byName`和`byType`方式注入\n\n对应4种情况\n```\n//1. 默认方式：byName\n@Resource\nprivate UserService userService;\n\n//2. 指定byName\n@Resource(name=\"userService\")\nprivate UserService userService;\n\n//3. 指定byType\n@Resource(type=\"UserService.class\")\nprivate UserService userService;\n\n//4. 指定byName和byType\n@Resource(name=\"userService\",type=\"UserService.class\")\nprivate UserService userService;\n\n```\n报错情况\n- 未指定name属性、未指定type属性：\n  - 默认通过byName，若匹配失败者通过byType方式注入\n- 指定name属性:\n  - 将变量名在IOC容器中id进行匹配，匹配失败则报错\n- 指定type属性：\n  - 将类型在IOC容器中进行匹配，匹配不到或匹配多个则报错\n- 指定name属性和type属性：\n  - 在IOC容器中匹配，名字和类型同时匹配则成功，否则失败\n\n## Qualifier和Autowired\nQualifier和Autowired配合使用，指定bean的名称\n\n## Service、Controller、Respository\n标记类是Service层类，Controller层类，数据存储层的类，spring扫描注解配置时，会标记这些类要生成bean。\n\n\n## Component\n是一种泛指，标记类是组件，spring扫描注解配置时，会标记这些类要生成bean。\n\n\n## 附录备注\n\n### SpringBoot的包未被扫描到问题解决\n1. 确认`Application`的入口类在目录位置最顶层，扫描规则从上往下。（主入口类：`org.xx.com`; 其他类: `org.xx.com.dao/controller/model/...`）\n2. 在springBoot的启动入口类上使用注解`@ComponentScan`注解,配置需要扫描的包。（例如：`@ComponentScan(basePackages={\"org.xx.com.conf\"})`）\n\n### 不能对`static`静态变量注入\n> 从配置文件*.yml获取参数给变量赋值\n```\n\n@Value(\"${xxx.xxx}\")\npublic void setDemo( String strs ){\n    this.demo = strs;\n}\npublic static String demo;\n\n```\n","categories":["技术博客"]},{"title":"为什么要有hashCode?","url":"//42174.html","content":"\n## “ HashSet 如何检查重复”为例⼦来说明为什么要有 hashCode ？\n\n> 当你把对象加⼊ HashSet 时， HashSet 会先计算对象的 hashCode 值来判断对象加⼊的位置，同时也会与其他已经加⼊的对象的 hashCode 值作比较如果没有相符的hashCode ， HashSet 会假设对象没有重复出现。但是如果发现有相同 hashCode 值的对象，这时会调⽤ equals() ⽅法来检查 hashCode 相等的对象是否真的相同。如果两者相同， HashSet 就不会让其加⼊操作成功。如果不同的话，就会重新散列到其他位置。这样我们就⼤⼤减少了 equals 的次数，相应就⼤⼤提⾼了执⾏速度。\n\nhashCode() 和 equals() 都是⽤于比较两个对象是否相等\n\n##  JDK 还要同时提供这两个⽅法?\n在⼀些容器（⽐如 HashMap 、 HashSet ）中，有了 hashCode() 之后，判断元素是否在对应容器中的效率会更⾼（参考添加元素进 HashSet 的过程）！\n\n## 不只提供 hashCode() ⽅法呢？\n这是因为两个对象的 hashCode 值相等并不代表两个对象就相等。\n\n==哈希碰撞也就是指的是不同的对象得到相同的hashCode==\n\n## 总结\n- 如果两个对象的`hashCode`值相等,那么这两个对象不一定相等(哈希碰撞)\n- 两个对象的`hashCode`值想到并且`equals()`方法也返回`true`,这两个对象是相等的\n- 两个对象的`hashCode`值不相等,那么两个对象一定不相等\n\n\n## 拓展知识\n### 为什么重写equals()方法时,hashCode方法也必须重写?\n\n因为两个相等对象的hashCode值也必须相等.\n\n如果重写equals()时,没有重写hashCode方法,可能导致equals()方法判断两个值相等,hashCode()值却不相等.\n\n\n### 总结\n- `equals`方法判断两个对象是相等,那么两个对象的`hashCode`值一定相等\n- 两个对象有相同的`hashCode`,他们也不一定是相等的(哈希碰撞)\n\n","categories":["技术博客"]},{"title":"单例模式用法","url":"//44263.html","content":"\n> [Java设计模式单例模式(Singleton)用法解析_java](http://www.ay1.cc/article/1677293335290813180.html)\n\n## 懒汉式（线程不安全）\n\n当多个访问者同时访问的时候很有可能创建多个对象。之所以叫懒汉式，是因为这种写法是使用的时候才创建，起到了懒加载Lazy loading的作用，实际开发中不建议采用这种写法\n\n```\npublic class LazySingleton {\n\n    private static LazySingleton instance;\n\n    private LazySingleton(){\n\n    }\n\n    public static LazySingleton getInstance(){\n        if( instance!=null ){\n            instance = new LazySingleton();\n        }\n\n        return instance;\n    }\n\n}\n```\n\n## 线程安全的懒汉式(线程安全)\n```\npublic class LazySingleton {\n\n    private static LazySingleton instance;\n\n    private LazySingleton(){\n\n    }\n\n    public synchronized static LazySingleton getInstance(){\n        if( instance!=null ){\n            instance = new LazySingleton();\n        }\n\n        return instance;\n    }\n\n}\n```\n\n## 饿汉式（线程安全）\n\n直接在运行（加载）这个类的时候创建了对象，之后直接访问。显然这种方式没有起到Lazy loading的效果。但是是线程安全的，实际开发中还是比较常用。\n\n```\npublic class HungrySigleton {\n\n    public static final HungrySigleton instance = new HungrySigleton();\n\n    private HungrySigleton(){}\n\n    public static HungrySigleton getInstance(){\n        return instance;\n    }\n\n}\n```\n\n## 静态内部类（线程安全）\n```\npublic class StaticInnerClassSingleton {\n\n    //构造方法私有化\n    private StaticInnerClassSingleton(){};\n\n    private static class HolderInnerClass {\n        //需要提供单例对象的外部类作为静态属性加载的时候就初始化\n        private static StaticInnerClassSingleton instance = new StaticInnerClassSingleton();\n    }\n\n    //对外暴漏访问点\n    public static StaticInnerClassSingleton getInstance(){\n        return HolderInnerClass.instance;\n    }\n\n}\n```\n\n## 枚举方法单例（线程安全）\n> 暂时空\n\n## 双重检查法（通常线程安全、低概率线程不安全）\n```\npublic class DoubleCheckSingleton {\n\n    private static DoubleCheckSingleton instance;\n\n    private DoubleCheckSingleton(){};\n\n    public static DoubleCheckSingleton getInstance(){\n\n        if( instance == null ){\n            synchronized (DoubleCheckSingleton.class){\n                if( instance == null ){\n                    instance = new DoubleCheckSingleton();\n                }\n            }\n        }\n\n        return instance;\n    }\n\n}\n```\n\n### Double check(volatile) 双重检查法-升级版\n\nvolatile关键字的其中一个作用就是禁止指令重排序，把instance声明volatile后，对它的操作就会有一个内存屏障\n\n```\npublic class DoubleCheckSingleton {\n\n    private volatile static DoubleCheckSingleton instance;\n\n    private DoubleCheckSingleton(){};\n\n    public static DoubleCheckSingleton getInstance(){\n\n        if( instance == null ){\n            synchronized (DoubleCheckSingleton.class){\n                if( instance == null ){\n                    instance = new DoubleCheckSingleton();\n                }\n            }\n        }\n\n        return instance;\n    }\n\n}\n```\n\n## ThreadLocal实现单例模式（线程安全）\n```\npublic class ThreadLocalSingleton {\n\n    private static final ThreadLocal<ThreadLocalSingleton> threadLocal = new ThreadLocal (){\n        @Override\n        protected ThreadLocalSingleton initialValue() {\n            return new ThreadLocalSingleton();\n        }\n    };\n\n    private ThreadLocalSingleton(){};\n\n    public static ThreadLocalSingleton getInstance(){\n        return threadLocal.get();\n    }\n}\n```","categories":["技术博客"]},{"title":"Windows下同时安装Jdk1.8和Jdk17方案","url":"//37787.html","content":"\n> 相关文档链接： [Linux下安装JDK环境](/posts/59283.html)\n>\n> 参考博客：[windows下安装配置多个版本jdk](https://blog.csdn.net/hu1010037197/article/details/104266862)\n\n---\n\n## 单JDK版本配置JAVA环境变量\n> 参考博客：[JDK环境变量安装](https://blog.csdn.net/qing_gee/article/details/102795906)\n\n### JAVA_HOME 环境变量\n```\nC:\\Program Files\\Java\\jdk1.8.0_131\n```\n### PATH 环境变量\n```\n;%JAVA_HOME%\\bin;\n```\n\n### 验证JAVA环境配置是否成功\n```\njava --version\n```\n\n---\n\n\n## 多JDK版本配置JAVA环境变量\n>根据项目使用需要自行切换JDK1.7或JDK17的环境变量\n> \n![](./Windows下同时安装Jdk1-8和Jdk17方案/Snipaste_2023-06-13_21-47-02.png)\n\n\n### 注意：切换JDK版本不生效情况\n修改系统变量中的PATH变量值JAVA_HOME的顺序，建议将以下两个值调整至PATH的最开头即可。\n```\n%JAVA_HOME%\\bin;\n%JAVA_HOME%\\jre\\bin;\n```\n\n环境变量将从原列表方式变为一行展示：\n![](./Windows下同时安装Jdk1-8和Jdk17方案/Snipaste_2023-06-20_17-32-05.png)\n","categories":["技术博客"]},{"title":"成员变量和局部变量的区别?","url":"//33408.html","content":"\n> [成员变量\\局部变量\\静态变量的区别](https://blog.csdn.net/haovip123/article/details/43883109)\n>\n> [Java全局变量和局部变量初始化问题](https://blog.csdn.net/qq_41936561/article/details/104402117)\n\n## 成员变量和局部变量和静态变量的区别\n\n<table style='width:100%;'>\n<tr>\n<td></td>\n<td>成员变量</td>\n<td>局部变量</td>\n<td>静态变量</td>\n</tr>\n<tr>\n<td>定义位置</td>\n<td>在类中,方法外</td>\n<td>在方法中,或者是方法的形式参数</td>\n<td>在类中,方法外</td>\n</tr>\n<tr>\n<td>初始化值</td>\n<td>有默认值</td>\n<td>无,先定义,赋值后才可以使用</td>\n<td>有默认值</td>\n</tr>\n<tr>\n<td>调用方式</td>\n<td>对象调用</td>\n<td> </td>\n<td>对象调用\\类名调用</td>\n</tr>\n<tr>\n<td>储存位置</td>\n<td>堆</td>\n<td>栈</td>\n<td>方法区</td>\n</tr>\n<tr>\n<td>生命周期</td>\n<td>与对象共存亡</td>\n<td>与方法共存亡</td>\n<td>与类共存亡</td>\n</tr>\n<tr>\n<td>别名</td>\n<td>实例变量</td>\n<td> </td>\n<td>类变量</td>\n</tr>\n</table>\n\n## 成员变量和局部变量的初始化值\n\n> 变量时需要遵循的原则为：就近原则 (局部范围找，有就使用；接着在成员位置找)\n\n### 成员变量和静态变量\n- 基本类型\n  - `byte/short/int/long` : 0\n  - `float/double` : 0.0\n  - `char` : '\\u0000'(null)\n- 引用类型\n  - 默认初始值`null`\n\n\n![](./成员变量和局部变量的区别/Snipaste_2023-05-09_09-17-51.jpg)\n\n\n### 局部变量\n> 局部变量若只定义未使用编译不会报错,一旦使用且为赋值编译阶段不通过\n\n![](./成员变量和局部变量的区别/Snipaste_2023-05-09_09-18-23.jpg)","categories":["技术博客"]},{"title":"实现Runnable接口和Callable接口的区别","url":"//54835.html","content":"\n\n\n> 参考博客：[Runnable 和 Callable 有什么区别](https://blog.csdn.net/meism5/article/details/90176922)\n\n\n主要区别\n- Runnable接口run方法无返回值；Callable接口call方法有返回值，支持泛型；\n- Runnable接口run方法只能抛出运行时异常，且无法捕获处理；Callable接口call方法允许抛出异常，可以获取异常信息；\n\n\n拓展关联\n> [Java多线程](/posts/58847.html)","categories":["技术博客"]},{"title":"查看.class文件的字节码","url":"//51115.html","content":"\n## 查看.class文件的字节码\n\n\n> [Java以及IDEA下查看字节码的五种方法#查看字节码的方法idea可以集成命令行使用javap](https://blog.csdn.net/21aspnet/article/details/88351875)\n\n\n## 打开编译.class文件位置\n![](./查看-class文件的字节码/20230507090051.png)\n\n## 执行命令\n```\njavap -v Test.class\n```\n\n### 对`.java编译为.class文件`命令\n```\njavac -encoding UTF-8 Test.java\n```\n\n## 控制台打印字节码\n![](./查看-class文件的字节码/Snipaste_2023-05-07_09-01-15.jpg)","categories":["技术博客"]},{"title":"通过Java对word/xls/image/ppt转pdf文件并添加水印信息","url":"//3367.html","content":"\n\n# 文件转PDF\n\n参考博客：[java ： word,excel,img,ppt各种文档转换pdf格式以流方式](https://blog.csdn.net/qq_41831842/article/details/115316928)\n\n## 环境依赖配置\n\n### 环境`核心`依赖配置\n\n#### 外部核心jar包导入\n```\n        <!--核心依赖-->\n        <!-- https://mvnrepository.com/artifact/com.aspose.cells/aspose-cells-jdk16 -->\n        <dependency>\n            <groupId>com.aspose.cells</groupId>\n            <artifactId>aspose-cells-jdk16</artifactId>\n            <version>8.1.1.0</version>\n            <scope>system</scope>\n            <systemPath>${project.basedir}/src/main/resources/lib/aspose-cells-21.8.cracked.jar</systemPath>\n        </dependency>\n\n        <!-- https://mvnrepository.com/artifact/com.aspose/aspose-words -->\n        <dependency>\n            <groupId>com.aspose</groupId>\n            <artifactId>aspose-words</artifactId>\n            <version>14.7.0</version>\n            <scope>system</scope>\n            <systemPath>${project.basedir}/src/main/resources/lib/aspose-words-15.8.0-jdk16.jar</systemPath>\n        </dependency>\n```\n\n#### 父类pom文件修改\n\n增加配置项\n```\n<includeSystemScope>true</includeSystemScope>\n```\n\n完整配置\n```\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <version>2.1.1.RELEASE</version>\n                <configuration>\n                    <fork>true</fork> <!-- 如果没有该配置，devtools不会生效 -->\n                    <!--包含SystemScope文件（2023.07.06）-->\n                    <includeSystemScope>true</includeSystemScope>\n                </configuration>\n                <executions>\n                    <execution>\n                        <goals>\n                            <goal>repackage</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n```\n\n\n\n\n### 环境`其他`依赖配置\n\n#### pom文件增加配置\n```\n<dependency>\n            <groupId>org.apache.poi</groupId>\n            <artifactId>poi</artifactId>\n            <version>4.1.2</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.apache.poi</groupId>\n            <artifactId>poi-ooxml</artifactId>\n            <version>4.1.2</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.poi</groupId>\n            <artifactId>poi-scratchpad</artifactId>\n            <version>4.1.2</version>\n        </dependency>\n\n\n        <dependency>\n            <groupId>com.itextpdf</groupId>\n            <artifactId>itextpdf</artifactId>\n            <version>5.4.3</version>\n        </dependency>\n\n        <dependency>\n            <groupId>com.itextpdf</groupId>\n            <artifactId>itext-asian</artifactId>\n            <version>5.2.0</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.docx4j</groupId>\n            <artifactId>docx4j</artifactId>\n            <version>3.2.2</version>\n        </dependency>\n\n\n        <!-- 出现日志问题，请添加下面log4j-api依赖 和 log4j-core -->\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-api</artifactId>\n            <version>2.17.1</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-core</artifactId>\n            <version>2.11.1</version>\n        </dependency>\n\n        <!-- 下面的依赖是为了报其他错误的 -->\n        <dependency>\n            <groupId>org.apache.xmlbeans</groupId>\n            <artifactId>xmlbeans</artifactId>\n            <version>5.0.3</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.poi</groupId>\n            <artifactId>poi-ooxml-schemas</artifactId>\n            <version>4.1.2</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.commons</groupId>\n            <artifactId>commons-compress</artifactId>\n            <version>1.19</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.commons</groupId>\n            <artifactId>commons-collections4</artifactId>\n            <version>4.1</version>\n        </dependency>\n\n        <dependency>\n            <groupId>com.zaxxer</groupId>\n            <artifactId>SparseBitSet</artifactId>\n            <version>1.2</version>\n        </dependency>\n        <dependency>\n            <groupId>cn.hutool</groupId>\n            <artifactId>hutool-all</artifactId>\n            <version>5.6.0</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-api</artifactId>\n            <version>2.17.1</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-core</artifactId>\n            <version>2.11.1</version>\n        </dependency>\n```\n\n#### 日志报错问题解决\n> 备注：此处pom依赖在上文中pom的配置文件已包括\n```\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-api</artifactId>\n            <version>2.17.1</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-core</artifactId>\n            <version>2.11.1</version>\n        </dependency>\n\n```\n\n`log4j2.xml`文件\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration status=\"warn\">\n    <Appenders>\n        <Console name=\"Console\" target=\"SYSTEM_OUT\">\n            <PatternLayout pattern=\"[%-5p] %d %c - %m%n\" />\n        </Console>\n        <File name=\"File\" fileName=\"dist/my.log\">\n            <PatternLayout pattern=\"%m%n\" />\n        </File>\n    </Appenders>\n\n    <Loggers>\n        <Logger name=\"mh.sample2.Log4jTest2\" level=\"INFO\">\n            <AppenderRef ref=\"File\" />\n        </Logger>\n        <Root level=\"INFO\">\n            <AppenderRef ref=\"Console\" />\n        </Root>\n    </Loggers>\n</Configuration>\n\n```\n\n## 启动运行\n\n### 工具类代码\n\n> 备注：ppt暂时有部分问题\n\n```\npackage com.ruoyi.doc;\n\nimport com.aspose.words.*;\nimport com.itextpdf.text.Document;\nimport com.itextpdf.text.Image;\nimport com.itextpdf.text.*;\nimport com.itextpdf.text.pdf.*;\nimport org.apache.poi.hslf.usermodel.*;\nimport org.apache.poi.xslf.usermodel.*;\n\nimport java.awt.*;\n\nimport java.awt.Color;\nimport java.awt.image.BufferedImage;\nimport java.io.*;\nimport java.util.List;\n\npublic class PdfConverUtil {\n\n    /**\n     * @param inputStream  源文件输入流\n     * @param outputStream pdf文件输出流\n     **/\n    public static boolean imgToPdf(InputStream inputStream, OutputStream outputStream) {\n\n        Document document = null;\n\n        try {\n\n            // 创建文档,设置PDF页面的大小 A2-A9, 个人觉得A3最合适\n            document = new Document(PageSize.A3, 20, 20, 20, 20);\n\n            // 新建pdf文档,具体逻辑看.getInstance方法\n            PdfWriter.getInstance(document, outputStream);\n\n            document.open();\n            document.newPage();\n\n            // 将文件流转换为字节流，便于格式转换\n            BufferedInputStream bufferedInputStream = new BufferedInputStream(inputStream);\n            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n            byte[] bytes = new byte[1024];\n            int length = 0 ;\n            while (-1 != (length = bufferedInputStream.read(bytes))) {\n                byteArrayOutputStream.write(bytes, 0, length);\n            }\n\n            // 处理img图片\n            Image image = Image.getInstance(byteArrayOutputStream.toByteArray());\n\n            float height = image.getHeight();\n            float width = image.getWidth();\n\n            float percent = 0.0f;\n            // 设置像素或者长宽高,将会影响图片的清晰度，因为只是对图片放大或缩小\n            if (height > width) {\n                // A4 - A9\n                percent = PageSize.A6.getHeight() / height * 100;\n            } else {\n                percent = PageSize.A6.getWidth() / width * 100;\n            }\n\n            image.setAlignment(Image.MIDDLE);\n            image.scalePercent(percent);\n\n            // 将图片放入文档中，完成pdf转换\n            document.add(image);\n            System.out.println(\"image转换完毕\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        } finally {\n            try {\n                if (document != null) {\n                    document.close();\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * @param inputStream  源文件输入流\n     * @param outputStream pdf文件输出流\n     **/\n    public static boolean wordTopdfByAspose(InputStream inputStream, OutputStream outputStream) {\n\n        // 验证License 若不验证则转化出的pdf文档会有水印产生\n        if (!getLicense()) {\n            return false;\n        }\n        try {\n            // 将源文件保存在com.aspose.words.Document中，具体的转换格式依靠里面的save方法\n            com.aspose.words.Document doc = new com.aspose.words.Document(inputStream);\n\n            // 全面支持DOC, DOCX, OOXML, RTF HTML, OpenDocument, PDF,EPUB, XPS, SWF 相互转换\n            doc.save(outputStream, SaveFormat.PDF);\n\n            System.out.println(\"word转换完毕\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }finally {\n            if (outputStream != null) {\n                try {\n                    outputStream.flush();\n                    outputStream.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return true;\n    }\n\n    // 官方文档的要求 无需理会\n    public static boolean getLicense() {\n        boolean result = false;\n        try {\n            String s = \"<License><Data><Products><Product>Aspose.Total for Java</Product><Product>Aspose.Words for Java</Product></Products><EditionType>Enterprise</EditionType><SubscriptionExpiry>20991231</SubscriptionExpiry><LicenseExpiry>20991231</LicenseExpiry><SerialNumber>8bfe198c-7f0c-4ef8-8ff0-acc3237bf0d7</SerialNumber></Data><Signature>sNLLKGMUdF0r8O1kKilWAGdgfs2BvJb/2Xp8p5iuDVfZXmhppo+d0Ran1P9TKdjV4ABwAgKXxJ3jcQTqE/2IRfqwnPf8itN8aFZlV3TJPYeD3yWE7IT55Gz6EijUpC7aKeoohTb4w2fpox58wWoF3SNp6sK6jDfiAUGEHYJ9pjU=</Signature></License>\";\n            ByteArrayInputStream is = new ByteArrayInputStream(s.getBytes());\n            License aposeLic = new License();\n            aposeLic.setLicense(is);\n            result = true;\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return result;\n    }\n\n\n    /**\n     * @param inputStream  源文件输入流\n     * @param outputStream pdf文件输出流\n     **/\n    public static boolean excelToPdf(InputStream inputStream, OutputStream outputStream) {\n        // 验证License 若不验证则转化出的pdf文档会有水印产生\n        if (!getExeclLicense()) {\n            return false;\n        }\n        try {\n            com.aspose.cells.Workbook wb = new com.aspose.cells.Workbook(inputStream);// 原始excel路径\n\n            com.aspose.cells.PdfSaveOptions pdfSaveOptions = new com.aspose.cells.PdfSaveOptions();\n            pdfSaveOptions.setOnePagePerSheet(false);\n\n\n            int[] autoDrawSheets={3};\n            //当excel中对应的sheet页宽度太大时，在PDF中会拆断并分页。此处等比缩放。\n            autoDraw(wb,autoDrawSheets);\n\n            int[] showSheets={0};\n            //隐藏workbook中不需要的sheet页。\n            printSheetPage(wb,showSheets);\n            wb.save(outputStream, pdfSaveOptions);\n            outputStream.flush();\n            outputStream.close();\n            System.out.println(\"excel转换完毕\");\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return true;\n    }\n\n\n    /**\n     * 设置打印的sheet 自动拉伸比例\n     * @param wb\n     * @param page 自动拉伸的页的sheet数组\n     */\n    public static void autoDraw(com.aspose.cells.Workbook wb,int[] page){\n        if(null!=page&&page.length>0){\n            for (int i = 0; i < page.length; i++) {\n                wb.getWorksheets().get(i).getHorizontalPageBreaks().clear();\n                wb.getWorksheets().get(i).getVerticalPageBreaks().clear();\n            }\n        }\n    }\n\n    /**\n     * 隐藏workbook中不需要的sheet页。\n     *\n     * @param wb\n     * @param page 显示页的sheet数组\n     */\n    public static void printSheetPage(com.aspose.cells.Workbook wb, int[] page) {\n        for (int i = 1; i < wb.getWorksheets().getCount(); i++) {\n            wb.getWorksheets().get(i).setVisible(false);\n        }\n        if (null == page || page.length == 0) {\n            wb.getWorksheets().get(0).setVisible(true);\n        } else {\n            for (int i = 0; i < page.length; i++) {\n                wb.getWorksheets().get(i).setVisible(true);\n            }\n        }\n    }\n\n    public static boolean getExeclLicense() {\n        boolean result = false;\n        try {\n            String s = \"<License><Data><Products><Product>Aspose.Total for Java</Product><Product>Aspose.Words for Java</Product></Products><EditionType>Enterprise</EditionType><SubscriptionExpiry>20991231</SubscriptionExpiry><LicenseExpiry>20991231</LicenseExpiry><SerialNumber>8bfe198c-7f0c-4ef8-8ff0-acc3237bf0d7</SerialNumber></Data><Signature>sNLLKGMUdF0r8O1kKilWAGdgfs2BvJb/2Xp8p5iuDVfZXmhppo+d0Ran1P9TKdjV4ABwAgKXxJ3jcQTqE/2IRfqwnPf8itN8aFZlV3TJPYeD3yWE7IT55Gz6EijUpC7aKeoohTb4w2fpox58wWoF3SNp6sK6jDfiAUGEHYJ9pjU=</Signature></License>\";\n            ByteArrayInputStream is = new ByteArrayInputStream(s.getBytes());\n            com.aspose.cells.License aposeLic = new com.aspose.cells.License();\n            aposeLic.setLicense(is);\n            result = true;\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return result;\n    }\n\n\n    /**\n     * pptToPdf\n     * @param inputStream\n     * @param outputStream\n     * @return\n     */\n    public static boolean pptToPdf(InputStream inputStream, OutputStream outputStream) {\n\n        Document document = null;\n        HSLFSlideShow hslfSlideShow = null;\n        PdfWriter pdfWriter = null;\n\n        try {\n            hslfSlideShow = new HSLFSlideShow(inputStream);\n\n            // 获取ppt文件页面\n            Dimension dimension = hslfSlideShow.getPageSize();\n\n            document = new Document();\n\n            // pdfWriter实例\n            pdfWriter = PdfWriter.getInstance(document, outputStream);\n\n            document.open();\n\n            PdfPTable pdfPTable = new PdfPTable(1);\n\n            List<HSLFSlide> hslfSlideList = hslfSlideShow.getSlides();\n\n            for (int i=0; i < hslfSlideList.size(); i++) {\n                HSLFSlide hslfSlide = hslfSlideList.get(i);\n                // 设置字体, 解决中文乱码\n                for (HSLFShape shape : hslfSlide.getShapes()) {\n                    if (shape instanceof HSLFTextShape) {\n                        HSLFTextShape textShape = (HSLFTextShape) shape;\n                        for (HSLFTextParagraph textParagraph : textShape.getTextParagraphs()) {\n                            for (HSLFTextRun textRun : textParagraph.getTextRuns()) {\n                                textRun.setFontFamily(\"宋体\");\n                            }\n                        }\n                    }\n                }\n                BufferedImage bufferedImage = new BufferedImage((int)dimension.getWidth(), (int)dimension.getHeight(), BufferedImage.TYPE_INT_RGB);\n\n                Graphics2D graphics2d = bufferedImage.createGraphics();\n\n                graphics2d.setPaint(Color.white);\n                graphics2d.setFont(new java.awt.Font(\"宋体\", java.awt.Font.PLAIN, 12));\n\n                hslfSlide.draw(graphics2d);\n\n                graphics2d.dispose();\n\n                Image image = Image.getInstance(bufferedImage, null);\n                image.scalePercent(50f);\n\n                // 写入单元格\n                pdfPTable.addCell(new PdfPCell(image, true));\n                document.add(image);\n\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        } finally {\n            if (document != null) {\n                document.close();\n            }\n            if (pdfWriter != null) {\n                pdfWriter.close();\n            }\n        }\n        System.out.println(\"ppt转换完毕\");\n        return true;\n    }\n\n    /**\n     *  pptxToPdf\n     * @param inputStream\n     * @param outputStream\n     * @return\n     */\n    public static boolean pptxToPdf(InputStream inputStream, OutputStream outputStream) {\n\n        Document document = null;\n\n        XMLSlideShow slideShow = null;\n\n        PdfWriter pdfWriter = null;\n\n        try {\n\n            slideShow = new XMLSlideShow(inputStream);\n\n            Dimension dimension = slideShow.getPageSize();\n\n            document = new Document();\n\n            pdfWriter = PdfWriter.getInstance(document, outputStream);\n\n            document.open();\n\n            PdfPTable pdfPTable = new PdfPTable(1);\n\n            List<XSLFSlide> slideList = slideShow.getSlides();\n\n            for (int i = 0, row = slideList.size(); i < row; i++) {\n\n                XSLFSlide slide = slideList.get(i);\n\n                // 设置字体, 解决中文乱码\n                for (XSLFShape shape : slide.getShapes()) {\n                    if (shape instanceof XSLFTextShape) {\n                        XSLFTextShape textShape = (XSLFTextShape) shape;\n\n                        for (XSLFTextParagraph textParagraph : textShape.getTextParagraphs()) {\n                            for (XSLFTextRun textRun : textParagraph.getTextRuns()) {\n                                textRun.setFontFamily(\"宋体\");\n                            }\n                        }\n                    }\n                }\n\n                BufferedImage bufferedImage = new BufferedImage((int)dimension.getWidth(), (int)dimension.getHeight(), BufferedImage.TYPE_INT_RGB);\n\n                Graphics2D graphics2d = bufferedImage.createGraphics();\n\n                graphics2d.setPaint(Color.white);\n                graphics2d.setFont(new java.awt.Font(\"宋体\", java.awt.Font.PLAIN, 12));\n\n                slide.draw(graphics2d);\n\n                graphics2d.dispose();\n\n                Image image = Image.getInstance(bufferedImage, null);\n                image.scalePercent(50f);\n\n                // 写入单元格\n                pdfPTable.addCell(new PdfPCell(image, true));\n                document.add(image);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        } finally {\n            if (document != null) {\n                document.close();\n            }\n            if (pdfWriter != null) {\n                pdfWriter.close();\n            }\n        }\n        System.out.println(\"pptx转换完毕\");\n        return true;\n    }\n\n\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n### 测试类代码\n```\npackage com.ruoyi.doc;\n\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\n\npublic class Test {\n\n    public static void main(String[] args) {\n        // imgae to pdf\n        try {\n            FileInputStream inputStream = new FileInputStream(\"/Users/ordinary/Downloads/Test.jpg\");\n            FileOutputStream byteArrayOutputStream = new FileOutputStream(\"/Users/ordinary/Downloads/TestJPG.pdf\");\n            PdfConverUtil.imgToPdf(inputStream, byteArrayOutputStream);\n\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n\n        // doc/docx to pdf\n        try {\n            FileInputStream inputStream = new FileInputStream(\"/Users/ordinary/Downloads/Test.docx\");\n            FileOutputStream byteArrayOutputStream = new FileOutputStream(\"/Users/ordinary/Downloads/TestDOCX.pdf\");\n            PdfConverUtil.wordTopdfByAspose(inputStream, byteArrayOutputStream);\n\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n\n        // execl to pdf\n        try {\n            FileInputStream inputStream = new FileInputStream(\"/Users/ordinary/Downloads/Test.xlsx\");\n            FileOutputStream byteArrayOutputStream = new FileOutputStream(\"/Users/ordinary/Downloads/TestXLSX.pdf\");\n            PdfConverUtil.excelToPdf(inputStream, byteArrayOutputStream);\n\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n\n        // ppt tp pdf\n        /*try {\n            FileInputStream inputStream = new FileInputStream(\"/Users/ordinary/Downloads/Test.ppt\");\n            FileOutputStream byteArrayOutputStream = new FileOutputStream(\"/Users/ordinary/Downloads/TestPPT.pdf\");\n            PdfConverUtil.pptToPdf(inputStream, byteArrayOutputStream);\n\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }*/\n\n        // pptx to pdf\n        /*try {\n            FileInputStream inputStream = new FileInputStream(\"/Users/ordinary/Downloads/Test.pptx\");\n            FileOutputStream byteArrayOutputStream = new FileOutputStream(\"/Users/ordinary/Downloads/TestPPTX.pdf\");\n            PdfConverUtil.pptxToPdf(inputStream, byteArrayOutputStream);\n\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }*/\n    }\n\n}\n\n```\n\n\n\n# PDF加水印\n\n> 参考博客：[java生成pdf并加水印,通过wkhtmltopdf实现](https://www.cnblogs.com/helf/p/15096971.html)\n> > 看：`给pdf的每一页都加上文字水印和页码`章节\n\n> 参考博客：[Java实现pdf文件添加水印，铺满全页](https://blog.csdn.net/duan1309/article/details/81232300)\n\n\n","categories":["技术博客"],"tags":["WaterMark","ConvertPDF","Java"]},{"title":"Maven仓库清理lastUpdated文件","url":"//20486.html","content":"\n> 参考博客：[Windows下清理maven仓库中的lastUpdated文件](https://blog.csdn.net/weixin_43820556/article/details/122822353)\n\n## 新建`clean.bat`的文件\n\n主要修改`REPOSITORY_PATH`参数的值，为自己本地仓库的地址。\n```\n@echo  off\nset REPOSITORY_PATH=E:\\maven\\localRepository\nrem 正在搜索...\nfor /f \"delims=\" %%i in ('dir /b /s \"%REPOSITORY_PATH%\\*lastUpdated*\"') do (\n    del /s /q %%i\n)\nrem 搜索完毕\npause\n\n```\n\n## 使用管理员权限执行文件\n","categories":["技术博客"],"tags":["Maven"]},{"title":"说说sleep()方法和wait()方法区别和共同点?","url":"//31949.html","content":"\n> 参考博客：[sleep（）和wait（）的区别和共同点](https://blog.csdn.net/qq_38197844/article/details/109131330)\n\n## 共同点\n两者都可以暂停线程的执行\n\n## 区别\n1. `sleep()`方法没有释放锁、但`wait()`方法释放了锁；\n2. `wait()`方法调用后不会自动苏醒，需要别的线程调用同一对象的`notify()/notifyAll()`方法；而`sleep()`方式执行后会自动苏醒；\n3. `wait()`通常用于线程之间的通信，而`sleep()`一般用于暂停；\n\n","categories":["技术博客"]},{"title":"使用自签名证书配置本地环境SSL访问","url":"//41246.html","content":"\n\n\n[Windows统一开发环境的基础-Chocolatey](https://zhuanlan.zhihu.com/p/53421288)\n\n[使用mkcert工具生成受信任的SSL证书，解决局域网本地https访问问题](https://blog.csdn.net/qq_45392321/article/details/119676301)\n\n---\n\n安装`choco`\n\n> 以`管理员`权限运行`powershell`：\n```\nSet-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\n```\n\n\n\n## 安装`mkcert`\n```\nchoco install mkcert -y\n```\n\n## 将CA证书加入本地可信CA\n> 将mkcert使用的根证书加入了本地可信CA中，以后由该CA签发的证书在本地都是可信的\n```\nmkcert -install\n```\n\n查看CA证书存放位置\n```\nmkcert -CAROOT\n```\n\n\n## `mkcert` 生成自签证书\n> 多个域名/IP用空格分隔\n\n`example.com`是示例域名\n\n`localhost`,`127.0.0.1`,`::1`是示例ip地址\n```\nmkcert example.com localhost 127.0.0.1 ::1\n```\n\n> 证书文件: localhost+1.pem\n> \n> 密钥文件：localhost+1-key.pem\n\n## 自签名证书文件使用\n\n[vue项目，uniapp项目本地调试开启https，加载本地证书](https://blog.csdn.net/charlie_y/article/details/133066515)\n\n\n### vue2\n文件：vue.config.js\n```\nconst path = require('path')\nconst fs = require('fs')\nmodule.exports = {\n  devServer: {\n    open: true,\n    https: {\n      cert: fs.readFileSync(path.join(__dirname, 'src/ssl/cert.crt')),\n      key: fs.readFileSync(path.join(__dirname, 'src/ssl/cert.key'))\n    }\n  }\n}\n\n```\n\n### vue3\n文件：vite.config.js\n```\nimport { defineConfig } from 'vite'\nimport vue from '@vitejs/plugin-vue'\nconst fs = require('fs')\nconst path = require('path')\nexport default defineConfig({\n  plugins: [vue()],\n  resolve: {\n    alias: {\n      '@': path.join(__dirname, 'src')\n    }\n  },\n  server: {\n    open: true,\n    https: {\n      // 主要是下面两行的配置文件，不要忘记引入 fs 和 path 两个对象\n      cert: fs.readFileSync(path.join(__dirname, 'src/ssl/cert.crt')),\n      key: fs.readFileSync(path.join(__dirname, 'src/ssl/cert.key'))\n    }\n  }\n})\n\n```\n\n### uniapp \n将证书的密钥复制到此处，然后重启uniapp即可\n```\n// manifest.json\n\"h5\" : {\n        \"devServer\" : {\n            \"https\" : {\n                \"cert\" : \"-----BEGIN CERTIFICATE-----\",\n                \"key\" : \"-----BEGIN RSA PRIVATE KEY--\"\n            },\n            \"proxy\" : {}\n        },\n        \"async\" : {\n            \"delay\" : \"10000\"\n        },\n        \"router\" : {\n            \"base\" : \"./\"\n        }\n    },\n\n```","categories":["技术博客"],"tags":["choco","mkcert"]},{"title":"静态变量用什么修饰呢?有什么作用?","url":"//39404.html","content":"\n`static`关键字修饰\n","categories":["技术博客"]},{"title":"Linux下部署Mysql5.6（非Docker方式）","url":"//5089.html","content":"\n## Linux下安装mysql 5.6版本\n\n下载安装包\n\n[下载安装包 mysql-5.6.40-linux-glibc2.12-x86_64.tar.gz](https://dev.mysql.com/get/Downloads/MySQL-5.6/mysql-5.6.36-linux-glibc2.5-x86_64.tar.gz)\n\n卸载系统自带`Mariadb`\n```\nrpm -qa|grep mariadb\n```\n```\nrpm -e --nodeps 文件名\n```\n\n删除etc目录下的my.cnf文件（如果没有就直接新建，就是跳过这个步骤）\n```\nrm /etc/my.cnf\n```\n\n创建mysql用户组\n```\ngroupadd mysql\n```\n\n创建mysql用户并加入mysql用户组\n```\nuseradd -g mysql mysql\n```\n\n下载的二进制压缩包放到/usr/local/目录下，并解压缩\n```\ntar -zxvf mysql-5.6.36-linux-glibc2.5-x86_64.tar.gz\n```\n\n重命名为mysql\n```\nmv mysql-5.6.36-linux-glibc2.5-x86_64 mysql\n```\n\n目录/etc/下创建my.cnf配置文件\n```\n[mysql]\n \n# 设置mysql客户端默认字符集\n \ndefault-character-set=utf8\n \nsocket=/var/lib/mysql/mysql.sock\n \n[mysqld]\n \nskip-name-resolve\n \n#设置3306端口\n \nport=3306\n \nsocket=/var/lib/mysql/mysql.sock\n \n# 设置mysql的安装目录\n \nbasedir=/usr/local/mysql\n \n# 设置mysql数据库的数据的存放目录\n \ndatadir=/usr/local/mysql/data\n \n# 允许最大连接数\n \nmax_connections=200\n \n# 服务端使用的字符集默认为8比特编码的latin1字符集\n \ncharacter-set-server=utf8\n \n# 创建新表时将使用的默认存储引擎\n \ndefault-storage-engine=INNODB\n \nlower_case_table_names=1\n \nmax_allowed_packet=16M\n```\n\n创建`上述步骤`中用到的目录并将其用户设置为`mysql`\n```\nmkdir /var/lib/mysql\nmkdir /var/lib/mysql/mysql\nchown -R mysql:mysql /var/lib/mysql\nchown -R mysql:mysql /var/lib/mysql/mysql\n```\n\n进入安装mysql软件目录`/usr/local/mysql`\n\n```\ncd /usr/local/mysql\nchown -R mysql:mysql ./\n./scripts/mysql_install_db --user=mysql\nchown -R mysql:mysql data\n```\n---\n[如遇报错`安装mysql报错：please install the following Perl modules before executing /usr/bin/mysql_install_dbv`,请执行如下命令](https://blog.csdn.net/weixin_45271668/article/details/107883938)\n```\nyum -y install autoconf\n```\n\n\n## 配置mysql数据库\n\n授予my.cnf的最大权限\n```\nchown 777 /etc/my.cnf\n```\n\n设置开机自启动服务控制脚本\n> 如果没有rc.d直接输入`/etc/init.d/mysqld`即可 \n```\ncp ./support-files/mysql.server /etc/rc.d/init.d/mysqld \n```\n\n增加mysqld服务控制脚本执行权限\n```\nchmod +x /etc/rc.d/init.d/mysqld\n```\n\n将mysqld服务加入到系统服务\n```\nchkconfig --add mysqld\n```\n\n检查mysqld服务是否已经生效\n```\nchkconfig --list mysqld\n```\n\n启动msql（停止mysqld服务：service mysqld stop）\n```\nservice mysqld start\n```\n\n将mysql的bin目录加入PATH环境变量，编辑/etc/profile文件\n```\nvim /etc/profile\n```\n```\nexport PATH=$PATH:/usr/local/mysql/bin\n```\n```\nsource /etc/profile\n```\n\n以root账户登陆mysql\n> 默认是没有密码\n```\nmysql -u root -p\n```\n\n设置root用户账户密码\n```\nuse mysql;\n \nupdate user set authentication_string=password(\"123456\") where user='root';\n```\n\n![](./Linux下部署Mysql5-6（非Docker方式）/Snipaste_2024-06-24_15-52-34.png)\n\n> 上述修改密码命令不生效，则使用以下命令\n```\nUPDATE user SET Password = PASSWORD('123456') WHERE user = 'root';\n```\n\n---\n\n刷新用户权限\n```\nflush privileges\n```\n\n重启mysql服务\n\n```\nservice mysqld restart\n```\n\n设置允许远程访问\n```\nGRANT ALL PRIVILEGES ON *.* TO 'your username'@'%' IDENTIFIED BY 'your password' WITH GRANT OPTION;\n```\n\n刷新用户权限\n```\nflush privileges\n```\n","categories":["技术博客"]},{"title":"MySQL事务隔离级别？默认是什么级别？","url":"//30299.html","content":"\n\n> 参考博客：[MySQL事务隔离级别和实现原理](https://zhuanlan.zhihu.com/p/117476959)\n\n\n## 四种事务隔离级别\n- 读未提交 READ UNCOMMITTED\n- 读提交 READ COMMITTED\n- 可重复读 REPEATABLE READ\n- 串行化 SERIALIZABLE\n\n### MySQL的默认事务隔离级别\n`可重复读 REPEATABLE READ`\n\n## 不同事务隔离级别对脏读、不可重复读、幻读解决程度\n\n<table>\n<tr>\n<td>隔离级别</td><td>脏读</td><td>不可重复读</td><td>幻读</td>\n</tr>\n<tr>\n<td>读未提交</td><td>可能</td><td>可能</td><td>可能</td>\n</tr>\n<tr>\n<td>读提交</td><td>不可能</td><td>可能</td><td>可能</td>\n</tr>\n<tr>\n<td>可重复读</td><td>不可能</td><td>不可能</td><td>可能</td>\n</tr>\n<tr>\n<td>串行化</td><td>不可能</td><td>不可能</td><td>不可能</td>\n</tr>\n</table>\n","categories":["技术博客"]},{"title":"MySQL数据库两种存储引擎的区别?","url":"//65022.html","content":"\n> 参考博客：[Mysql的两种引擎的区别](https://blog.csdn.net/printwsl/article/details/80058841)\n\n\n\n简单区别介绍\n1. MyISAM是非事务安全的，而InnoDB是事务安全的\n2. MyISAM锁的粒度是表级的，而InnoDB支持行级锁\n3. MyISAM支持全文类型索引，而InnoDB不支持全文索引\n4. MyISAM相对简单，效率上要优于InnoDB，小型应用可以考虑使用MyISAM\n5. MyISAM表保存成文件形式，跨平台使用更加方便\n\n应用场景\n1. MyISAM管理非事务表，提供高速存储和检索以及全文搜索能力，如果再应用中执行大量select操作，应该选择MyISAM\n2. InnoDB用于事务处理，具有ACID事务支持等特性，如果在应用中执行大量insert和update操作，应该选择InnoDB","categories":["技术博客"]},{"title":"MySQL数据库事务","url":"//51105.html","content":"\n## 事务必须满足4个条件\n\n- A 原子性\n- C 一致性\n- I 隔离性\n- D 持久性\n\n### 原子性\n一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。\n\n### 一致性\n在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。\n\n### 隔离性 \n数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。\n\n### 持久性\n事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。\n\n\n## MYSQL 事务处理主要有两种方法\n\n### 用 BEGIN, ROLLBACK, COMMIT来实现\n- BEGIN 开始一个事务\n- ROLLBACK 事务回滚\n- COMMIT 事务确认\n\n### 直接用 SET 来改变 MySQL 的自动提交模式\n- SET AUTOCOMMIT=0 禁止自动提交\n- SET AUTOCOMMIT=1 开启自动提交\n\n","categories":["技术博客"]},{"title":"MySQL的那几个事务级别","url":"//32391.html","content":"\n[MySQL 四种事务隔离级别详解介绍](https://blog.csdn.net/justlpf/article/details/106835122  )\n\nMySQL一共有4种事务隔离级别\n1. 读未提交 Read Uncommitted\n2. 读已提交 Read Committed\n3. 可重复读 Repeatable Read\n4. 可串行化 Serializable\n\n\n<table style='width:100%;'>\n<tr>\n<td>隔离级别</td><td>脏读</td><td>不可重复读</td><td>幻读</td>\n</tr>\n<tr>\n<td>Read Uncommitted</td><td> ✔️ </td><td>✔️</td><td>✔️</td>\n</tr>\n<tr>\n<td>Read Committed</td><td>❌</td><td>✔️</td><td>✔️</td>\n</tr>\n<tr>\n<td>Repeatable Read</td><td>❌</td><td>❌</td><td>✔️</td>\n</tr>\n<tr>\n<td>Serializable</td><td>❌</td><td>❌</td><td>❌</td>\n</tr>\n</table>\n","categories":["技术博客"]},{"title":"Mysql从库故障记录","url":"//51078.html","content":"\n[mysql主从同步忽略错误](https://blog.csdn.net/weixin_45290734/article/details/118109964)\n\n[MySQL 的read_only & super_read_only](https://blog.csdn.net/Omega29/article/details/119887061)\n\n# mysql错误忽略\n\n## mysql数据库-从库忽略1条错误\n> `mysql`控制台输入命令操作,跳过错误记录\n```\nstop slave;\nset global sql_slave_skip_counter =1;\nstart slave;\n```\n\n## mysql数据库-从库忽略所有错误\n> 修改 `my.cnf` 配置文件\n\n```\nslave-skip-errors=all\n```\n\n\n# mysql设置read_only依赖执行更新问题\n> 1. 从库连接账号授权时不能指定有super或all权限\n\n> 2. 修改参数 super_read_only ，默认值为OFF，修改为ON，可以使super 用户read-only 【和mysql版本相关，低版本可能无效 】\n\n","categories":["技术博客"]},{"title":"Mysql审计日志开启","url":"//18438.html","content":"\n\n[一键开启mysql的审计功能（无需安装插件）](https://blog.csdn.net/qq_40323844/article/details/90270836)\n\n[mysql开启审计日志](https://www.cnblogs.com/xgsh/p/16643567.html)\n\n\n## 查看是否开启审计日志\n> `Mysql`默认是关闭审计日志\n\n```\nshow variables like 'gen%';\n```\n\n`OFF`表示审计日志未开启\n```\n+------------------+----------------------------------+\n| Variable_name | Value |\n+------------------+----------------------------------+\n| general_log | OFF |\n| general_log_file | /home/mysql/mysqldata/mysql.log |\n+------------------+----------------------------------+\n```\n\n\n## 临时开启审计日志\n```\nset global general_log=ON;\n```\n\n## 永久开启审计日志\n修改`my.cnf`配置文件\n```\n[mysqld]\nserver_audit_logging=on\n```\n\n重启数据库\n```\n/etc/init.d/mysqld restart \n```\n","categories":["技术博客"]},{"title":"Mysql的引擎","url":"//56579.html","content":"\n> [MySQL常用的四种引擎的介绍](https://blog.csdn.net/ademoa/article/details/79900187)\n>\n> [MySQL常见的三种存储引擎](https://blog.csdn.net/liuyunshengsir/article/details/119387178)\n\n\n\n![](./Mysql的引擎/储存引擎对别.png) \n\n![](./Mysql的引擎/MyISAM和InnoDB对比.png)\n","categories":["技术博客"]},{"title":"Mysql相关命令记录","url":"//1546.html","content":"\n# Mysql常用命令\n\n## Mysql查询库大小\n### Mysql查询各个DB库占用大小\n```\nSELECT\n\tTABLE_SCHEMA '数据库名',\n\tconcat( TRUNCATE ( sum( data_length )/ 1024 / 1024, 2 ), 'MB' ) AS '数据库大小',\n\tconcat( TRUNCATE ( sum( index_length )/ 1024 / 1024, 2 ), 'MB' ) AS '索引占用大小' \nFROM\n\tinformation_schema.TABLES \nWHERE\n\tTABLE_SCHEMA = 'krpano' \nGROUP BY\n\tTABLE_SCHEMA \nORDER BY\n\t'数据库大小' DESC;\n```\n\n### Mysql指定DB库下查询各个表Table占用大小\n```\nUSE information_schema;\n```\n```\nSELECT\n\tTABLE_SCHEMA AS '数据库名',\n\tTABLE_NAME '表名',\n\tENGINE '引擎',\n\tTABLE_ROWS '表数据行数',\n\tTABLE_COMMENT '表注释信息' \nFROM\nTABLES \nWHERE\n\tTABLE_SCHEMA = 'krpano' \nORDER BY\n\ttable_rows DESC;\n```\n\n## Mysql查询慢SQL\n\n[慢SQL参考博客](https://zhuanlan.zhihu.com/p/610040630)\n\n查询mysql进程\n```\nSHOW PROCESSLIST\n```\n\n查询指定耗时的mysql进程\n```\nSELECT\n\t* \nFROM\n\tinformation_schema.PROCESSLIST \nWHERE\n\t1 = 1 \n\tAND db = 'dbname' \n\tAND command != 'Sleep' \n\tAND time > 10\n```\n\n## Mysql批量处理慢SQL\n\n查询当前mysql进程信息\n```\nSELECT\n\t* \nFROM\n\tinformation_schema.`PROCESSLIST` \nWHERE\n\tdb = 'DB' \n\tAND command = 'Query';\n```\n\n获取需要批量kill的mysql进程信息\n> 将查询结果复制出来，然后新查询页面里批量执行即可。\n```\nSELECT\n\tconcat( \"kill \", ID, \";\" ) AS command \nFROM\n\tinformation_schema.`PROCESSLIST` \nWHERE\n\tdb = 'DB' \n\tAND command = 'Query';\n```\n\n# Mysql问题记录\n\n## MySQL出现Waiting for table metadata lock的原因以及解决方法\n\n[参考博客](https://www.cnblogs.com/digdeep/p/4892953.html)\n\nmysql控制台执行删除db库命令一直卡住，通过命令`show full processlist;`打印截图信息。\n\n![](./Mysql相关命令记录/Snipaste_2023-11-07_11-04-34.png)\n\n\n参考解决方式博客（场景二）\n```\nselect * from information_schema.innodb_trx\\G\n```\n![](./Mysql相关命令记录/Snipaste_2023-11-07_11-07-13.png)\n\n执行命令\n```\nkill 424;\n```\n\n卡住执行命令已成功执行完成，再次查看进程已无异常情况\n![](./Mysql相关命令记录/Snipaste_2023-11-07_11-08-48.png)\n\n\n# Mysql注意事项\n\n1. Navicat中MySQL提示\\G、\\g错误\n> 不能在navicat中使用`\\G`,`\\g`，会导致报错。\n\n# mysqldump命令导出SQL\n\n[mysqldump参数大全](https://www.cnblogs.com/qq78292959/p/3637135.html)\n\n\n\n携带参数项命令\n```\nmysqldump -uroot -p\"PASSWORD\" DB_NAME --tables TABLE_NAME -q --complete-insert --single-transaction > /path/xxx.sql\n```\n- PASSWORD 替换对应密码\n- DB_NAME  替换对应数据库名称\n- TABLE_NAME 替换对应表名称\n\n\n\n> - `--complete-insert` 使用完整的insert语句(包含列名称)。这么做能提高插入效率，但是可能会受到max_allowed_packet参数的影响而导致插入失败。\n> - `--single-transaction` 该选项在导出数据之前提交一个BEGIN SQL语句，BEGIN 不会阻塞任何应用程序且能保证导出时数据库的一致性状态。它只适用于多版本存储引擎，仅InnoDB。本选项和--lock-tables 选项是互斥的，因为LOCK  TABLES 会使任何挂起的事务隐含提交。要想导出大表的话，应结合使用--quick 选项。\n> - `-q` 不缓冲查询，直接导出到标准输出。默认为打开状态，使用--skip-quick取消该选项。\n\n\n不携带额外参数项命令\n```\nmysqldump -uroot -p\"PASSWORD\" DB_NAME TABLE_NAME > /path/xxx.sql\n```\n","categories":["技术博客"]},{"title":"mysql从库宕机重启恢复","url":"//34586.html","content":"\n参考博客\n\n[已安装 MySQL，但执行 mysql 命令提示命令找不到！](https://blog.csdn.net/MOESECSDN/article/details/80988263)\n\n\n[解决Mysql 主从或主主报1062错误](https://blog.csdn.net/eagle89/article/details/107157507)\n\n---\n\n## mysql命令失效\n\n```\nvim /etc/profile\n```\n\n```\nexport PATH = $PATH:/usr/local/mysql/bin\n```\n\n```\nsource /etc/profile\n```\n\n## mysql从库主键冲突\n单行跳过\n```\nstop slave; \nset global sql_slave_skip_counter =1;\nstart slave;\nshow slave status/G;\n```\n\n批量跳过\n\n```\nvim /etc/my.cnf\n```\n\n```\nslave-skip-errors = 1062\n```\n\n```\nservice mysql restart\n```\n\n\n\n","categories":["技术博客"]},{"title":"分库分表了解吗?","url":"//42625.html","content":"\n> [Mysql分库分表实战（一）——一文搞懂Mysql数据库分库分表](https://blog.csdn.net/wdcl2468/article/details/102911160)\n\n## 数据拆分的方式\n- 垂直拆分\n  - 根据业务的维度，将原本一个库中的表拆分多个表，每个库中表与原有的结构不同\n- 水平拆分\n  -  根据分片算法，将一个库拆分成多个库，每个库依旧保留原有的结构\n\n\n## 分库分表方案\n### 客户端分片\n![](./分库分表了解吗/客户端分片.png)\n\n#### 客户端分片方式\n\n##### 在应用层直接实现\n这是一种非常通用的解决方案，直接在应用层读取分片规则，解析分片规则，根据分片规则实现切分的路由逻辑，从应用层直接决定每次操作应该使用哪个数据库实例中的对应的数据库\n\n优点:\n- 实现简单\n- 切片逻辑使自己开发的,遇到问题可以快速定位\n\n缺点:\n- 代码具有一定侵入性\n- 代码耦合度比较高\n- 数据库保持的连接会比较多\n\n##### 通过定制JDBC协议实现\n\n解决[方案一](#在应用层直接实现)中的代码耦合，通过定制JDBC协议来实现（主要是针对业务逻辑层提供与JDBC一致的接口），让分库分表在JDBC的内部实现\n\n目前当当网开源的框架：Sharding JDBC 就是使用这种解决方案来实现的\n\n##### 通过定制ORM框架实现\n通过定制ORM框架来实现分库分表方案，常见的有基于Mybatis的分库分表方案的解决\n\n```\n<select id=\"selectUser\" parameterType=\"java.util.Map\" resultType=\"User\">\n      select user_id as userId,user_name as userName\n      from user_#{index}\n      where user_id = #{userId}\n</select>\n```\n\n### 代理端分片\n代理分片就是在应用层和数据库层之间添加一个代理层，把分片的路由规则配置在代理层，代理层对外提供与JDBC兼容的接口给应用层，在业务实现之后，在代理层配置路由规则即可；\n\n![](./分库分表了解吗/代理分片.png)\n\n优点:\n- 开发人员专注业务逻辑实现,分库分表配置留给代理层处理\n\n缺点:\n- 增加代理层,数据库操作多了一层网络传输,一定的性能影响\n- 维护代理层,增加硬件成本\n- 线上环境出现问题,不能及时定位,需要一定技术专家处理\n\n\n### 支持事务的分布式数据库\n\n支持分布式事务的框架，目前有OceanBase、TiDB框架，这些框架将可伸缩特定和分布式事务的实现包装到了分布式数据库内部实现，对使用者透明，使用者不需要直接控制这些特性，但是对事务的支持不如关系型数据，适合大数据日志系统、统计系统、查询系统、社交网站等\n\n## 分库分表架构设计\n<table>\n<tr>\n  <td>拆分方式</td>\n  <td>优点</td>\n  <td>缺点</td>\n</tr>\n<tr>\n  <td>垂直拆分</td>\n  <td>\n  1. 拆分后业务清晰，拆分规则明确 <br/>\n  2. 系统之间进行整合或扩展容易 <br/>\n  3. 按照成本、应用等级、应用的类型等将表放到不同的机器上，便于管理 <br/>\n  4. 便于实现动静分离、冷热分离的数据库表的设计模式 <br/>\n  5. 数据维护简单\n  </td>\n  <td>\n  1. 部分业务表无法进行关联、只能通过接口的方式来解决，提高了系统的复杂度  <br/>\n  2. 受每种业务不同的限制，存在单库性能瓶颈，对数据扩展和性能提升不友好  <br/>\n  3. 事务处理复杂 <br/>  \n  </td>\n</tr>\n<tr>\n  <td>水平拆分</td>\n  <td>\n  1. 单库单表的数据保持一定的量级，有助于性能的提高 <br/>\n  2. 切分的表的结构相同，应用层改造较少，只需要增加路由规则即可 <br/>\n  3. 提高了系统的稳定性和负载能力 <br/>  \n  </td>\n  <td>\n  1. 切分后数据是分散的，很难利用数据库的关联查询，跨库查询性能较差  <br/>\n  2. 拆分规则难以抽象  <br/>\n  3. 分片数据的一致性难以解决  <br/> \n  4. 数据扩容的难度和维护量极大  <br/> \n  </td>\n</tr>\n</table>\n\n### 垂直拆分和水平拆分具有共同点\n- 存在分布式事务问题\n- 存在跨节点join的问题\n- 存在跨节点合并排序、分页的问题\n- 存在多数据源管理的问题\n\n垂直拆分更偏向于业务拆分的过程，在技术上我们更倾向于水平切分的方案；\n\n> TODO \n","categories":["技术博客"]},{"title":"基于Mycat实现Mysql的读写分离","url":"//25030.html","content":"\n[使用Mycat实现MySQL读写分离（MySQL主从复制）](https://blog.csdn.net/guozr7/article/details/121137020)\n\n","categories":["技术博客"]},{"title":"Nginx代理转发内网Redis服务","url":"//52380.html","content":"\n[nginx代理转发内网mysql及redis](https://blog.csdn.net/weixin_45377545/article/details/115252432)\n\n\n\n## nginx编译依赖组件\n```\n./configure --with-stream \n```\n\n## nginx转发redis配置\n\n问题描述：ERROR o.s.d.r.l.RedisMessageListenerContainer.handleSubscriptionException[647] - Connection failure occurred. Restarting subscription task after 5000 ms\n\n> 注意：避免链接超时情况发生，需要设置`proxy_timeout`、`proxy_connect_timeout` 较大一些\n\n\n\n```\nstream {\n    server {\n       listen 3306;\n       proxy_connect_timeout 3600s;\n       proxy_timeout 3600s;\n       proxy_pass  ip:3306;\n    }\n}\n```\n\n\n\n","categories":["技术博客"]},{"title":"常见的SQL优化","url":"//5829.html","content":"\n> [SQL优化常用的几种方法](https://blog.csdn.net/wangzheweini/article/details/107019426)\n\n## Mysql的SQL优化关键字\n`Explain`\n\n## 常见SQL优化规则\n1. 查询优化,尽量避免全表扫描.考虑`where`及`group by`建议索引\n2. 避免在`where`的语句中使用`!=`或`<>`操作符,否则引擎将放弃索引进行全表扫描\n3. 避免在`where`的语句中进行`null`值判断,否则引擎将放弃索引进行全表扫描\n```\n#例如:\nselect id from t where num is null\n```\n4. 避免在`where`的语句中使用`or`来连接条件,否则引擎将放弃索引进行全表扫描\n  \n```\n#例如: \nselect id from t where num=10 or num=20\n#优化:\nselect id from t where num=10 union all  select id from t where num=20\n```\n\n5. 避免在`where`的语句中使用`like`关键字, 否则引擎将放弃索引进行全表扫描\n```\n#例如:\nselect id from t where name like '%abc%'\n```  \n6. 避免在`where`的语句中使用`in`或者`not in`关键字,否则引擎将放弃索引进行全表扫描\n```\n#例如:\nselect id from t where num in(1,2,3)\n\n#优化:\n#查询的数值为连续值,可以使用`between`进行优化\nselect id from t where num between 1 and 3 \n```\n\n7. 避免在`where`的语句中进行表达式操作,否则引擎将放弃索引进行全表扫描\n```\n#例如:\nselect id from t where num/2=100\n#优化: \nselect id from t where num=100*2    \n```\n   \n8. 避免在`where`的语句中对字段进行函数操作,否则引擎将放弃索引进行全表扫描\n\n```\n#例如: \nselect id from t where substring(name,1,3)='abc'  \n#优化: \nselect id from t where name like 'abc%'    \n\n#例如: \nselect id from t where datediff(day,createdate,'2005-11-30')=0    \n#优化: \nselect id from t where createdate>='2005-11-30' and createdate<'2005-12-1'\n```\n   \n\n9. 很多时候用 exists 代替 in 是一个好的选择：\n```\n#例如: \nselect num from a where num in(select num from b)\n#优化: \nselect num from a where exists(select 1 from b where num=a.num)\n```\n\n10. 任何地方都不要使用 `select * from t` ，用具体的字段列表代替`*`，不要返回用不到的任何字段  \n\n\n## 其他补充:\n\n1. **并不是所有索引对查询都有效**\nSQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引\n\n2. **索引并不是越多越好**\n索引固然可以提高相应的`select`的效率，但同时也降低了`insert`及`update`的效率，因为`insert`或`update`时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过`6`个，若太多则应考虑一些不常使用到的列上建的索引是否有必要\n\n3. **不要在 `where` 子句中的`=`左边进行函数、算术运算或其他表达式运算**\n否则系统将可能无法正确使用索引\n   \n\n4. **使用复合索引注意**   \n必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致","categories":["技术博客"]},{"title":"强制sql使用一个索引","url":"//31049.html","content":"\n> [强制sql使用一个索引](https://blog.csdn.net/muskter/article/details/79052884)\n\n## use index 建议使用索引\n> 最后到底是用不用, 还是由MySQL来决定\n>\n```\nexplain \nselect count(*) from vipshop_finance_account use INDEX(idx_user_id) \n```\n\n\n## ignore  index 忽略使用索引\n```\nexplain \nselect count(*) from vipshop_finance_account IGNORE INDEX( idx_open_wpb_status);\n```\n\n## force index 强制使用索引\n> 强制MySQL去使用这个索引. 如果用不上, 就全表. \n> \n> 如果能用上, 就一定会使用该索引\n\n```\nSELECT * from vipshop_trade_log FORCE INDEX (idx_related_tradeid) where related_tradeId>'004201509151046563846447';\n```","categories":["技术博客"]},{"title":"我一个亿的订单数据，我要去怎么去设计这个表?","url":"//28159.html","content":"","categories":["技术博客"]},{"title":"Nginx漏扫响应头缺失问题处理","url":"//42494.html","content":"\n> 主要参考博客（部分其他内容其他来源）： [nginx漏扫响应头缺失](https://blog.csdn.net/haoqi9999/article/details/123271036)\n\n## 检测到目标X-Content-Type-Options响应头缺失\n\n```\nadd_header X-Content-Type-Options nosniff;\n```\n\n## 检测到目标X-XSS-Protection响应头缺失\n\n```\nadd_header X-XSS-Protection \"1; mode=block\";\n```\n## 检测到目标Content-Security-Policy响应头缺失\n\n> [由“Content-Security-Policy“头缺失引起的总结](https://blog.csdn.net/guo15890025019/article/details/123179250)\n>\n> [HTTP Content-Security-Policy缺失，快速解决](https://blog.csdn.net/kzhzhang/article/details/116451031)\n\n**暂时不予处理、未正确配置可能导致线上js/css等资源访问异常情况发生**\n\n\n## 检测到目标服务器启用了OPTIONS方法\n\n> [OPTIONS 漏洞修复](https://blog.csdn.net/achi010/article/details/125137940)\n>\n\n```\n    location / {\n        ##### 只增加这里的配置，其他配置为默认 #####\n        ##### 增加支持 OPTIONS 方法 #####\n        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n        ##### 增加 OPTIONS 方法的返回结果 #####\n        if ($request_method = 'OPTIONS') {\n            return 204;\n        }\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n    }\n```\n\n## 检测到目标Strict-Transport-Security响应头缺失\n\n```\nadd_header Strict-Transport-Security \"max-age=63072000; includeSubdomains; preload\";\n```\n\n## 检测到目标Referrer-Policy响应头缺失\n\n```\nadd_header 'Referrer-Policy' 'origin'; \n```\n\n## 检测到目标X-Permitted-Cross-Domain-Policies响应头缺失\n\n```\nadd_header X-Permitted-Cross-Domain-Policies master-only;\n```\n\n## 检测到目标X-Download-Options响应头缺失\n\n```\nadd_header X-Download-Options \"noopen\" always;\n```\n## 点击劫持：X-Frame-Options未配置\n\n```\nadd_header X-Frame-Options SAMEORIGIN;\n```\n","categories":["技术博客"],"tags":["Nginx"]},{"title":"Nginx版本升级","url":"//6201.html","content":"\nNginx版本升级\n\n[CentOs7安装nginx【详细】](https://blog.csdn.net/qq_45316925/article/details/128957728)\n\n[nginx版本升级：从nginx1.16.1升级到nginx1.18.0，以及升级失败如何回退](https://www.cnblogs.com/FengGeBlog/p/13536009.html)\n\n---\n\n# Nginx安装\n\n安装Nginx所需要环境\n```\nyum -y install gcc pcre pcre-devel zlib zlib-devel openssl openssl-devel\n```\n\n创建nginx目录\n```\nmkdir -p /usr/local/nginx\n```\n\n下载nginx包\n```\nwget https://nginx.org/download/nginx-1.18.0.tar.gz\n```\n\n解压缩\n```\ntar -zxvf nginx-1.18.0.tar.gz\n```\n\n进入目录并配置nginx\n```\ncd nginx-1.18.0/\n```\n\n> 带https模块\n```\n./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module\n```\n\n- `--prefix`属于nginx编译后目录位置\n\n编译&安装\n\n```\nmake\n```\n\n```\nmake install \n```\n\n启动/关闭nginx服务\n> 在`/usr/local/nginx/sbin`目录下\n```\n./nginx\n```\n\n```\n#快速关闭nginx（立即关闭不等待未处理完请求）\n./nginx -s stop\n\n#优雅关闭nginx（等待请求处理完）\n./nginx -s quit \n```\n\nNginx服务启动成功截图\n![](./Nginx版本升级/Snipaste_2023-11-30_21-13-02.png)\n\n---\n\n# Nginx版本升级\n查看旧版本`Nginx1.18`版本\n> 注意`V`大写\n```\n./nginx -V\n```\n\n以下是旧的nginx配置，在新的nginx配置需要如下参数项：\n> configure arguments: `--prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module`\n\n![](./Nginx版本升级/Snipaste_2023-11-30_20-43-41.png)\n（ps：截图来源其他nginx服务器配置，仅参考）\n\n\n配置新的`Nginx1.24`版本\n> 新下载的`Nginx1.24`在执行`./configure`的时候`--prefix`指定的目录是需要指向**旧的Nginx1.18**\n```\n./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module\n```\n\n执行编译\n> 注意：仅执行编译`make`,升级不需要执行`make install`命令\n```\n#make编译之后，在nginx1.24的objs目录下才有nginx执行文件\nmake\n```\n\n平滑升级,将旧Nginx1.18的文件备份\n> 此处操作在目录：`/usr/local/nginx`下\n```\ncp nginx{,.bak}\n```\n\n使用新的`Nginx1.24`的nginx文件强制覆盖旧的`Nginx1.18`的nginx文件\n> 此处操作在目录`nginx-1.24.0/objs`下\n```\ncp -f nginx /usr/local/nginx/sbin/nginx\n```\n\n查看当前nginx进程\n> 此处nginx进程属于旧的`Nginx1.18`\n```\nps aux | grep nginx\n```\n![](./Nginx版本升级/Snipaste_2023-11-30_21-34-29.png)\n\n对nginx的父进程号发送`USR2`信号\n> 设定新的子进程开始接收用户的访问请求,旧的不再接受用户的访问请求\n\n```\nkill -USR2 8559\n```\n\n再次查看nginx进程\n```\nps aux | grep nginx\n```\n![](./Nginx版本升级/Snipaste_2023-11-30_21-37-56.png)\n\n\n可查看旧进程依旧处于监听状态\n> （当前步骤可忽略，仅表示当前旧nginx进程依然存在）\n```\nlsof -p 8559 | grep LISTEN\n```\n\n关闭旧nginx进程\n> `worker`进程被关闭\n```\nkill -WINCH 8559\n```\n\n**确定升级没有任何问题的话，把master进程给关闭**\n> 注意：是确认无误后才执行操作，否则将导致平滑升级无法回退情况发生\n```\nkill -QUIT 8559\n```\n\n再次查看Nginx版本\n> 此处操作在目录：`/usr/local/nginx`下\n```\n./nginx -V\n```\n![](./Nginx版本升级/Snipaste_2023-11-30_21-46-13.png)\n\n---\n\nNginx升级失败，版本回退\n\n1. 强制覆盖nginx文件，使用旧的版本的nginx\n> 此处操作在目录：`/usr/local/nginx`下\n```\nmv nginx.bak  nginx\n```\n\n\n2. 旧版本nginx进程发送HUP信号\n> 注意: 这是旧版本的nginx进程pid号\n```\nkill -HUP 8559\n```\n\n截图为`旧nginx`已唤起的`worker`进程\n![](./Nginx版本升级/Snipaste_2023-11-30_21-53-41.png)\n\n3. 新版本的服务停止接收用户请求\n\n```\nkill -USR2 8603\n```\n\n4. 进行新版本服务进程的关闭\n\n```\nkill -WINCH 8603\n```\n\n5. kill掉nginx新进程\n\n```\nkill -QUIT 8603\n```","categories":["技术博客"]},{"title":"npm的设置cnpm","url":"//58600.html","content":"\n> 参考博客：[npm的设置cnpm](https://www.jianshu.com/p/2c0df2c25b29)\n\n淘宝 npm 地址： http://npm.taobao.org/\n\n## 临时使用\n```\nnpm --registry https://registry.npm.taobao.org install express\n```\n## 永久使用\n```\nnpm config set registry https://registry.npm.taobao.org\n```\n验证是否生效\n```\nnpm config get registry\n```\n\n## 通过`cnpm`使用\n```\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n\n## 关闭npm的https\n```\nnpm config set strict-ssl false\n```","categories":["技术博客"],"tags":["npm","cnpm"]},{"title":"Linux下安装字体文件","url":"//17769.html","content":"\n\n[如何给Linux安装新的字体](https://blog.csdn.net/ouyangzhenxin/article/details/82387632)\n\n\n## 上传文件至linux字体目录下\n\n> `linux的字体目录：/usr/share/fonts`\n\n```\ncd /usr/share/fonts\n```\n\n可选择建立目录\n```\nmkdir custom\n```\n\n复制需要安装字体文件到字体目录下\n```\ncp /root/*.ttf /usr/share/fonts/custom\n```\n\n## 加载刷新字体\n```\nfc-cache -fv\n```\n\n## 查询已安装字体\n```\nfc-list\n```","categories":["技术博客"]},{"title":"Linux安装PHP8","url":"//3079.html","content":"\n\n[PHP8安装(centos7环境)](https://blog.csdn.net/weixin_45661908/article/details/123377640)\n\n[CentOS 7上编译安装PHP 8.1及Nginx 配置支持PHP](https://blog.csdn.net/weixin_43529253/article/details/122134710)\n\n## Linux下安装PHP8环境\n\n### 安装编译环境\n安装编译环境依赖包\n```\nyum -y install gcc gcc-c++ glibc automake autoconf libtool make\n```\n安装编译 php 依赖库\n```\n yum -y install libxslt-devel libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libxml2 libxml2-devel zlib zlib-devel glibc glibc-devel glib2 bzip2-devel ncurses ncurses-devel curl curl-devel e2fsprogs e2fsprogs-devel krb5-devel libidn libidn-devel openssl openssl-devel sqlite-devel libcurl-devel libpng-devel libjpeg-devel freetype-devel libicu-devel oniguruma-devel libxslt-devel\n```\n\n下载PHP包\n```\nwget https://www.php.net/distributions/php-8.1.9.tar.gz\n```\n```\ntar -xzxvf php-8.1.9.tar.gz\n```\n\n配置PHP环境\n```\n./configure \\\n    --prefix=/usr/local/php8 \\\n    --with-config-file-path=/usr/local/php8 \\\n    --with-config-file-scan-dir=/usr/local/php8/php.d \\\n    --enable-mysqlnd \\\n    --with-mysqli \\\n    --with-pdo-mysql \\\n    --enable-fpm \\\n    --with-fpm-user=nginx \\\n    --with-fpm-group=nginx \\\n    --with-gd \\\n    --with-iconv \\\n    --with-zlib \\\n    --enable-xml \\\n    --enable-shmop \\\n    --enable-sysvsem \\\n    --enable-inline-optimization \\\n    --enable-mbregex \\\n    --enable-mbstring \\\n    --enable-ftp \\\n    --with-openssl \\\n    --enable-pcntl \\\n    --enable-sockets \\\n    --with-xmlrpc \\\n    --enable-zip \\\n    --enable-soap \\\n    --without-pear \\\n    --with-gettext \\\n    --enable-session \\\n    --with-curl \\\n    --with-jpeg-dir \\\n    --with-freetype-dir \\\n    --enable-opcache\n```\n\n编译安装 php\n> 采用两个核心编译\n```\nmake -j 2 && make install \n```\n\n## PHP配置文件编辑\n\n### php.ini\n创建php.ini配置文件\n\n```\ncp php.ini-production /usr/local/php8/etc/php.ini\n```\n\n修改php.ini配置文件\n```\nvim /usr/local/php8/etc/php.ini\n```\n```\nsession.save_path = \"/tmp\" #将注释打开\n```\n\n### php-fpm\n设置php-fpm配置文件\n```\ncd /usr/local/php8/etc\n```\n```\ncp php-fpm.conf.default php-fpm.conf\n```\n```\nvim php-fpm.conf\n```\n> 将注释取消并修改\n```\npid = /var/run/php-fpm.pid\n```\n\nphp-fpm参数优化\n```\ncd /usr/local/php8/etc/php-fpm.d/\n```\n```\ncp www.conf.default www.conf\n```\n> 删除文件中;的注释和空格\n```\nsed -i '/^;.*/d;/^$/d'  www.conf\n```\n> 删除文件中的 #注释\n```\nsed -i '/#.*/d' www.conf\n```\n\n> 优化后\n```\n[www]\nuser = nginx\ngroup = nginx\nlisten = 127.0.0.1:9000 #php本机不用改，分开则加\n；listen.allowed_clients=nginx Ip地址 #nginx和php同一个机器不用加\npm.max_children = 100\npm.start_servers = 20\npm.min_spare_servers = 5\npm.max_spare_servers = 35\n```\n\n#### 创建php-fpm执行用户\n\n创建nginx用户\n[增加nginx用户，并修改nginx服务的默认用户](https://blog.csdn.net/guo_qiangqiang/article/details/107592269)\n```\nuseradd nginx -s /sbin/nologin -M\n```\n\n### php-fpm相关命令\n\n#### php-fpm 启动与检查\n启动php-fpm\n```\n/usr/local/php8/sbin/php-fpm\n```\n检查 php-fpm 是否成功启动\n```\nps aux | grep php-fpm\n```\n\n#### php-fpm 环境变量配置\n配置 php-fpm 系统环境变量\n```\nvim /etc/profile.d/php.sh\n```\n```\nexport PHP_HOME=/usr/local/php8\nexport PATH=$PATH:$PHP_HOME/bin:$PHP_HOME/sbin\n```\n```\nsource /etc/profile.d/php.sh\n```\n\n#### php-fpm 开机自启动\n配置 php-fpm 开机自启动\n```\nvim /lib/systemd/system/php-fpm.service\n```\n```\n[Unit]\nDescription=php-fpm\nAfter=network.target\n[Service]\nType=forking\nExecStart=/usr/local/php8/sbin/php-fpm\nExecStop=/bin/pkill -9 php-fpm\nPrivateTmp=true\n[Install]\nWantedBy=multi-user.target\n```\n```\n systemctl daemon-reload\n```\n\n停止 php-fpm\n```\npkill php-fpm\n```\n用 systemctl 启动 php-fpm\n```\nsystemctl start php-fpm.service\n```\n设置 php-fpm 开机启动\n```\nsystemctl enable php-fpm.service\n```\n\n#### php-fpm 其他管理命令\n```\nsystemctl stop php-fpm.service \t\t\t# 停止服务\nsystemctl restart php-fpm.service \t\t# 重新启动服务\nsystemctl status php-fpm.service\t\t# 查看服务当前状态\nsystemctl disable php-fpm.service \t\t# 停止开机自启动\n```\n\n## Nginx 配置支持PHP\n\n[nginx一招配置，帮你快速隐藏php后缀名](https://zhuanlan.zhihu.com/p/110901814)\n\n配置文件\n```\nserver\n{\n\tlisten 80;\n\tserver_name localhost;\n\tindex index.html index.htm index.php;\n\troot /usr/local/nginx/html;\n\n        location / {\n                try_files $uri $uri/ $uri.php$is_args$args;\n        }\n\n\tlocation ~ \\.php$\n\t{\n\n                if ($request_uri ~ ^/([^?]*)\\.php($|\\?)) {   \n                  return 302 /$1$is_args$args; \n                }\n\n\t\tinclude fastcgi_params;        #指定nginx连接php-fpm的常量\n\t\tfastcgi_pass 127.0.0.1:9000;    #连接php-fpm的地址和端口\n\t\tfastcgi_index index.php;        #指定默认页面\n\t\tfastcgi_param SCRIPT_FILENAME /usr/local/nginx/html$fastcgi_script_name; #指定站点根目录\n\t}\n}\n```\n\n\n\n验证文件\n```\ncd /usr/local/nginx/html/\n```\n```\nvim index.php\n```\n```\n<?php\nphpinfo();\n?>\n```\n\n重启php-frm\n```\nsystemctl restart php-fpm.service\n```\n\n重载nginx\n```\nsystemctl reload nginx\n\n/usr/local/nginx/sbin/./nginx -t\n```\n\n访问验证\n```\nhttp://127.0.0.1:80/index.php\n```\n\n\n## 问题记录\n\n### 环境依赖问题\n#### `oniguruma`依赖不存在\n![](./Linux安装PHP8/Snipaste_2024-03-08_11-05-29.png)\n\n[解决 yum install oniguruma oniguruma-devel 安装不生效问题](https://www.cnblogs.com/lyc94620/p/13201379.html)\n\n> Centos 7 安装 oniguruma oniguruma-devel\n\n\n```\nyum -y install http://down.24kplus.com/linux/oniguruma/oniguruma-6.7.0-1.el7.x86_64.rpm\n```\n```\nyum -y install http://down.24kplus.com/linux/oniguruma/oniguruma-devel-6.7.0-1.el7.x86_64.rpm\n```\n\n#### `libzip`依赖不存在\n\n![](./Linux安装PHP8/Snipaste_2024-03-08_11-08-36.png)\n\n[报错：Package requirements (libzip ＞= 0.11 libzip != 1.3.1 libzip != 1.7.0) were not met](https://blog.csdn.net/robin_cai/article/details/118151747)\n\n\n[libzip 1.2.0](https://libzip.org/news/release-1.2.0.html)\n```\nwget https://libzip.org/download/libzip-1.2.0.tar.gz\n```\n\n```\ntar zxvf libzip-1.2.0.tar.gz\n```\n\n```\n./configure\nmake && make install\nexport PKG_CONFIG_PATH=\"/usr/local/lib/pkgconfig/\" \n```\n\n\n#### libxml-2.0 ＞= 2.7.6\n> 系统环境：Rocky Linux release 9.3 (Blue Onyx)\n\n\n[执行命令./configure --prefi...时报configure: error: Package requirements (libxml-2.0 ＞= 2.7.6) were not me](https://blog.csdn.net/have_a_cat/article/details/115208121)\n```\nyum install libxml2-devel\n```\n\n#### openssl >= 1.0.2\n> 系统环境：Rocky Linux release 9.3 (Blue Onyx)\n\n[Rocky Linux 安装 OpenSSL 1.1.1 ](https://www.cnblogs.com/eagle6688/p/17471170.html) - 部分参考\n\n[Installing OpenSSL 3.x on Rocky/Alma/CentOS/RHEL 8](https://computingforgeeks.com/installing-openssl-3-x-on-rocky-alma-centos-rhel-8/) - 部分参考\n\n更新\n```\nsudo dnf update -y\n```\n\n安装\n```\nsudo dnf install -y make gcc perl-core pcre-devel wget zlib-devel\n```\n\n---\n\n\n下载openSSL\n```\nwget https://ftp.openssl.org/source/openssl-1.1.1u.tar.gz\n```\n\n配置\n```\n./config --prefix=/usr/local/openssl --openssldir=/usr/local/openssl\n```\n\n安装\n```\nmake -j $(nproc) && make install\n```\n\n读取配置\n```\nsudo ldconfig\n```\n\n添加环境变量\n```\nsudo tee /etc/profile.d/openssl.sh<<EOF\nexport PATH=/usr/local/openssl/bin:\\$PATH\nexport LD_LIBRARY_PATH=/usr/local/openssl/lib:/usr/local/openssl/lib64:\\$LD_LIBRARY_PATH\nEOF\n```\n\n刷新环境变量\n```\nsource /etc/profile.d/openssl.sh\n```\n\n[执行命令./configure --prefi...时报Package ‘openssl‘, required by ‘virtual:world‘, not found](https://blog.csdn.net/have_a_cat/article/details/115208594)\n\n```\nyum install openssl-devel -y\n```\n\n#### sqlite3 >= 3.7.7\n> 系统环境：Rocky Linux release 9.3 (Blue Onyx)\n\n\nconfigure: error: Package requirements (sqlite3 >= 3.7.7) were not met:\nPackage 'sqlite3', required by 'virtual:world', not found\n\n[configure: error: Package requirements (sqlite3 」 3.7.4) were not met:](https://blog.csdn.net/qq_35078688/article/details/118433729)\n\n```\nyum -y install sqlite-devel\n```\n\n#### libcurl\n> 系统环境：Rocky Linux release 9.3 (Blue Onyx)\n\n\n[执行命令./configure --prefi...时报Package ‘libcurl‘, required by ‘virtual:world‘, not found](https://blog.csdn.net/have_a_cat/article/details/115208944)\n\n```\nyum install libcurl-devel -y \n```\n\n#### oniguruma\n> 系统环境：Rocky Linux release 9.3 (Blue Onyx)\n\nPackage 'oniguruma', required by 'virtual:world', not found\n\n\n[oniguruma-6.9.6](https://rockylinux.pkgs.org/9/rockylinux-appstream-x86_64/oniguruma-6.9.6-1.el9.5.x86_64.rpm.html)\n\n[oniguruma-devel-6.9.6](https://rockylinux.pkgs.org/9/rockylinux-devel-x86_64/oniguruma-devel-6.9.6-1.el9.5.x86_64.rpm.html)\n\n```\nyum install -y https://dl.rockylinux.org/pub/rocky/9/AppStream/x86_64/os/Packages/o/oniguruma-6.9.6-1.el9.5.x86_64.rpm\n```\n```\nyum install -y https://dl.rockylinux.org/pub/rocky/9/devel/x86_64/os/Packages/o/oniguruma-devel-6.9.6-1.el9.5.x86_64.rpm\n```\n\n### nginx启动报错\n[解决nginx启动报错nginx: [emerg] open() “/var/run/nginx/nginx.pid“ failed (2: No such file or directory)](https://blog.csdn.net/zhaojie911272507/article/details/107882191)\n\n采取`方法一`\n\n\n### 接口错误响应\n[PHP出现“headers already sent”原因及解决方案](https://blog.csdn.net/change518/article/details/8716635)\n\n错入日志：\n`Warning: Cannot modify header information - headers already sent by ***`\n![](./Linux安装PHP8/Snipaste_2024-03-08_14-55-17.png)\n\n检查是否使用windows下的notepad编辑修改了php文件,php不支持UTF8编码文件的BOM头，当php文件头部出现BOM时候会导致内容被发送。\n","categories":["技术博客"]},{"title":"宝塔部署PHP项目","url":"//3589.html","content":"\n[关于宝塔中的php不能访问的问题](https://blog.csdn.net/superior_yong/article/details/98624726)\n\n[MySQL错误-this is incompatible with sql_mode=only_full_group_by完美解决方案](https://blog.csdn.net/u012660464/article/details/113977173)\n\n\n---\n\n项目部署环境配置：\n\n- php 8.0以上\n- mysql 8.0以上\n\n项目文件\n- 后端：PHPAPI文件夹（通过`宝塔`部署发布服务）\n- 前端：signalapp文件夹\n\n\n## 宝塔\n\n> 下载宝塔6.x版本即可\n- 5.x版本没有php8.0\n- 7.x版本是最新发布的，目前不建议最新使用\n\n[下载页面](https://www.bt.cn/bbs/forum.php?mod=forumdisplay&fid=2&filter=typeid&typeid=1)\n\n![](./宝塔部署PHP项目/Snipaste_2024-02-22_15-21-08.png)\n\n\n### 安装软件\n初次打开会弹窗安装相关软件，我这里只勾选了`nginx 1.21`+`php 8.0`,数据库`mysql`我使用的是云数据库。\n\n### 配置注意\n\n#### 虚拟机/本地环境部署宝塔注意\n[关于宝塔中的php不能访问的问题](https://blog.csdn.net/superior_yong/article/details/98624726)\n\n> 删除配置网站目录下`user.ini`文件。\n\n例：删除`C:\\wwwroot\\127.0.0.1\\`下的`user.ini`文件，即可本地环境访问网站。\n\n#### 网站目录配置\n\n> 1.`php`文件路径格式为：`C:\\wwwroot\\127.0.0.1\\PHPAPI\\api\\login.php`\n> 2.浏览器地址栏URL访问地址为`http://127.0.0.1/api/login.php`\n\n![](./宝塔部署PHP项目/Snipaste_2024-02-22_15-29-20.png)\n\n#### PHP版本配置\n\n![](./宝塔部署PHP项目/Snipaste_2024-02-22_15-27-40.png)\n\n\n## 宝塔Linux环境部署\n\nPHP项目上传文件接口报错\n![](./宝塔部署PHP项目/image.png)\n\n[linux遇到目录权限问题mkdir(): Permission denied 解决办法](https://blog.csdn.net/qq_34851243/article/details/101062091)\n```\nchmod -R 777 /www/wwwroot/XXXXIPXXXX/PHPAPI/api/\n```\n\n---\n\n\n## win10 + PHP 8.3 + Nginx 1.24\n\n[参考博客](https://www.cnblogs.com/caiji/p/16632856.html)\n\n### php 8.3 安装\n\nPHP命令行启动\n```\n#切换进入目录\ncd C:\\env\\php8\\php-8.3.3-nts-Win32-vs16-x64 \n```\n```\n#启动 php-cgi.exe\nphp-cgi.exe -b 127.0.0.1:9000 -c php.ini \n```\n\n`php.ini`配置文件沿用的`宝塔`的配置文件\n\n![](./宝塔部署PHP项目/Snipaste_2024-03-08_10-00-21.png)\n> 注意：我这里一处配置项依赖报错，我在php.ini文件中已注释\n`;extension=php_psr.dll`\n\n\n\n```\n[PHP]\n\n;;;;;;;;;;;;;;;;;;;\n; About php.ini   ;\n;;;;;;;;;;;;;;;;;;;\n; PHP's initialization file, generally called php.ini, is responsible for\n; configuring many of the aspects of PHP's behavior.\n\n; PHP attempts to find and load this configuration from a number of locations.\n; The following is a summary of its search order:\n; 1. SAPI module specific location.\n; 2. The PHPRC environment variable. (As of PHP 5.2.0)\n; 3. A number of predefined registry keys on Windows (As of PHP 5.2.0)\n; 4. Current working directory (except CLI)\n; 5. The web server's directory (for SAPI modules), or directory of PHP\n; (otherwise in Windows)\n; 6. The directory from the --with-config-file-path compile time option, or the\n; Windows directory (usually C:\\windows)\n; See the PHP docs for more specific information.\n; http://php.net/configuration.file\n\n; The syntax of the file is extremely simple.  Whitespace and lines\n; beginning with a semicolon are silently ignored (as you probably guessed).\n; Section headers (e.g. [Foo]) are also silently ignored, even though\n; they might mean something in the future.\n\n; Directives following the section heading [PATH=/www/mysite] only\n; apply to PHP files in the /www/mysite directory.  Directives\n; following the section heading [HOST=www.example.com] only apply to\n; PHP files served from www.example.com.  Directives set in these\n; special sections cannot be overridden by user-defined INI files or\n; at runtime. Currently, [PATH=] and [HOST=] sections only work under\n; CGI/FastCGI.\n; http://php.net/ini.sections\n\n; Directives are specified using the following syntax:\n; directive = value\n; Directive names are *case sensitive* - foo=bar is different from FOO=bar.\n; Directives are variables used to configure PHP or PHP extensions.\n; There is no name validation.  If PHP can't find an expected\n; directive because it is not set or is mistyped, a default value will be used.\n\n; The value can be a string, a number, a PHP constant (e.g. E_ALL or M_PI), one\n; of the INI constants (On, Off, True, False, Yes, No and None) or an expression\n; (e.g. E_ALL & ~E_NOTICE), a quoted string (\"bar\"), or a reference to a\n; previously set variable or directive (e.g. ${foo})\n\n; Expressions in the INI file are limited to bitwise operators and parentheses:\n; |  bitwise OR\n; ^  bitwise XOR\n; &  bitwise AND\n; ~  bitwise NOT\n; !  boolean NOT\n\n; Boolean flags can be turned on using the values 1, On, True or Yes.\n; They can be turned off using the values 0, Off, False or No.\n\n; An empty string can be denoted by simply not writing anything after the equal\n; sign, or by using the None keyword:\n\n; foo =         ; sets foo to an empty string\n; foo = None    ; sets foo to an empty string\n; foo = \"None\"  ; sets foo to the string 'None'\n\n; If you use constants in your value, and these constants belong to a\n; dynamically loaded extension (either a PHP extension or a Zend extension),\n; you may only use these constants *after* the line that loads the extension.\n\n;;;;;;;;;;;;;;;;;;;\n; About this file ;\n;;;;;;;;;;;;;;;;;;;\n; PHP comes packaged with two INI files. One that is recommended to be used\n; in production environments and one that is recommended to be used in\n; development environments.\n\n; php.ini-production contains settings which hold security, performance and\n; best practices at its core. But please be aware, these settings may break\n; compatibility with older or less security conscience applications. We\n; recommending using the production ini in production and testing environments.\n\n; php.ini-development is very similar to its production variant, except it is\n; much more verbose when it comes to errors. We recommend using the\n; development version only in development environments, as errors shown to\n; application users can inadvertently leak otherwise secure information.\n\n; This is the php.ini-development INI file.\n\n;;;;;;;;;;;;;;;;;;;\n; Quick Reference ;\n;;;;;;;;;;;;;;;;;;;\n; The following are all the settings which are different in either the production\n; or development versions of the INIs with respect to PHP's default behavior.\n; Please see the actual settings later in the document for more details as to why\n; we recommend these changes in PHP's behavior.\n\n; display_errors\n;   Default Value: On\n;   Development Value: On\n;   Production Value: Off\n\n; display_startup_errors\n;   Default Value: Off\n;   Development Value: On\n;   Production Value: Off\n\n; error_reporting\n;   Default Value: E_ALL & ~E_NOTICE & ~E_STRICT & ~E_DEPRECATED\n;   Development Value: E_ALL\n;   Production Value: E_ALL & ~E_DEPRECATED & ~E_STRICT\n\n; html_errors\n;   Default Value: On\n;   Development Value: On\n;   Production value: On\n\n; log_errors\n;   Default Value: Off\n;   Development Value: On\n;   Production Value: On\n\n; max_input_time\n;   Default Value: -1 (Unlimited)\n;   Development Value: 60 (60 seconds)\n;   Production Value: 60 (60 seconds)\n\n; output_buffering\n;   Default Value: Off\n;   Development Value: 4096\n;   Production Value: 4096\n\n; register_argc_argv\n;   Default Value: On\n;   Development Value: Off\n;   Production Value: Off\n\n; request_order\n;   Default Value: None\n;   Development Value: \"GP\"\n;   Production Value: \"GP\"\n\n; session.gc_divisor\n;   Default Value: 100\n;   Development Value: 1000\n;   Production Value: 1000\n\n; session.sid_bits_per_character\n;   Default Value: 4\n;   Development Value: 5\n;   Production Value: 5\n\n; short_open_tag\n;   Default Value: On\n;   Development Value: Off\n;   Production Value: Off\n\n; variables_order\n;   Default Value: \"EGPCS\"\n;   Development Value: \"GPCS\"\n;   Production Value: \"GPCS\"\n\n;;;;;;;;;;;;;;;;;;;;\n; php.ini Options  ;\n;;;;;;;;;;;;;;;;;;;;\n; Name for user-defined php.ini (.htaccess) files. Default is \".user.ini\"\n;user_ini.filename = \".user.ini\"\n\n; To disable this feature set this option to an empty value\n;user_ini.filename =\n\n; TTL for user-defined php.ini files (time-to-live) in seconds. Default is 300 seconds (5 minutes)\n;user_ini.cache_ttl = 300\n\n;;;;;;;;;;;;;;;;;;;;\n; Language Options ;\n;;;;;;;;;;;;;;;;;;;;\n\n; Enable the PHP scripting language engine under Apache.\n; http://php.net/engine\nengine = On\n\n; This directive determines whether or not PHP will recognize code between\n; <? and ?> tags as PHP source which should be processed as such. It is\n; generally recommended that <?php and ?> should be used and that this feature\n; should be disabled, as enabling it may result in issues when generating XML\n; documents, however this remains supported for backward compatibility reasons.\n; Note that this directive does not control the <?= shorthand tag, which can be\n; used regardless of this directive.\n; Default Value: On\n; Development Value: Off\n; Production Value: Off\n; http://php.net/short-open-tag\nshort_open_tag = On\n\n; The number of significant digits displayed in floating point numbers.\n; http://php.net/precision\nprecision = 14\n\n; Output buffering is a mechanism for controlling how much output data\n; (excluding headers and cookies) PHP should keep internally before pushing that\n; data to the client. If your application's output exceeds this setting, PHP\n; will send that data in chunks of roughly the size you specify.\n; Turning on this setting and managing its maximum buffer size can yield some\n; interesting side-effects depending on your application and web server.\n; You may be able to send headers and cookies after you've already sent output\n; through print or echo. You also may see performance benefits if your server is\n; emitting less packets due to buffered output versus PHP streaming the output\n; as it gets it. On production servers, 4096 bytes is a good setting for performance\n; reasons.\n; Note: Output buffering can also be controlled via Output Buffering Control\n;   functions.\n; Possible Values:\n;   On = Enabled and buffer is unlimited. (Use with caution)\n;   Off = Disabled\n;   Integer = Enables the buffer and sets its maximum size in bytes.\n; Note: This directive is hardcoded to Off for the CLI SAPI\n; Default Value: Off\n; Development Value: 4096\n; Production Value: 4096\n; http://php.net/output-buffering\noutput_buffering = 4096\n\n; You can redirect all of the output of your scripts to a function.  For\n; example, if you set output_handler to \"mb_output_handler\", character\n; encoding will be transparently converted to the specified encoding.\n; Setting any output handler automatically turns on output buffering.\n; Note: People who wrote portable scripts should not depend on this ini\n;   directive. Instead, explicitly set the output handler using ob_start().\n;   Using this ini directive may cause problems unless you know what script\n;   is doing.\n; Note: You cannot use both \"mb_output_handler\" with \"ob_iconv_handler\"\n;   and you cannot use both \"ob_gzhandler\" and \"zlib.output_compression\".\n; Note: output_handler must be empty if this is set 'On' !!!!\n;   Instead you must use zlib.output_handler.\n; http://php.net/output-handler\n;output_handler =\n\n; URL rewriter function rewrites URL on the fly by using\n; output buffer. You can set target tags by this configuration.\n; \"form\" tag is special tag. It will add hidden input tag to pass values.\n; Refer to session.trans_sid_tags for usage.\n; Default Value: \"form=\"\n; Development Value: \"form=\"\n; Production Value: \"form=\"\n;url_rewriter.tags\n\n; URL rewriter will not rewrite absolute URL nor form by default. To enable\n; absolute URL rewrite, allowed hosts must be defined at RUNTIME.\n; Refer to session.trans_sid_hosts for more details.\n; Default Value: \"\"\n; Development Value: \"\"\n; Production Value: \"\"\n;url_rewriter.hosts\n\n; Transparent output compression using the zlib library\n; Valid values for this option are 'off', 'on', or a specific buffer size\n; to be used for compression (default is 4KB)\n; Note: Resulting chunk size may vary due to nature of compression. PHP\n;   outputs chunks that are few hundreds bytes each as a result of\n;   compression. If you prefer a larger chunk size for better\n;   performance, enable output_buffering in addition.\n; Note: You need to use zlib.output_handler instead of the standard\n;   output_handler, or otherwise the output will be corrupted.\n; http://php.net/zlib.output-compression\nzlib.output_compression = Off\n\n; http://php.net/zlib.output-compression-level\n;zlib.output_compression_level = -1\n\n; You cannot specify additional output handlers if zlib.output_compression\n; is activated here. This setting does the same as output_handler but in\n; a different order.\n; http://php.net/zlib.output-handler\n;zlib.output_handler =\n\n; Implicit flush tells PHP to tell the output layer to flush itself\n; automatically after every output block.  This is equivalent to calling the\n; PHP function flush() after each and every call to print() or echo() and each\n; and every HTML block.  Turning this option on has serious performance\n; implications and is generally recommended for debugging purposes only.\n; http://php.net/implicit-flush\n; Note: This directive is hardcoded to On for the CLI SAPI\nimplicit_flush = Off\n\n; The unserialize callback function will be called (with the undefined class'\n; name as parameter), if the unserializer finds an undefined class\n; which should be instantiated. A warning appears if the specified function is\n; not defined, or if the function doesn't include/implement the missing class.\n; So only set this entry, if you really want to implement such a\n; callback-function.\nunserialize_callback_func =\n\n; When floats & doubles are serialized, store serialize_precision significant\n; digits after the floating point. The default value ensures that when floats\n; are decoded with unserialize, the data will remain the same.\n; The value is also used for json_encode when encoding double values.\n; If -1 is used, then dtoa mode 0 is used which automatically select the best\n; precision.\nserialize_precision = -1\n\n; open_basedir, if set, limits all file operations to the defined directory\n; and below.  This directive makes most sense if used in a per-directory\n; or per-virtualhost web server configuration file.\n; Note: disables the realpath cache\n; http://php.net/open-basedir\n;open_basedir =\n\n; This directive allows you to disable certain functions for security reasons.\n; It receives a comma-delimited list of function names.\n; http://php.net/disable-functions\ndisable_functions = passthru,system,chroot,chgrp,chown,shell_exec,proc_open,proc_get_status,popen,ini_alter,ini_restore,dl,openlog,syslog,readlink,symlink,popepassthru,putenv,exec\n\n; This directive allows you to disable certain classes for security reasons.\n; It receives a comma-delimited list of class names.\n; http://php.net/disable-classes\ndisable_classes = COM\n\n; Colors for Syntax Highlighting mode.  Anything that's acceptable in\n; <span style=\"color: ???????\"> would work.\n; http://php.net/syntax-highlighting\n;highlight.string  = #DD0000\n;highlight.comment = #FF9900\n;highlight.keyword = #007700\n;highlight.default = #0000BB\n;highlight.html    = #000000\n\n; If enabled, the request will be allowed to complete even if the user aborts\n; the request. Consider enabling it if executing long requests, which may end up\n; being interrupted by the user or a browser timing out. PHP's default behavior\n; is to disable this feature.\n; http://php.net/ignore-user-abort\n;ignore_user_abort = On\n\n; Determines the size of the realpath cache to be used by PHP. This value should\n; be increased on systems where PHP opens many files to reflect the quantity of\n; the file operations performed.\n; Note: if open_basedir is set, the cache is disabled\n; http://php.net/realpath-cache-size\n;realpath_cache_size = 4096k\n\n; Duration of time, in seconds for which to cache realpath information for a given\n; file or directory. For systems with rarely changing files, consider increasing this\n; value.\n; http://php.net/realpath-cache-ttl\n;realpath_cache_ttl = 120\n\n; Enables or disables the circular reference collector.\n; http://php.net/zend.enable-gc\nzend.enable_gc = On\n\n; If enabled, scripts may be written in encodings that are incompatible with\n; the scanner.  CP936, Big5, CP949 and Shift_JIS are the examples of such\n; encodings.  To use this feature, mbstring extension must be enabled.\n; Default: Off\n;zend.multibyte = Off\n\n; Allows to set the default encoding for the scripts.  This value will be used\n; unless \"declare(encoding=...)\" directive appears at the top of the script.\n; Only affects if zend.multibyte is set.\n; Default: \"\"\n;zend.script_encoding =\n\n;;;;;;;;;;;;;;;;;\n; Miscellaneous ;\n;;;;;;;;;;;;;;;;;\n\n; Decides whether PHP may expose the fact that it is installed on the server\n; (e.g. by adding its signature to the Web server header).  It is no security\n; threat in any way, but it makes it possible to determine whether you use PHP\n; on your server or not.\n; http://php.net/expose-php\nexpose_php = On\n\n;;;;;;;;;;;;;;;;;;;\n; Resource Limits ;\n;;;;;;;;;;;;;;;;;;;\n\n; Maximum execution time of each script, in seconds\n; http://php.net/max-execution-time\n; Note: This directive is hardcoded to 0 for the CLI SAPI\nmax_execution_time = 100\n\n; Maximum amount of time each script may spend parsing request data. It's a good\n; idea to limit this time on productions servers in order to eliminate unexpectedly\n; long running scripts.\n; Note: This directive is hardcoded to -1 for the CLI SAPI\n; Default Value: -1 (Unlimited)\n; Development Value: 60 (60 seconds)\n; Production Value: 60 (60 seconds)\n; http://php.net/max-input-time\nmax_input_time = 100\n\n; Maximum input variable nesting level\n; http://php.net/max-input-nesting-level\n;max_input_nesting_level = 64\n\n; How many GET/POST/COOKIE input variables may be accepted\n;max_input_vars = 1000\n\n; Maximum amount of memory a script may consume (128MB)\n; http://php.net/memory-limit\nmemory_limit = 128M\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n; Error handling and logging ;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n; This directive informs PHP of which errors, warnings and notices you would like\n; it to take action for. The recommended way of setting values for this\n; directive is through the use of the error level constants and bitwise\n; operators. The error level constants are below here for convenience as well as\n; some common settings and their meanings.\n; By default, PHP is set to take action on all errors, notices and warnings EXCEPT\n; those related to E_NOTICE and E_STRICT, which together cover best practices and\n; recommended coding standards in PHP. For performance reasons, this is the\n; recommend error reporting setting. Your production server shouldn't be wasting\n; resources complaining about best practices and coding standards. That's what\n; development servers and development settings are for.\n; Note: The php.ini-development file has this setting as E_ALL. This\n; means it pretty much reports everything which is exactly what you want during\n; development and early testing.\n;\n; Error Level Constants:\n; E_ALL             - All errors and warnings (includes E_STRICT as of PHP 5.4.0)\n; E_ERROR           - fatal run-time errors\n; E_RECOVERABLE_ERROR  - almost fatal run-time errors\n; E_WARNING         - run-time warnings (non-fatal errors)\n; E_PARSE           - compile-time parse errors\n; E_NOTICE          - run-time notices (these are warnings which often result\n;                     from a bug in your code, but it's possible that it was\n;                     intentional (e.g., using an uninitialized variable and\n;                     relying on the fact it is automatically initialized to an\n;                     empty string)\n; E_STRICT          - run-time notices, enable to have PHP suggest changes\n;                     to your code which will ensure the best interoperability\n;                     and forward compatibility of your code\n; E_CORE_ERROR      - fatal errors that occur during PHP's initial startup\n; E_CORE_WARNING    - warnings (non-fatal errors) that occur during PHP's\n;                     initial startup\n; E_COMPILE_ERROR   - fatal compile-time errors\n; E_COMPILE_WARNING - compile-time warnings (non-fatal errors)\n; E_USER_ERROR      - user-generated error message\n; E_USER_WARNING    - user-generated warning message\n; E_USER_NOTICE     - user-generated notice message\n; E_DEPRECATED      - warn about code that will not work in future versions\n;                     of PHP\n; E_USER_DEPRECATED - user-generated deprecation warnings\n;\n; Common Values:\n;   E_ALL (Show all errors, warnings and notices including coding standards.)\n;   E_ALL & ~E_NOTICE  (Show all errors, except for notices)\n;   E_ALL & ~E_NOTICE & ~E_STRICT  (Show all errors, except for notices and coding standards warnings.)\n;   E_COMPILE_ERROR|E_RECOVERABLE_ERROR|E_ERROR|E_CORE_ERROR  (Show only errors)\n; Default Value: E_ALL & ~E_NOTICE & ~E_STRICT & ~E_DEPRECATED\n; Development Value: E_ALL\n; Production Value: E_ALL & ~E_DEPRECATED & ~E_STRICT\n; http://php.net/error-reporting\nerror_reporting = E_ALL & ~E_NOTICE\n\n; This directive controls whether or not and where PHP will output errors,\n; notices and warnings too. Error output is very useful during development, but\n; it could be very dangerous in production environments. Depending on the code\n; which is triggering the error, sensitive information could potentially leak\n; out of your application such as database usernames and passwords or worse.\n; For production environments, we recommend logging errors rather than\n; sending them to STDOUT.\n; Possible Values:\n;   Off = Do not display any errors\n;   stderr = Display errors to STDERR (affects only CGI/CLI binaries!)\n;   On or stdout = Display errors to STDOUT\n; Default Value: On\n; Development Value: On\n; Production Value: Off\n; http://php.net/display-errors\ndisplay_errors = On\n\n; The display of errors which occur during PHP's startup sequence are handled\n; separately from display_errors. PHP's default behavior is to suppress those\n; errors from clients. Turning the display of startup errors on can be useful in\n; debugging configuration problems. We strongly recommend you\n; set this to 'off' for production servers.\n; Default Value: Off\n; Development Value: On\n; Production Value: Off\n; http://php.net/display-startup-errors\ndisplay_startup_errors = On\n\n; Besides displaying errors, PHP can also log errors to locations such as a\n; server-specific log, STDERR, or a location specified by the error_log\n; directive found below. While errors should not be displayed on productions\n; servers they should still be monitored and logging is a great way to do that.\n; Default Value: Off\n; Development Value: On\n; Production Value: On\n; http://php.net/log-errors\nlog_errors = On\n\n; Set maximum length of log_errors. In error_log information about the source is\n; added. The default is 1024 and 0 allows to not apply any maximum length at all.\n; http://php.net/log-errors-max-len\nlog_errors_max_len = 1024\n\n; Do not log repeated messages. Repeated errors must occur in same file on same\n; line unless ignore_repeated_source is set true.\n; http://php.net/ignore-repeated-errors\nignore_repeated_errors = Off\n\n; Ignore source of message when ignoring repeated messages. When this setting\n; is On you will not log errors with repeated messages from different files or\n; source lines.\n; http://php.net/ignore-repeated-source\nignore_repeated_source = Off\n\n; If this parameter is set to Off, then memory leaks will not be shown (on\n; stdout or in the log). This has only effect in a debug compile, and if\n; error reporting includes E_WARNING in the allowed list\n; http://php.net/report-memleaks\nreport_memleaks = On\n\n; This setting is on by default.\n;report_zend_debug = 0\n\n; Store the last error/warning message in $php_errormsg (boolean).\n; This directive is DEPRECATED.\n; Default Value: Off\n; Development Value: Off\n; Production Value: Off\n; http://php.net/track-errors\n;track_errors = Off\n\n; Turn off normal error reporting and emit XML-RPC error XML\n; http://php.net/xmlrpc-errors\n;xmlrpc_errors = 0\n\n; An XML-RPC faultCode\n;xmlrpc_error_number = 0\n\n; When PHP displays or logs an error, it has the capability of formatting the\n; error message as HTML for easier reading. This directive controls whether\n; the error message is formatted as HTML or not.\n; Note: This directive is hardcoded to Off for the CLI SAPI\n; Default Value: On\n; Development Value: On\n; Production value: On\n; http://php.net/html-errors\nhtml_errors = On\n\n; If html_errors is set to On *and* docref_root is not empty, then PHP\n; produces clickable error messages that direct to a page describing the error\n; or function causing the error in detail.\n; You can download a copy of the PHP manual from http://php.net/docs\n; and change docref_root to the base URL of your local copy including the\n; leading '/'. You must also specify the file extension being used including\n; the dot. PHP's default behavior is to leave these settings empty, in which\n; case no links to documentation are generated.\n; Note: Never use this feature for production boxes.\n; http://php.net/docref-root\n; Examples\n;docref_root = \"/phpmanual/\"\n\n; http://php.net/docref-ext\n;docref_ext = .html\n\n; String to output before an error message. PHP's default behavior is to leave\n; this setting blank.\n; http://php.net/error-prepend-string\n; Example:\n;error_prepend_string = \"<span style='color: #ff0000'>\"\n\n; String to output after an error message. PHP's default behavior is to leave\n; this setting blank.\n; http://php.net/error-append-string\n; Example:\n;error_append_string = \"</span>\"\n\n; Log errors to specified file. PHP's default behavior is to leave this value\n; empty.\n; http://php.net/error-log\n; Example:\n;error_log = php_errors.log\n; Log errors to syslog (Event Log on Windows).\nerror_log = syslog\n\n; The syslog ident is a string which is prepended to every message logged\n; to syslog. Only used when error_log is set to syslog.\n;syslog.ident = php\n\n; The syslog facility is used to specify what type of program is logging\n; the message. Only used when error_log is set to syslog.\n;syslog.facility = user\n\n; Set this to disable filtering control characters (the default).\n; Some loggers only accept NVT-ASCII, others accept anything that's not\n; control characters. If your logger accepts everything, then no filtering\n; is needed at all.\n; Allowed values are:\n;   ascii (all printable ASCII characters and NL)\n;   no-ctrl (all characters except control characters)\n;   all (all characters)\n; http://php.net/syslog.filter\n;syslog.filter = ascii\n\n;windows.show_crt_warning\n; Default value: 0\n; Development value: 0\n; Production value: 0\n\n;;;;;;;;;;;;;;;;;\n; Data Handling ;\n;;;;;;;;;;;;;;;;;\n\n; The separator used in PHP generated URLs to separate arguments.\n; PHP's default setting is \"&\".\n; http://php.net/arg-separator.output\n; Example:\n;arg_separator.output = \"&amp;\"\n\n; List of separator(s) used by PHP to parse input URLs into variables.\n; PHP's default setting is \"&\".\n; NOTE: Every character in this directive is considered as separator!\n; http://php.net/arg-separator.input\n; Example:\n;arg_separator.input = \";&\"\n\n; This directive determines which super global arrays are registered when PHP\n; starts up. G,P,C,E & S are abbreviations for the following respective super\n; globals: GET, POST, COOKIE, ENV and SERVER. There is a performance penalty\n; paid for the registration of these arrays and because ENV is not as commonly\n; used as the others, ENV is not recommended on productions servers. You\n; can still get access to the environment variables through getenv() should you\n; need to.\n; Default Value: \"EGPCS\"\n; Development Value: \"GPCS\"\n; Production Value: \"GPCS\";\n; http://php.net/variables-order\nvariables_order = \"GPCS\"\n\n; This directive determines which super global data (G,P & C) should be\n; registered into the super global array REQUEST. If so, it also determines\n; the order in which that data is registered. The values for this directive\n; are specified in the same manner as the variables_order directive,\n; EXCEPT one. Leaving this value empty will cause PHP to use the value set\n; in the variables_order directive. It does not mean it will leave the super\n; globals array REQUEST empty.\n; Default Value: None\n; Development Value: \"GP\"\n; Production Value: \"GP\"\n; http://php.net/request-order\nrequest_order = \"GP\"\n\n; This directive determines whether PHP registers $argv & $argc each time it\n; runs. $argv contains an array of all the arguments passed to PHP when a script\n; is invoked. $argc contains an integer representing the number of arguments\n; that were passed when the script was invoked. These arrays are extremely\n; useful when running scripts from the command line. When this directive is\n; enabled, registering these variables consumes CPU cycles and memory each time\n; a script is executed. For performance reasons, this feature should be disabled\n; on production servers.\n; Note: This directive is hardcoded to On for the CLI SAPI\n; Default Value: On\n; Development Value: Off\n; Production Value: Off\n; http://php.net/register-argc-argv\nregister_argc_argv = Off\n\n; When enabled, the ENV, REQUEST and SERVER variables are created when they're\n; first used (Just In Time) instead of when the script starts. If these\n; variables are not used within a script, having this directive on will result\n; in a performance gain. The PHP directive register_argc_argv must be disabled\n; for this directive to have any affect.\n; http://php.net/auto-globals-jit\nauto_globals_jit = On\n\n; Whether PHP will read the POST data.\n; This option is enabled by default.\n; Most likely, you won't want to disable this option globally. It causes $_POST\n; and $_FILES to always be empty; the only way you will be able to read the\n; POST data will be through the php://input stream wrapper. This can be useful\n; to proxy requests or to process the POST data in a memory efficient fashion.\n; http://php.net/enable-post-data-reading\n;enable_post_data_reading = Off\n\n; Maximum size of POST data that PHP will accept.\n; Its value may be 0 to disable the limit. It is ignored if POST data reading\n; is disabled through enable_post_data_reading.\n; http://php.net/post-max-size\npost_max_size = 50M\n\n; Automatically add files before PHP document.\n; http://php.net/auto-prepend-file\nauto_prepend_file =\n\n; Automatically add files after PHP document.\n; http://php.net/auto-append-file\nauto_append_file =\n\n; By default, PHP will output a media type using the Content-Type header. To\n; disable this, simply set it to be empty.\n;\n; PHP's built-in default media type is set to text/html.\n; http://php.net/default-mimetype\ndefault_mimetype = \"text/html\"\n\n; PHP's default character set is set to UTF-8.\n; http://php.net/default-charset\ndefault_charset = \"UTF-8\"\n\n; PHP internal character encoding is set to empty.\n; If empty, default_charset is used.\n; http://php.net/internal-encoding\n;internal_encoding =\n\n; PHP input character encoding is set to empty.\n; If empty, default_charset is used.\n; http://php.net/input-encoding\n;input_encoding =\n\n; PHP output character encoding is set to empty.\n; If empty, default_charset is used.\n; See also output_buffer.\n; http://php.net/output-encoding\n;output_encoding =\n\n;;;;;;;;;;;;;;;;;;;;;;;;;\n; Paths and Directories ;\n;;;;;;;;;;;;;;;;;;;;;;;;;\n\n; UNIX: \"/path1:/path2\"\n;include_path = \".:/php/includes\"\n;\n; Windows: \"\\path1;\\path2\"\n;include_path = \".;c:\\php\\includes\"\n;\n; PHP's default setting for include_path is \".;/path/to/php/pear\"\n; http://php.net/include-path\n\n; The root of the PHP pages, used only if nonempty.\n; if PHP was not compiled with FORCE_REDIRECT, you SHOULD set doc_root\n; if you are running php as a CGI under any web server (other than IIS)\n; see documentation for security issues.  The alternate is to use the\n; cgi.force_redirect configuration below\n; http://php.net/doc-root\ndoc_root =\n\n; The directory under which PHP opens the script using /~username used only\n; if nonempty.\n; http://php.net/user-dir\nuser_dir =\n\n; Directory in which the loadable extensions (modules) reside.\n; http://php.net/extension-dir\n;extension_dir = \"./\"\n; On windows:\nextension_dir = \"ext\"\n\n; Directory where the temporary files should be placed.\n; Defaults to the system default (see sys_get_temp_dir)\n;sys_temp_dir = \"/tmp\"\n\n; Whether or not to enable the dl() function.  The dl() function does NOT work\n; properly in multithreaded servers, such as IIS or Zeus, and is automatically\n; disabled on them.\n; http://php.net/enable-dl\nenable_dl = Off\n\n; cgi.force_redirect is necessary to provide security running PHP as a CGI under\n; most web servers.  Left undefined, PHP turns this on by default.  You can\n; turn it off here AT YOUR OWN RISK\n; **You CAN safely turn this off for IIS, in fact, you MUST.**\n; http://php.net/cgi.force-redirect\n;cgi.force_redirect = 1\n\n; if cgi.nph is enabled it will force cgi to always sent Status: 200 with\n; every request. PHP's default behavior is to disable this feature.\n;cgi.nph = 1\n\n; if cgi.force_redirect is turned on, and you are not running under Apache or Netscape\n; (iPlanet) web servers, you MAY need to set an environment variable name that PHP\n; will look for to know it is OK to continue execution.  Setting this variable MAY\n; cause security issues, KNOW WHAT YOU ARE DOING FIRST.\n; http://php.net/cgi.redirect-status-env\n;cgi.redirect_status_env =\n\n; cgi.fix_pathinfo provides *real* PATH_INFO/PATH_TRANSLATED support for CGI.  PHP's\n; previous behaviour was to set PATH_TRANSLATED to SCRIPT_FILENAME, and to not grok\n; what PATH_INFO is.  For more information on PATH_INFO, see the cgi specs.  Setting\n; this to 1 will cause PHP CGI to fix its paths to conform to the spec.  A setting\n; of zero causes PHP to behave as before.  Default is 1.  You should fix your scripts\n; to use SCRIPT_FILENAME rather than PATH_TRANSLATED.\n; http://php.net/cgi.fix-pathinfo\n;cgi.fix_pathinfo = 1\n\n; if cgi.discard_path is enabled, the PHP CGI binary can safely be placed outside\n; of the web tree and people will not be able to circumvent .htaccess security.\n;cgi.discard_path=1\n\n; FastCGI under IIS supports the ability to impersonate\n; security tokens of the calling client.  This allows IIS to define the\n; security context that the request runs under.  mod_fastcgi under Apache\n; does not currently support this feature (03/17/2002)\n; Set to 1 if running under IIS.  Default is zero.\n; http://php.net/fastcgi.impersonate\n;fastcgi.impersonate = 1\n\n; Disable logging through FastCGI connection. PHP's default behavior is to enable\n; this feature.\n;fastcgi.logging = 0\n\n; cgi.rfc2616_headers configuration option tells PHP what type of headers to\n; use when sending HTTP response code. If set to 0, PHP sends Status: header that\n; is supported by Apache. When this option is set to 1, PHP will send\n; RFC2616 compliant header.\n; Default is zero.\n; http://php.net/cgi.rfc2616-headers\n;cgi.rfc2616_headers = 0\n\n; cgi.check_shebang_line controls whether CGI PHP checks for line starting with #!\n; (shebang) at the top of the running script. This line might be needed if the\n; script support running both as stand-alone script and via PHP CGI<. PHP in CGI\n; mode skips this line and ignores its content if this directive is turned on.\n; http://php.net/cgi.check-shebang-line\n;cgi.check_shebang_line=1\n\n;;;;;;;;;;;;;;;;\n; File Uploads ;\n;;;;;;;;;;;;;;;;\n\n; Whether to allow HTTP file uploads.\n; http://php.net/file-uploads\nfile_uploads = On\n\n; Temporary directory for HTTP uploaded files (will use system default if not\n; specified).\n; http://php.net/upload-tmp-dir\nupload_tmp_dir=\"C:/Temp\"\n\n; Maximum allowed size for uploaded files.\n; http://php.net/upload-max-filesize\nupload_max_filesize = 50M\n\n; Maximum number of files that can be uploaded via a single request\nmax_file_uploads = 20\n\n;;;;;;;;;;;;;;;;;;\n; Fopen wrappers ;\n;;;;;;;;;;;;;;;;;;\n\n; Whether to allow the treatment of URLs (like http:// or ftp://) as files.\n; http://php.net/allow-url-fopen\nallow_url_fopen = On\n\n; Whether to allow include/require to open URLs (like http:// or ftp://) as files.\n; http://php.net/allow-url-include\nallow_url_include = Off\n\n; Define the anonymous ftp password (your email address). PHP's default setting\n; for this is empty.\n; http://php.net/from\n;from=\"john@doe.com\"\n\n; Define the User-Agent string. PHP's default setting for this is empty.\n; http://php.net/user-agent\n;user_agent=\"PHP\"\n\n; Default timeout for socket based streams (seconds)\n; http://php.net/default-socket-timeout\ndefault_socket_timeout = 60\n\n; If your scripts have to deal with files from Macintosh systems,\n; or you are running on a Mac and need to deal with files from\n; unix or win32 systems, setting this flag will cause PHP to\n; automatically detect the EOL character in those files so that\n; fgets() and file() will work regardless of the source of the file.\n; http://php.net/auto-detect-line-endings\n;auto_detect_line_endings = Off\n\n;;;;;;;;;;;;;;;;;;;;;;\n; Dynamic Extensions ;\n;;;;;;;;;;;;;;;;;;;;;;\n\n; If you wish to have an extension loaded automatically, use the following\n; syntax:\n;\n;   extension=modulename\n;\n; For example:\n;\n;   extension=mysqli\n;\n; When the extension library to load is not located in the default extension\n; directory, You may specify an absolute path to the library file:\n;\n;   extension=/path/to/extension/mysqli.so\n;\n; Note : The syntax used in previous PHP versions ('extension=<ext>.so' and\n; 'extension='php_<ext>.dll') is supported for legacy reasons and may be\n; deprecated in a future PHP major version. So, when it is possible, please\n; move to the new ('extension=<ext>) syntax.\n;\n; Notes for Windows environments :\n;\n; - Many DLL files are located in the extensions/ (PHP 4) or ext/ (PHP 5+)\n;   extension folders as well as the separate PECL DLL download (PHP 5+).\n;   Be sure to appropriately set the extension_dir directive.\n;\nextension=php_bz2.dll\nextension=php_curl.dll\nextension=php_fileinfo.dll\nextension=php_gd.dll\n;extension=php_gettext.dll\nextension=php_gmp.dll\nextension=php_intl.dll\n;extension=php_imap.dll\n;extension=php_interbase.dll\n;extension=php_ldap.dll\nextension=php_mbstring.dll\n;extension=php_exif.dll\nextension=php_mysqli.dll\n;extension=php_oci8_12c.dll  ; Use with Oracle Database 12c Instant Client\nextension=php_openssl.dll\n;extension=php_pdo_firebird.dll\nextension=php_pdo_mysql.dll\n;extension=php_pdo_oci.dll\nextension=php_pdo_odbc.dll\n;extension=php_pdo_pgsql.dll\nextension=php_pdo_sqlite.dll\n;extension=php_pgsql.dll\n;extension=php_shmop.dll\n;extension=php_pdo_sqlsrv.dll\n;extension=php_sqlsrv.dll\n\n; The MIBS data available in the PHP distribution must be installed.\n; See http://www.php.net/manual/en/snmp.installation.php\n;extension=php_snmp.dll\n\n;extension=php_soap.dll\nextension=php_sockets.dll\nextension=php_sqlite3.dll\n;extension=php_tidy.dll\n;extension=php_xmlrpc.dll\nextension=php_xsl.dll\nextension=php_ftp.dll\n\n;;;;;;;;;;;;;;;;;;;\n; Module Settings ;\n;;;;;;;;;;;;;;;;;;;\n\n[CLI Server]\n; Whether the CLI web server uses ANSI color coding in its terminal output.\ncli_server.color = On\n\n[Date]\n; Defines the default timezone used by the date functions\n; http://php.net/date.timezone\ndate.timezone = PRC\n\n; http://php.net/date.default-latitude\n;date.default_latitude = 31.7667\n\n; http://php.net/date.default-longitude\n;date.default_longitude = 35.2333\n\n; http://php.net/date.sunrise-zenith\n;date.sunrise_zenith = 90.583333\n\n; http://php.net/date.sunset-zenith\n;date.sunset_zenith = 90.583333\n\n[filter]\n; http://php.net/filter.default\n;filter.default = unsafe_raw\n\n; http://php.net/filter.default-flags\n;filter.default_flags =\n\n[iconv]\n; Use of this INI entry is deprecated, use global input_encoding instead.\n; If empty, default_charset or input_encoding or iconv.input_encoding is used.\n; The precedence is: default_charset < input_encoding < iconv.input_encoding\n;iconv.input_encoding =\n\n; Use of this INI entry is deprecated, use global internal_encoding instead.\n; If empty, default_charset or internal_encoding or iconv.internal_encoding is used.\n; The precedence is: default_charset < internal_encoding < iconv.internal_encoding\n;iconv.internal_encoding =\n\n; Use of this INI entry is deprecated, use global output_encoding instead.\n; If empty, default_charset or output_encoding or iconv.output_encoding is used.\n; The precedence is: default_charset < output_encoding < iconv.output_encoding\n; To use an output encoding conversion, iconv's output handler must be set\n; otherwise output encoding conversion cannot be performed.\n;iconv.output_encoding =\n\n[imap]\n; rsh/ssh logins are disabled by default. Use this INI entry if you want to\n; enable them. Note that the IMAP library does not filter mailbox names before\n; passing them to rsh/ssh command, thus passing untrusted data to this function\n; with rsh/ssh enabled is insecure.\n;imap.enable_insecure_rsh=0\n\n[intl]\n;intl.default_locale =\n; This directive allows you to produce PHP errors when some error\n; happens within intl functions. The value is the level of the error produced.\n; Default is 0, which does not produce any errors.\n;intl.error_level = E_WARNING\n;intl.use_exceptions = 0\n\n[sqlite3]\n; Directory pointing to SQLite3 extensions\n; http://php.net/sqlite3.extension-dir\n;sqlite3.extension_dir =\n\n; SQLite defensive mode flag (only available from SQLite 3.26+)\n; When the defensive flag is enabled, language features that allow ordinary\n; SQL to deliberately corrupt the database file are disabled. This forbids\n; writing directly to the schema, shadow tables (eg. FTS data tables), or\n; the sqlite_dbpage virtual table.\n; https://www.sqlite.org/c3ref/c_dbconfig_defensive.html\n; (for older SQLite versions, this flag has no use)\n;sqlite3.defensive = 1\n\n[Pcre]\n; PCRE library backtracking limit.\n; http://php.net/pcre.backtrack-limit\n;pcre.backtrack_limit=100000\n\n; PCRE library recursion limit.\n; Please note that if you set this value to a high number you may consume all\n; the available process stack and eventually crash PHP (due to reaching the\n; stack size limit imposed by the Operating System).\n; http://php.net/pcre.recursion-limit\n;pcre.recursion_limit=100000\n\n; Enables or disables JIT compilation of patterns. This requires the PCRE\n; library to be compiled with JIT support.\n;pcre.jit=1\n\n[Pdo]\n; Whether to pool ODBC connections. Can be one of \"strict\", \"relaxed\" or \"off\"\n; http://php.net/pdo-odbc.connection-pooling\n;pdo_odbc.connection_pooling=strict\n\n;pdo_odbc.db2_instance_name\n\n[Pdo_mysql]\n; Default socket name for local MySQL connects.  If empty, uses the built-in\n; MySQL defaults.\npdo_mysql.default_socket=\n\n[Phar]\n; http://php.net/phar.readonly\n;phar.readonly = On\n\n; http://php.net/phar.require-hash\n;phar.require_hash = On\n\n;phar.cache_list =\n\n[mail function]\n; For Win32 only.\n; http://php.net/smtp\nSMTP = localhost\n; http://php.net/smtp-port\nsmtp_port = 25\n\n; For Win32 only.\n; http://php.net/sendmail-from\n;sendmail_from = me@example.com\n\n; For Unix only.  You may supply arguments as well (default: \"sendmail -t -i\").\n; http://php.net/sendmail-path\n;sendmail_path =\n\n; Force the addition of the specified parameters to be passed as extra parameters\n; to the sendmail binary. These parameters will always replace the value of\n; the 5th parameter to mail().\n;mail.force_extra_parameters =\n\n; Add X-PHP-Originating-Script: that will include uid of the script followed by the filename\nmail.add_x_header = Off\n\n; The path to a log file that will log all mail() calls. Log entries include\n; the full path of the script, line number, To address and headers.\n;mail.log =\n; Log mail to syslog (Event Log on Windows).\n;mail.log = syslog\n\n[ODBC]\n; http://php.net/odbc.default-db\n;odbc.default_db    =  Not yet implemented\n\n; http://php.net/odbc.default-user\n;odbc.default_user  =  Not yet implemented\n\n; http://php.net/odbc.default-pw\n;odbc.default_pw    =  Not yet implemented\n\n; Controls the ODBC cursor model.\n; Default: SQL_CURSOR_STATIC (default).\n;odbc.default_cursortype\n\n; Allow or prevent persistent links.\n; http://php.net/odbc.allow-persistent\nodbc.allow_persistent = On\n\n; Check that a connection is still valid before reuse.\n; http://php.net/odbc.check-persistent\nodbc.check_persistent = On\n\n; Maximum number of persistent links.  -1 means no limit.\n; http://php.net/odbc.max-persistent\nodbc.max_persistent = -1\n\n; Maximum number of links (persistent + non-persistent).  -1 means no limit.\n; http://php.net/odbc.max-links\nodbc.max_links = -1\n\n; Handling of LONG fields.  Returns number of bytes to variables.  0 means\n; passthru.\n; http://php.net/odbc.defaultlrl\nodbc.defaultlrl = 4096\n\n; Handling of binary data.  0 means passthru, 1 return as is, 2 convert to char.\n; See the documentation on odbc_binmode and odbc_longreadlen for an explanation\n; of odbc.defaultlrl and odbc.defaultbinmode\n; http://php.net/odbc.defaultbinmode\nodbc.defaultbinmode = 1\n\n[Interbase]\n; Allow or prevent persistent links.\nibase.allow_persistent = 1\n\n; Maximum number of persistent links.  -1 means no limit.\nibase.max_persistent = -1\n\n; Maximum number of links (persistent + non-persistent).  -1 means no limit.\nibase.max_links = -1\n\n; Default database name for ibase_connect().\n;ibase.default_db =\n\n; Default username for ibase_connect().\n;ibase.default_user =\n\n; Default password for ibase_connect().\n;ibase.default_password =\n\n; Default charset for ibase_connect().\n;ibase.default_charset =\n\n; Default timestamp format.\nibase.timestampformat = \"%Y-%m-%d %H:%M:%S\"\n\n; Default date format.\nibase.dateformat = \"%Y-%m-%d\"\n\n; Default time format.\nibase.timeformat = \"%H:%M:%S\"\n\n[MySQLi]\n\n; Maximum number of persistent links.  -1 means no limit.\n; http://php.net/mysqli.max-persistent\nmysqli.max_persistent = -1\n\n; Allow accessing, from PHP's perspective, local files with LOAD DATA statements\n; http://php.net/mysqli.allow_local_infile\n;mysqli.allow_local_infile = On\n\n; Allow or prevent persistent links.\n; http://php.net/mysqli.allow-persistent\nmysqli.allow_persistent = On\n\n; Maximum number of links.  -1 means no limit.\n; http://php.net/mysqli.max-links\nmysqli.max_links = -1\n\n; Default port number for mysqli_connect().  If unset, mysqli_connect() will use\n; the $MYSQL_TCP_PORT or the mysql-tcp entry in /etc/services or the\n; compile-time value defined MYSQL_PORT (in that order).  Win32 will only look\n; at MYSQL_PORT.\n; http://php.net/mysqli.default-port\nmysqli.default_port = 3306\n\n; Default socket name for local MySQL connects.  If empty, uses the built-in\n; MySQL defaults.\n; http://php.net/mysqli.default-socket\nmysqli.default_socket =\n\n; Default host for mysql_connect() (doesn't apply in safe mode).\n; http://php.net/mysqli.default-host\nmysqli.default_host =\n\n; Default user for mysql_connect() (doesn't apply in safe mode).\n; http://php.net/mysqli.default-user\nmysqli.default_user =\n\n; Default password for mysqli_connect() (doesn't apply in safe mode).\n; Note that this is generally a *bad* idea to store passwords in this file.\n; *Any* user with PHP access can run 'echo get_cfg_var(\"mysqli.default_pw\")\n; and reveal this password!  And of course, any users with read access to this\n; file will be able to reveal the password as well.\n; http://php.net/mysqli.default-pw\nmysqli.default_pw =\n\n; Allow or prevent reconnect\nmysqli.reconnect = Off\n\n[mysqlnd]\n; Enable / Disable collection of general statistics by mysqlnd which can be\n; used to tune and monitor MySQL operations.\nmysqlnd.collect_statistics = On\n\n; Enable / Disable collection of memory usage statistics by mysqlnd which can be\n; used to tune and monitor MySQL operations.\nmysqlnd.collect_memory_statistics = On\n\n; Records communication from all extensions using mysqlnd to the specified log\n; file.\n; http://php.net/mysqlnd.debug\n;mysqlnd.debug =\n\n; Defines which queries will be logged.\n;mysqlnd.log_mask = 0\n\n; Default size of the mysqlnd memory pool, which is used by result sets.\n;mysqlnd.mempool_default_size = 16000\n\n; Size of a pre-allocated buffer used when sending commands to MySQL in bytes.\n;mysqlnd.net_cmd_buffer_size = 2048\n\n; Size of a pre-allocated buffer used for reading data sent by the server in\n; bytes.\n;mysqlnd.net_read_buffer_size = 32768\n\n; Timeout for network requests in seconds.\n;mysqlnd.net_read_timeout = 31536000\n\n; SHA-256 Authentication Plugin related. File with the MySQL server public RSA\n; key.\n;mysqlnd.sha256_server_public_key =\n\n[OCI8]\n\n; Connection: Enables privileged connections using external\n; credentials (OCI_SYSOPER, OCI_SYSDBA)\n; http://php.net/oci8.privileged-connect\n;oci8.privileged_connect = Off\n\n; Connection: The maximum number of persistent OCI8 connections per\n; process. Using -1 means no limit.\n; http://php.net/oci8.max-persistent\n;oci8.max_persistent = -1\n\n; Connection: The maximum number of seconds a process is allowed to\n; maintain an idle persistent connection. Using -1 means idle\n; persistent connections will be maintained forever.\n; http://php.net/oci8.persistent-timeout\n;oci8.persistent_timeout = -1\n\n; Connection: The number of seconds that must pass before issuing a\n; ping during oci_pconnect() to check the connection validity. When\n; set to 0, each oci_pconnect() will cause a ping. Using -1 disables\n; pings completely.\n; http://php.net/oci8.ping-interval\n;oci8.ping_interval = 60\n\n; Connection: Set this to a user chosen connection class to be used\n; for all pooled server requests with Oracle 11g Database Resident\n; Connection Pooling (DRCP).  To use DRCP, this value should be set to\n; the same string for all web servers running the same application,\n; the database pool must be configured, and the connection string must\n; specify to use a pooled server.\n;oci8.connection_class =\n\n; High Availability: Using On lets PHP receive Fast Application\n; Notification (FAN) events generated when a database node fails. The\n; database must also be configured to post FAN events.\n;oci8.events = Off\n\n; Tuning: This option enables statement caching, and specifies how\n; many statements to cache. Using 0 disables statement caching.\n; http://php.net/oci8.statement-cache-size\n;oci8.statement_cache_size = 20\n\n; Tuning: Enables statement prefetching and sets the default number of\n; rows that will be fetched automatically after statement execution.\n; http://php.net/oci8.default-prefetch\n;oci8.default_prefetch = 100\n\n; Compatibility. Using On means oci_close() will not close\n; oci_connect() and oci_new_connect() connections.\n; http://php.net/oci8.old-oci-close-semantics\n;oci8.old_oci_close_semantics = Off\n\n[PostgreSQL]\n; Allow or prevent persistent links.\n; http://php.net/pgsql.allow-persistent\npgsql.allow_persistent = On\n\n; Detect broken persistent links always with pg_pconnect().\n; Auto reset feature requires a little overheads.\n; http://php.net/pgsql.auto-reset-persistent\npgsql.auto_reset_persistent = Off\n\n; Maximum number of persistent links.  -1 means no limit.\n; http://php.net/pgsql.max-persistent\npgsql.max_persistent = -1\n\n; Maximum number of links (persistent+non persistent).  -1 means no limit.\n; http://php.net/pgsql.max-links\npgsql.max_links = -1\n\n; Ignore PostgreSQL backends Notice message or not.\n; Notice message logging require a little overheads.\n; http://php.net/pgsql.ignore-notice\npgsql.ignore_notice = 0\n\n; Log PostgreSQL backends Notice message or not.\n; Unless pgsql.ignore_notice=0, module cannot log notice message.\n; http://php.net/pgsql.log-notice\npgsql.log_notice = 0\n\n[bcmath]\n; Number of decimal digits for all bcmath functions.\n; http://php.net/bcmath.scale\nbcmath.scale = 0\n\n[browscap]\n; http://php.net/browscap\n;browscap = extra/browscap.ini\n\n[Session]\nsession.save_handler = files\nsession.use_strict_mode = 0\nsession.use_cookies = 1\nsession.use_only_cookies = 1\nsession.name = PHPSESSID\nsession.auto_start = 0\nsession.cookie_lifetime = 0\nsession.cookie_path = /\nsession.cookie_domain =\nsession.cookie_httponly =\nsession.serialize_handler = php\nsession.gc_probability = 1\nsession.gc_divisor = 1000\nsession.gc_maxlifetime = 1440\nsession.referer_check =\nsession.cache_limiter = nocache\nsession.cache_expire = 180\nsession.use_trans_sid = 0\nsession.sid_length = 26\nsession.trans_sid_tags = \"a=href,area=href,frame=src,form=\"\nsession.save_path=C:\\BtSoft\\temp\\session\nsession.sid_bits_per_character = 5\n\n[Assertion]\n; Switch whether to compile assertions at all (to have no overhead at run-time)\n; -1: Do not compile at all\n;  0: Jump over assertion at run-time\n;  1: Execute assertions\n; Changing from or to a negative value is only possible in php.ini! (For turning assertions on and off at run-time, see assert.active, when zend.assertions = 1)\n; Default Value: 1\n; Development Value: 1\n; Production Value: -1\n; http://php.net/zend.assertions\nzend.assertions = 1\n\n; Assert(expr); active by default.\n; http://php.net/assert.active\n;assert.active = On\n\n; Throw an AssertionError on failed assertions\n; http://php.net/assert.exception\n;assert.exception = On\n\n; Issue a PHP warning for each failed assertion. (Overridden by assert.exception if active)\n; http://php.net/assert.warning\n;assert.warning = On\n\n; Don't bail out by default.\n; http://php.net/assert.bail\n;assert.bail = Off\n\n; User-function to be called if an assertion fails.\n; http://php.net/assert.callback\n;assert.callback = 0\n\n; Eval the expression with current error_reporting().  Set to true if you want\n; error_reporting(0) around the eval().\n; http://php.net/assert.quiet-eval\n;assert.quiet_eval = 0\n\n[COM]\n; path to a file containing GUIDs, IIDs or filenames of files with TypeLibs\n; http://php.net/com.typelib-file\n;com.typelib_file =\n\n; allow Distributed-COM calls\n; http://php.net/com.allow-dcom\n;com.allow_dcom = true\n\n; autoregister constants of a component's typlib on com_load()\n; http://php.net/com.autoregister-typelib\n;com.autoregister_typelib = true\n\n; register constants casesensitive\n; http://php.net/com.autoregister-casesensitive\n;com.autoregister_casesensitive = false\n\n; show warnings on duplicate constant registrations\n; http://php.net/com.autoregister-verbose\n;com.autoregister_verbose = true\n\n; The default character set code-page to use when passing strings to and from COM objects.\n; Default: system ANSI code page\n;com.code_page=\n\n[mbstring]\n; language for internal character representation.\n; This affects mb_send_mail() and mbstring.detect_order.\n; http://php.net/mbstring.language\n;mbstring.language = Japanese\n\n; Use of this INI entry is deprecated, use global internal_encoding instead.\n; internal/script encoding.\n; Some encoding cannot work as internal encoding. (e.g. SJIS, BIG5, ISO-2022-*)\n; If empty, default_charset or internal_encoding or iconv.internal_encoding is used.\n; The precedence is: default_charset < internal_encoding < iconv.internal_encoding\n;mbstring.internal_encoding =\n\n; Use of this INI entry is deprecated, use global input_encoding instead.\n; http input encoding.\n; mbstring.encoding_translation = On is needed to use this setting.\n; If empty, default_charset or input_encoding or mbstring.input is used.\n; The precedence is: default_charset < input_encoding < mbsting.http_input\n; http://php.net/mbstring.http-input\n;mbstring.http_input =\n\n; Use of this INI entry is deprecated, use global output_encoding instead.\n; http output encoding.\n; mb_output_handler must be registered as output buffer to function.\n; If empty, default_charset or output_encoding or mbstring.http_output is used.\n; The precedence is: default_charset < output_encoding < mbstring.http_output\n; To use an output encoding conversion, mbstring's output handler must be set\n; otherwise output encoding conversion cannot be performed.\n; http://php.net/mbstring.http-output\n;mbstring.http_output =\n\n; enable automatic encoding translation according to\n; mbstring.internal_encoding setting. Input chars are\n; converted to internal encoding by setting this to On.\n; Note: Do _not_ use automatic encoding translation for\n;       portable libs/applications.\n; http://php.net/mbstring.encoding-translation\n;mbstring.encoding_translation = Off\n\n; automatic encoding detection order.\n; \"auto\" detect order is changed according to mbstring.language\n; http://php.net/mbstring.detect-order\n;mbstring.detect_order = auto\n\n; substitute_character used when character cannot be converted\n; one from another\n; http://php.net/mbstring.substitute-character\n;mbstring.substitute_character = none\n\n; overload(replace) single byte functions by mbstring functions.\n; mail(), ereg(), etc are overloaded by mb_send_mail(), mb_ereg(),\n; etc. Possible values are 0,1,2,4 or combination of them.\n; For example, 7 for overload everything.\n; 0: No overload\n; 1: Overload mail() function\n; 2: Overload str*() functions\n; 4: Overload ereg*() functions\n; http://php.net/mbstring.func-overload\n;mbstring.func_overload = 0\n\n; enable strict encoding detection.\n; Default: Off\n;mbstring.strict_detection = On\n\n; This directive specifies the regex pattern of content types for which mb_output_handler()\n; is activated.\n; Default: mbstring.http_output_conv_mimetype=^(text/|application/xhtml\\+xml)\n;mbstring.http_output_conv_mimetype=\n\n; This directive specifies maximum stack depth for mbstring regular expressions. It is similar\n; to the pcre.recursion_limit for PCRE. \n; Default: 100000\n;mbstring.regex_stack_limit=100000\n\n[gd]\n; Tell the jpeg decode to ignore warnings and try to create\n; a gd image. The warning will then be displayed as notices\n; disabled by default\n; http://php.net/gd.jpeg-ignore-warning\n;gd.jpeg_ignore_warning = 1\n\n[exif]\n; Exif UNICODE user comments are handled as UCS-2BE/UCS-2LE and JIS as JIS.\n; With mbstring support this will automatically be converted into the encoding\n; given by corresponding encode setting. When empty mbstring.internal_encoding\n; is used. For the decode settings you can distinguish between motorola and\n; intel byte order. A decode setting cannot be empty.\n; http://php.net/exif.encode-unicode\n;exif.encode_unicode = ISO-8859-15\n\n; http://php.net/exif.decode-unicode-motorola\n;exif.decode_unicode_motorola = UCS-2BE\n\n; http://php.net/exif.decode-unicode-intel\n;exif.decode_unicode_intel    = UCS-2LE\n\n; http://php.net/exif.encode-jis\n;exif.encode_jis =\n\n; http://php.net/exif.decode-jis-motorola\n;exif.decode_jis_motorola = JIS\n\n; http://php.net/exif.decode-jis-intel\n;exif.decode_jis_intel    = JIS\n\n[Tidy]\n; The path to a default tidy configuration file to use when using tidy\n; http://php.net/tidy.default-config\n;tidy.default_config = /usr/local/lib/php/default.tcfg\n\n; Should tidy clean and repair output automatically?\n; WARNING: Do not use this option if you are generating non-html content\n; such as dynamic images\n; http://php.net/tidy.clean-output\ntidy.clean_output = Off\n\n[soap]\n; Enables or disables WSDL caching feature.\n; http://php.net/soap.wsdl-cache-enabled\nsoap.wsdl_cache_enabled=1\n\n; Sets the directory name where SOAP extension will put cache files.\n; http://php.net/soap.wsdl-cache-dir\nsoap.wsdl_cache_dir=\"/tmp\"\n\n; (time to live) Sets the number of second while cached file will be used\n; instead of original one.\n; http://php.net/soap.wsdl-cache-ttl\nsoap.wsdl_cache_ttl=86400\n\n; Sets the size of the cache limit. (Max. number of WSDL files to cache)\nsoap.wsdl_cache_limit = 5\n\n[sysvshm]\n; A default size of the shared memory segment\n;sysvshm.init_mem = 10000\n\n[ldap]\n; Sets the maximum number of open links or -1 for unlimited.\nldap.max_links = -1\n\n[dba]\n;dba.default_handler=\n\n[ioncube]\n;zend_extension=php_ioncube.dll\n\n[XDebug]\nxdebug.profiler_append = 0\nxdebug.profiler_enable = 1\nxdebug.profiler_enable_trigger = 0\nxdebug.profiler_output_dir =\"C:\\BtSoft\\temp\\xdebug\"\nxdebug.trace_output_dir =\"C:\\BtSoft\\temp\\xdebug\"\nxdebug.profiler_output_name = \"cache.out.%t-%s\"\nxdebug.remote_enable = 1\nxdebug.remote_handler = \"dbgp\"\nxdebug.remote_host = \"127.0.0.1\"\n;zend_extension=php_xdebug.dll\n\n[opcache]\nzend_extension=php_opcache.dll\nopcache.enable=1\nopcache.enable_cli=1\nopcache.memory_consumption=128\nopcache.interned_strings_buffer=8\nopcache.max_accelerated_files=10000\nopcache.max_wasted_percentage=5\nopcache.use_cwd=1\nopcache.validate_timestamps=1\nopcache.revalidate_freq=2\nopcache.revalidate_path=0\nopcache.save_comments=1\nopcache.fast_shutdown=0\nopcache.enable_file_override=0\nopcache.optimization_level=0xffffffff\nopcache.inherited_hack=1\nopcache.dups_fix=0\nopcache.blacklist_filename=\nopcache.max_file_size=0\nopcache.consistency_checks=0\nopcache.force_restart_timeout=180\nopcache.error_log=\nopcache.log_verbosity_level=1\nopcache.preferred_memory_model=\nopcache.protect_memory=0\nopcache.restrict_api=\nopcache.mmap_base=\nopcache.file_cache=\nopcache.file_cache_only=0\nopcache.file_cache_consistency_checks=1\nopcache.file_cache_fallback=1\nopcache.huge_code_pages=0\nopcache.validate_permission=0\nopcache.validate_root=0\n\n[curl]\n; A default value for the CURLOPT_CAINFO option. This is required to be an\n; absolute path.\n;curl.cainfo =\n\n[openssl]\n; The location of a Certificate Authority (CA) file on the local filesystem\n; to use when verifying the identity of SSL/TLS peers. Most users should\n; not specify a value for this directive as PHP will attempt to use the\n; OS-managed cert stores in its absence. If specified, this value may still\n; be overridden on a per-stream basis via the \"cafile\" SSL stream context\n; option.\n;openssl.cafile=\n\n; If openssl.cafile is not specified or if the CA file is not found, the\n; directory pointed to by openssl.capath is searched for a suitable\n; certificate. This value must be a correctly hashed certificate directory.\n; Most users should not specify a value for this directive as PHP will\n; attempt to use the OS-managed cert stores in its absence. If specified,\n; this value may still be overridden on a per-stream basis via the \"capath\"\n; SSL stream context option.\n;openssl.capath=\n\n; Local Variables:\n; tab-width: 4\n; End:\n\n[imagick]\n;extension=php_imagick.dll\n\n[mongodb]\n;extension=php_mongodb.dll\n\n[yaf]\n;extension=php_yaf.dll\nyaf.use_namespace = off\nyaf.enviror = \"product\"\n\n[yac]\n;extension=php_yac.dll\n\n[redis]\n;extension=php_redis.dll\n\n[sg12]\n;extension=sg12.ixed.80.win\n\n[memcache]\n;extension=php_memcache.dll\n\n[apcu]\n;extension=php_apcu.dll\n\n\n[psr]\n;extension=php_psr.dll\n[phalcon]\n;extension=php_phalcon.dll\n;开启phalcon需要开启psr支持\n\n[yaml]\n;extension=php_yaml.dll\n\n[mcrypt]\n;extension=php_mcrypt.dll\n\n[php_safe]\n;extension=php_safe.dll\nbt_safe.cli_enable = 1\nbt_safe.enable = 1\n\n```\n\n\n\n\n\n\n\n### nginx 1.24 安装\n命令行启动Nginx\n\n```\n#进入解压后的nginx目录\ncd C:\\env\\php8\\nginx-1.24.0\n```\n\n```\n#启动nginx\nstart nginx.exe\n```\n\n```\n#查看nginx是否启动成功\ntasklist /fi \"imagename eq nginx.exe\" \n```\n\n```\nnginx.exe -t #检查配置文件\nnginx.exe -s reload #重启\nnginx.exe -s stop #快速停止\nnginx.exe -s quit #完整有序的关闭\n```\n\nNginx配置监听PHP\n```\nworker_processes  1;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    sendfile        on;      \n    keepalive_timeout  65;\n\n    server {\n        listen       80;\n        server_name  localhost;\n\n        location / {\n            root  项目目录路径;\n            try_files $uri $uri/ /index.php?$query_string;\n            index  index.php index.html index.htm;\n        }\n\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   项目目录路径;\n        }\n\n        location ~ \\.php$ {\n            root           项目目录路径;\n            fastcgi_pass   127.0.0.1:9000;\n            fastcgi_index  index.php;\n            fastcgi_split_path_info  ^(.+\\.php)(/.+)$;\n            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n            include        fastcgi_params;\n        }\n      \n    }\n}\n```","categories":["技术博客"]},{"title":"Docker下安装Redis并持久化设置","url":"//25512.html","content":"\n\n\n> [Docker安装redis，并设置持久化详细教程](https://blog.csdn.net/qq_44697728/article/details/114577248)\n>\n> [docker安装指定版本TAG的镜像](https://www.cnblogs.com/wztone/p/10557486.html)\n>\n> [Redis的历史版本下载](http://download.redis.io/releases/)\n>\n> [docker安装redis](https://blog.csdn.net/m0_55070913/article/details/126628271)\n>\n> [Docker安装最新Redis6（redis-6.2.7）（参考官方文档）](https://blog.csdn.net/u014282578/article/details/128223953)\n\n---\n\n# 镜像下载\n## 拉取镜像\n\n拉取最新版本镜像\n```\ndocker pull redis;\n```\n\n拉取指定版本镜像\n```\ndocker pull redis:6.2.0;\n```\n\n## 已拉取镜像\n```\ndocker images;\n```\n\n\n+++ **获取指定版本TAG镜像**\n[hub.docker.com](https://hub.docker.com/)\n\n![](./Docker下安装Redis并持久化设置/Snipaste_2023-06-18_08-37-38.png)\n\n![](./Docker下安装Redis并持久化设置/Snipaste_2023-06-18_08-38-40.png)\n+++\n\n\n\n# 创建实例并启动\n\n\n\n创建配置文件目录\n```\nmkdir -p /home/docker/redis/conf\n```\n\n按`redis`版本下载对应`redis.conf`配置文件\n```\nhttps://redis.io/docs/management/config/\n```\n![](./Docker下安装Redis并持久化设置/Snipaste_2023-06-18_09-23-32.png)\n\n修改配置\n```\nvi /home/docker/redis/conf/redis.conf\n```\n\n> 大坑注意：\n> > daemonize no #不要修改，否则启动失败且无日志可查 \n\n推荐修改配置\n```\n#bind 127.0.0.1 -::1\nprotected-mode no\nrequirepass 123456\nappendonly yes\n```\n- #bind 注释，解除本地连接限制\n- protected-mode 保护模式，限制为本地访问，修改后解除保护模式\n- requirepass 设置访问密码\n- appendonly 开启持久化\n\n\n持久化配置参数\n> [博客内链|Reids持久化详解](/posts/6387.html)\n- appendfilename \"appendonly.aof\" #生成文件名称 (默认)\n- appendfsync everysec #日志追加频率-每秒 (默认)\n\n\n\n\n## 启动容器\n\n```\ndocker run -d \\\n-p 6379:6379 \\\n--name redis \\\n--privileged=true \\\n--restart=always  \\\n-v /home/docker/redis/data:/data \\\n-v /home/docker/redis/conf/redis.conf:/etc/redis/redis.conf \\\nredis:6.2.0 \\\nredis-server /etc/redis/redis.conf\n```\n\n\n## 移除容器\n```\ndocker rm 名称or镜像id;\n```\n\n# 实例启动成功\n\n## 命令查看\n```\ndocker ps ; #查看成功运行的容器\ndocker ps -a ; #查看所有容器\n```\n![](./Docker下安装Redis并持久化设置/Snipaste_2023-05-05_08-21-33.jpg)\n\n\n \n\n  \n# 错误记录\n\n## 错误01\n解决方案:\n> [docker 报错 /usr/bin/docker-current: Error response from daemon: driver failed programming external](https://blog.csdn.net/whatday/article/details/103929867)\n\n解决命令:\n```\n#重启docker进程\nsystemctl restart docker\n```\n\n错误信息:\n```\n/usr/bin/docker-current: Error response from daemon: driver failed programming external connectivity on endpoint redis (72144e08d14644cf8b86282112928608afcbfa1feff8ab1450a784e2c504ab2c):  (iptables failed: iptables --wait -t nat -A DOCKER -p tcp -d 0/0 --dport 6379 -j DNAT --to-destination 172.17.0.2:6379 ! -i docker0: iptables: No chain/target/match by that name.\n```\n\n![](./Docker下安装Redis并持久化设置/Snipaste_2023-05-05_08-03-22.jpg)\n\n\n问题原因(我确实有关闭firewall进程这一步操作):\n![](./Docker下安装Redis并持久化设置/Snipaste_2023-05-05_08-10-45.jpg)\n\n\n## 错误02\n\n> redis.conf文件要与redis的版本一致，如果下载不对应的配置文件时，部分属性会报错。\n\n\n```\n>>> 'repl-diskless-sync-max-replicas 0'\nBad directive or wrong number of arguments\n```\n\n\n\ndocker下查看容器的redis版本号信息\n\n```\ndocker exec -it 容器名称 redis-server -v\n```\n\n打印如下信息：\nRedis `server v=6.2.6` sha=00000000:0 malloc=jemalloc-5.1.0 bits=64 build=b61f37314a089f19\n\n指定redis版本配置文件下载：\n官方地址：https://redis.io/topics/config/\n","categories":["技术博客"],"tags":["Docker","Redis"]},{"title":"Redis实现分布式锁","url":"//2567.html","content":"\n\n> 参考博客：[Redis实现分布式锁](https://blog.csdn.net/weixin_46129192/article/details/126010250)\n>\n> 参考博客：[Redlock（redis分布式锁）原理分析](https://blog.csdn.net/lisheng19870305/article/details/122464924)\n\nRedis的常用部署方式：单节点模式、主从模式、哨兵模式、集群模式；\n\n\n","categories":["技术博客"]},{"title":"Linux下搭建Redis服务","url":"//28063.html","content":"\n[Redis安装包下载地址](https://download.redis.io/releases/)\n\n\n下载redis安装文件\n```\nwget https://download.redis.io/releases/redis-3.2.10.tar.gz\n```\n\n解压文件\n```\ntar -zxvf redis-3.2.10.tar.gz\n```\n\n编译\n```\nmake\n```\n\n编译安装\n```\nmake PREFIX=/usr/local/redis install\n```\n\n复制配置文件`redis.conf`到`/usr/local/redis`目录下\n```\ncp /opt/redis-3.2.10/redis.conf  ./\n```\n启动redis服务`/usr/local/redis/bin/`目录下\n> 控制台出现redis界面方式\n```\nredis-server ../redis.conf\n```\n修改`redis.conf`配置文件\n> 修改后台守护进程后，启动，不会显示redis界面\n```\n\n# 允许后台守护进程方式启动\ndaemonize yes\n\n# 注释掉绑定ip\n#bind 127.0.0.1\n\n# 设置访问密码\nrequirepass YOUR_PASSWORD\n\n# 修改默认端口号(默认为：6379)\nport 6379\n\n```\n\n检测服务是否正常启动\n```\nps -aux | grep 6379\n```","categories":["技术博客"]},{"title":"Reids的持久化详解","url":"//6387.html","content":"\n\n> [redis持久化详解](https://blog.csdn.net/qq_45722267/article/details/124525345)\n\n\n## Redis持久化机制\n- RDB (默认机制)\n- AOF\n\n## RDB (快照)\n按照一定的时间将内存的数据以快照的形式保存到硬盘中，对应产生的数据文件为dump.rdb。\n\n### 生成快照方式\n- 客户端方式\n  - BGSAVE 和 SAVE指令\n- 服务端方式\n  - 服务器配置自动触发 和 shutdown\n\n#### 客户端方式\n1. **BGSAVE**\n   客户端可以使用BGSAVE命令来创建一个快照，当接收到客户端的BGSAVE命令时，redis会创建一个子进程，子进程负责将快照写入磁盘中，而父进程继续处理命令请求。（在子进程创建之初，父子进程共享相同内存，知道父进程或子进程对内存进行了写之后，对于被写入的内存的共享就会结束服务）\n2. **SAVE**\n   客户端使用SAVE命令创建一个快照，接收到SAVE命令的redis服务器在快照创建完毕之前将不再响应任何其他的命令。\n\n#### 服务端方式\n1. 配置文件持久化\n   服务器通过配置方式来满足自动触发快照进行持久化，管理员需要在redis.conf中设置save配置选项，redis会在save选项条件满足之后自动触发一次BGSAVE命令，如果管理员设置了多个save配置选项，当任意save条件被满足，redis都会触发一次BGSAVE命令。\n2. shutdown指令\n    当redis通过shutdown指令接受到关闭服务器的请求时，会触发一次SAVE命令，阻塞所有的客户端，不再执行客户端发送的任何命令，在SAVE命令执行完毕后关闭服务器。\n\n### 优缺点\n#### 优点\n1. **文件单一**: 只有一个dump.rdb文件，方便持久化\n2. **容灾性好**: 一个文件可以保存到安全的磁盘中。\n3. **性能最大化**: 子进程来完成写操作，主进程可以继续处理命令，实现IO最大化（使用单独的子进程来进行持久化，主进程不会进行任何IO操作，保证了redis的高性能）。\n4. **启动效率高**: 相对于数据集大时，比AOF的启动效率更高。\n\n#### 缺点\n1. **数据安全性低**: RDB是间隔一段时间进行持久化，如果持久化之间redis发生故障，会发生数据丢失。\n2. **版本兼容问题**: dump.rdb文件是一个redis中特制的二进制文件，涉及到不同的redis版本，可能会发生版本不兼容问题。\n\n\n## AOF (追加日志文件)\n将redis执行的所有写命令记录到日志文件中，将被执行的写命令写到AOF的文件末尾。\n\n当redis重启时，redis会从头到尾执行一次AOF文件所包含的所有写命令，以此恢复AOF文件的记录的数据集。\n\n\n### 开启AOF持久化\nredis默认配置中AOF持久化机制是不开启的，需要在配置中开启。\n\n修改redis.conf配置文件:\n```\n#开启持久化\nappendonly yes \n#指定生成文件名称\nappendfilename \"appendonly.aof\"\n```\n\n#### 设置日志追加频率\n\n**修改redis.conf配置文件同步频率**\n```\nappendfsync everysec\n```\n\n同步频率包括:\n- always \n- everysec (推荐)\n- no\n\n**always**\n说明: 每个redis写命令都要同步写入硬盘，严重降低redis速度\n解释: 如果用户使用了always选项，会将发生系统崩溃时出现的数据丢失减到最少，但因为这种同步策略需要对硬盘进行大量的写入操作，所以redis处理命令的速度会受到硬盘性能的限制。\n注意: 使用固态硬盘（SSD）时需谨慎使用always选项，这种模式不断写入少量数据，可能会引发严重的写入放大问题，导致固态硬盘的寿命从原来的几年降低为几个月。\n\n**everysec**\n说明：每秒执行一次的同步显示，将多个写命令同步到磁盘\n解释：同时保障了数据安全和写入性能，redis每秒一次对AOF文件进行同步，此时AOF文件性能和不使用任何持久化特性时的性能基本相同；通过每秒同步一次AOF文件，redis可以保证，即使系统崩溃，最多丢失一秒之内产生的数据。\n\n**no**\n说明：由操作系统决定何时同步\n解释：这个选项不好对redis性能带来影响，但是当系统宕机时，丢失的数据量具有不确定性；另外，如果用户硬盘处理写入操作不够快，当缓冲区被等待写入硬盘数据填满时，redis会处于阻塞状态，导致redis的处理命令请求速度变慢。\n\n#### AOF重写\nAOF文件是以追加的方式记录接收到的写命令的，不断的追加会导致AOF文件过大。\n\n**文件过大导致的问题：**\n1. **文件系统的限制**：文件系统本身对文件的大小有限制，无法保存过大文件，如果超出限制，会导致 redis 宕机，redis 执行命令速度会降低。\n2. **追加效率降低**：AOF文件采用追加的方式写入文件，每次要遍历寻找到文件尾部，如果文件过大，追加效率会大幅度降低。\n3. **执行效率降低**：如果服务器发生宕机，AOF文件命令要逐一执行，文件过大导致执行内容过多，影响效率。\n\n**AOF重写：用来一定程度上减小AOF文件的体积，解决文件过大的问题。**\n\n#### 触发重写方式\n- 客户端方式\n- 服务器配置文件自动触发方式\n \n\n**客户端方式:**\n```\n执行BGREWRITEAOF命令 不会阻塞redis服务\n```\n\n**服务器配置文件自动方式:**\n\n修改redis.conf配置文件:\n```\n#表示AOF写入文件大小大于64m才能触发重写操作。\nauto-aof-rewrite-min-size 64mb \n#100表示百分比，表示AOF文件的体积比上一次重写之后体积至少大了 “100%” 时会自动触发。\nauto-aof-rewrite-percentage 100\n```\n\n##### 重写原理\n1. 重写AOF的时候，创建一个重写子进程，然后读取旧的AOF文件，压缩并写入到一个临时AOF。\n2. 在此期间，主进程一边将接收到的指令累计到一个缓冲区中，一边将指令写入到旧的AOF。\n3. 子进程写完后，向主进程发送一个信号量，主进程就将缓冲区中的指令追加到新AOF。\n4. 用新的AOF替换旧的AOF，之后的新指令就追加到新的AOF。\n\n\n### 优缺点\n\n#### 优点\n1. **数据安全**: AOF持久化可以通过配置appendfsync属性，设置其记录频率。\n2. **数据一致**: 通过append模式写文件，即使服务器宕机，也可以通过redis-check-aof工具解决数据一致问题。\n3. **灵活**。AOF机制的 rewrite 模式，AOF文件没被rewrite之前（文件过大时会对命令进行合并重写），可以删除其中的某些命令。\n\n#### 缺点\n1. **恢复速度慢**: AOF文件比RDB文件更大，且恢复速度更慢。\n2. **效率低**: 数据集大时，AOF比RDB启动效率低。\n\n\n**当RDB和AOF同时开启时，redis数据恢复会优先选中 <font color = 'red'>AOF</font> 恢复。**\n\n\n","categories":["技术博客"],"tags":["AOF","RDB"]},{"title":"Redis的缓存击穿、穿透、雪崩","url":"//17397.html","content":"\n> [Redis详解（十二）------ 缓存穿透、缓存击穿、缓存雪崩](https://zhuanlan.zhihu.com/p/148837265)\n>\n\n\n## 缓存穿透\n缓存和数据库中都没有的数据，可用户还是源源不断的发起请求，导致每次请求都会到数据库，从而压垮数据库。\n\n解决方式：\n1. 业务层校验： 对于参数明显错误的直接拒绝；\n2. 查询不存在数据设置短时间过期；\n3. 布隆过滤器；\n\n## 缓存击穿\nRedis中一个热点key在失效的同时，大量的请求过来，从而会全部到达数据库，压垮数据库。\n\n解决方式：\n1. 热点key 永不过期；\n2. 定时更新；热点key过期时间1h，设置59分钟时进行更新；\n3. 互斥锁\n\n## 缓存雪崩\n\nRedis中缓存的数据大面积同时失效，或者Redis宕机，从而会导致大量请求直接到数据库，压垮数据库。\n\n解决方式：\n1. 单机环境，防止redis宕机可使用redis集群（哨兵、集群）；\n2. 设置key过期时间的有效均匀分布；\n3. 数据预热，提前将可能使用数据保存缓存中；\n","categories":["技术博客"]},{"title":"Reids配置主从","url":"//59132.html","content":"\n> 参考博客：[Redis 主从配置](https://blog.csdn.net/qq_42606357/article/details/118742333)","categories":["技术博客"],"tags":["Reids","Redis主从"]},{"title":"redis是线程安全的吗?","url":"//9984.html","content":"\n> [Redis线程安全问题](https://blog.csdn.net/diweikang/article/details/90264993)\n\n## Redis线程使安全的吗?\n> redis是单线程程序,线程是安全的\n\n## Redis单线程为什么这么快?\n- Redis是基于内存,内存的读写速度快\n- Redis是单线程,避免了不必要的上下文切换和竞争条件\n- Redis使用多路复用技术，可以处理并发的连接\n\n## Redis可能存在的瓶颈?\n- 机器内存大小或网络宽带","categories":["技术博客"]},{"title":"redis的常用数据结构及使用场景?","url":"//31486.html","content":"\n> [redis的常用数据结构及使用场景](https://blog.csdn.net/qq_45076180/article/details/109458668)\n\n## String的使用场景\n- 普通数据/对象缓存\n- 分布式锁\n- 计数器\n- 分布式系统全局序列号\n\n![](./redis的常用数据结构及使用场景/redis-string应用场景.png)\n\n## Hash的使用场景\n> [Redis数据结构Hash应用场景-存储商品、购物车、淘宝短链接、分布式Session、用户注册、发微博功能](https://blog.csdn.net/yaoyaochengxian/article/details/120234850#_417)\n- 购物车\n  - 用户id为key\n  - 商品id为field\n  - 商品count为value\n\n### 示例\n#### 往购物车加入2件商品\n> key = cart:user:用户id\n```\nvm01:0>hset cart:user:1000 101 1\n\"1\"\nvm01:0>hset cart:user:1000 102 1\n\"1\"\nvm01:0>hgetall cart:user:1000 \n 1)  \"101\"\n 2)  \"1\"\n 3)  \"102\"\n 4)  \"1\"\nvm01:0>\n```\n#### 修改购物车数据,增加商品数量\n```\nvm01:0>hincrby cart:user:1000 101 1\n\"2\"\nvm01:0>hincrby cart:user:1000 102 10\n\"11\"\nvm01:0>hgetall cart:user:1000\n 1)  \"101\"\n 2)  \"2\"\n 3)  \"102\"\n 4)  \"11\"\nvm01:0>\n```\n#### 统计购物车商品\n```\nvm01:0>hlen cart:user:1000\n\"2\"\nvm01:0>\n``` \n\n#### 删除购物车商品\n```\nvm01:0>hdel cart:user:1000 101\n\"1\"\nvm01:0>hgetall cart:user:1000\n 1)  \"102\"\n 2)  \"11\"\nvm01:0>\n```\n\n## List的使用场景\n> [Redis的List的应用场景](https://blog.csdn.net/weixin_42119753/article/details/102422068)\n- 消息队列\n  - `lpush` + `brpop`命令组合即可实现阻塞队列，生产者客户端使用`lpush`从列表左侧插入元素，多个消费者客户端使用`brpop`命令阻塞式的争抢列表尾部的元素，多个客户端保证了消费的负载均衡和高可用\n- 朋友圈点赞列表\\评论列表\n  - `lpush`命令和`lrange`命令能实现最新列表的功能，每次通过lpush命令往列表里插入新的元素，然后通过`lrange`命令读取最新的元素列表\n- 栈\n  - 通过(`lpush` `lpop`左边进左边出，或`rpush` `rpop` 右边进右边出），先进后出原则\n\n### 消息队列\n\n生产者: 消息队列中新增数据\n```\nvm01:0>lpush list 1\n\"1\"\nvm01:0>llen list\n\"1\"\nvm01:0>\n```\n\n消费者: 从消息队列中消费数据\n```\nvm01:0>brpop list 0 #超时时间0表示一直等待,直到争抢到尾部元素\n 1)  \"list\"\n 2)  \"1\"\nvm01:0>\n```\n生产者: 查询队列中数据\n```\nvm01:0>llen list\n\"0\"\nvm01:0>\n```\n\n\n### 朋友圈点赞/评论列表\n\n点赞/评论数据新增:\n```\nvm01:0>lpush list 1\n\"1\"\nvm01:0>lpush list 2\n\"2\"\nvm01:0>lpush list 3\n\"3\"\nvm01:0>lpush list 4\n\"4\"\nvm01:0>llen list\n\"4\"\nvm01:0>\n```\n\n获取最新的点赞/评论数据:\n```\nvm01:0>lrange list 0 10\n 1)  \"4\"\n 2)  \"3\"\n 3)  \"2\"\n 4)  \"1\"\nvm01:0>\n```\n\n### 栈\n> 用朋友圈点赞/评论数据\n\n**满足FIFO(先进先出\\后进后出)顺序**\n\n栈-入:\n```\nvm01:0>lpush list 1\n\"1\"\nvm01:0>lpush list 2\n\"2\"\nvm01:0>lpush list 3\n\"3\"\nvm01:0>lpush list 4\n\"4\"\nvm01:0>llen list\n\"4\"\nvm01:0>\n```\n\n栈-出:\n```\nvm01:0>lrange list 0 10\n 1)  \"4\"\n 2)  \"3\"\n 3)  \"2\"\n 4)  \"1\"\nvm01:0>lpop list\n\"4\"\nvm01:0>lpop list\n\"3\"\nvm01:0>lpop list\n\"2\"\nvm01:0>lpop list\n\"1\"\nvm01:0>\n```\n\n## Set的使用场景\n- 点赞\n- 抽奖\n- 关注模型(共同好友\\推荐好友)\n\n### 点赞\n\n> key = prize:{消息id}\n\n点赞数据新增:\n```\nvm01:0>sadd prize:id_1 小王\n\"1\"\nvm01:0>sadd prize:id_1 小李\n\"1\"\nvm01:0>sadd prize:id_1 小赵\n\"1\"\nvm01:0>\n```\n\n获取点赞人数统计:\n```\nvm01:0>scard prize:id_1\n\"3\"\nvm01:0>\n\n```\n\n### 抽奖\n\n抽奖用户数据新增\n```\nvm01:0>SADD prize 小王\n\"1\"\nvm01:0>SADD prize 小李\n\"1\"\nvm01:0>SADD prize 小黑\n\"1\"\nvm01:0>\n```\n\n获取参与抽奖所有用户\n```\nvm01:0>smembers prize\n 1)  \"小李\"\n 2)  \"小王\"\n 3)  \"小黑\"\nvm01:0>\n```\n\n随机获取两个抽奖用户\n```\nvm01:0>srandmember prize 2\n 1)  \"小李\"\n 2)  \"小黑\"\nvm01:0>\n```\n随机获取一个抽奖用户并删除记录\n```\nvm01:0>smembers prize\n 1)  \"小李\"\n 2)  \"小王\"\n 3)  \"小黑\"\nvm01:0>spop prize \n\"小李\"\nvm01:0>smembers prize\n 1)  \"小王\"\n 2)  \"小黑\"\nvm01:0>\n```\n\n\n### 关注模型\n\n新增用户好友数据:\n```\nvm01:0>sadd A 小李 小王 小赵\n\"3\"\nvm01:0>sadd B 小李 小白 小黑\n\"3\"\nvm01:0>\n```\n\n#### 共同好友\n```\nvm01:0>sinter A B\n 1)  \"小李\"\nvm01:0>\n```\n\n#### 推荐好友\n```\nvm01:0>sdiff A B\n 1)  \"小王\"\n 2)  \"小赵\"\n vm01:0>\n```\n\n\n\n## Zset使用场景\n\n- 实现热搜排行榜\n\n> key 不能重复, score 可以重复\n\n添加热搜数据\n```\nvm01:0>zadd hot 1 redis\n\"1\"\nvm01:0>zadd hot 1 mongodb\n\"1\"\nvm01:0>\n```\n\n模拟点击热搜提升数值\n```\nvm01:0>ZINCRBY hot 1 mongodb\n\"2\"\nvm01:0>\n```\n\n根据热搜数值排行榜0-10区间 -> 大>小 (热搜排行榜)\n```\nvm01:0>zrevrange hot 0 10 \n 1)  \"mongodb\"\n 2)  \"redis\"\nvm01:0>zrevrange hot 0 10 withscores\n 1)  \"mongodb\"\n 2)  \"2\"\n 3)  \"redis\"\n 4)  \"1\"\nvm01:0>\n```\n+++ **点击显示/隐藏(小>大)**\n根据热搜数值排行榜0-10区间 -> 小>大\n```\nvm01:0>zrange hot 0 10\n 1)  \"redis\"\n 2)  \"mongodb\"\nvm01:0>zrange hot 0 10 withscores\n 1)  \"redis\"\n 2)  \"1\"\n 3)  \"mongodb\"\n 4)  \"2\"\nvm01:0>\n```\n+++\n\n补充-指定区间范围的热搜:\n![](./redis的常用数据结构及使用场景/Snipaste_2023-05-08_21-45-55.jpg \"https://blog.csdn.net/qq_22075913/article/details/106868900\")\n\n","categories":["技术博客"]},{"title":"SqlServer修改sa用户密码","url":"//33676.html","content":"\n[SQL Server修改用户名密码](https://wenku.csdn.net/answer/3morkhkegw)\n\n\n## 博客教程截图\n![](./SqlServer修改sa用户密码/Snipaste_2023-12-11_19-53-39.png)\n\n\n## 拆解步骤\n![](./SqlServer修改sa用户密码/Snipaste_2023-12-11_19-48-44.png)\n\n![](./SqlServer修改sa用户密码/Snipaste_2023-12-11_19-49-40.png)\n\n![](./SqlServer修改sa用户密码/Snipaste_2023-12-11_19-50-07.png)\n\n![](./SqlServer修改sa用户密码/Snipaste_2023-12-11_19-51-30.png)\n\n![](./SqlServer修改sa用户密码/Snipaste_2023-12-11_19-52-10.png)\n","categories":["技术博客"]},{"title":"SpringBoot中logback.xml里面读取yml里面的参数方式","url":"//1249.html","content":"\n> 参考博客：[SpringBoot中，logback.xml里面读取yml里面的参数方式](https://blog.csdn.net/qq_27808011/article/details/98730608)\n\n## SpringBoot的yml文件修改\n```\n#自定义配置参数\nruoyi_custom:\n  #通过yml配置变量设置日志文件输出path路径地址\n  log:\n    path: C:/Users/14751/Documents/Test/ruoyi/logs\n```\n![](./SpringBoot中logback-xml里面读取yml里面的参数方式/Snipaste_2023-06-27_21-10-39.png)\n\n\n## logback.xml配置修改\n```\n<!-- 获取yml中的log地址 -->\n<springProperty scope=\"context\" name=\"log.path\" source=\"ruoyi_custom.log.path\" defaultValue=\"/home/ruoyi/logs/\"/>\n```\n![](./SpringBoot中logback-xml里面读取yml里面的参数方式/Snipaste_2023-06-27_21-14-33.png)\n\n","categories":["技术博客"],"tags":["SpringBoot","Logback.xml"]},{"title":"redis的数据结构您知道都有哪些?","url":"//13537.html","content":"\n## Redis的数据结构\n- String\n- List\n- Hash\n- Set\n- ZSet\n","categories":["技术博客"]},{"title":"主机连接虚拟机SqlServer服务","url":"//61665.html","content":"\n[主机连接虚拟机的sql server](https://blog.csdn.net/qq_33454111/article/details/88540521)\n\nSQL SERVER的默认端口`1433`\n\n本次遇到问题为SqlServer未开启TCP/IP的服务，导致无法连接。\n![](./主机连接虚拟机SqlServer服务/Snipaste_2023-12-14_21-35-25.png)","categories":["技术博客"]},{"title":"TamperMonkey脚本插件","url":"//23012.html","content":"\n## 网页限制解除\n> 解除一些网站的禁止 选择、复制、右键 等限制\n\n[官网下载](https://cat7373.github.io/remove-web-limits/)\n\n```\n// ==UserScript==\n// @namespace         https://www.github.com/Cat7373/\n\n// @name              网页限制解除\n// @name:en           Remove web limits\n// @name:zh           网页限制解除\n// @name:zh-CN        网页限制解除\n// @name:zh-TW        網頁限制解除\n// @name:ja           ウェブの規制緩和\n\n// @description       通杀大部分网站，可以解除禁止复制、剪切、选择文本、右键菜单的限制。\n// @description:en    Pass to kill most of the site, you can lift the restrictions prohibited to copy, cut, select the text, right-click menu.\n// @description:zh    通杀大部分网站，可以解除禁止复制、剪切、选择文本、右键菜单的限制。\n// @description:zh-CN 通杀大部分网站，可以解除禁止复制、剪切、选择文本、右键菜单的限制。\n// @description:zh-TW 通殺大部分網站，可以解除禁止復制、剪切、選擇文本、右鍵菜單的限制。\n// @description:ja    サイトのほとんどを殺すために渡し、あなたは、コピー切り取り、テキスト、右クリックメニューを選択することは禁止の制限を解除することができます。\n\n// @homepageURL       https://cat7373.github.io/remove-web-limits/\n// @supportURL        https://github.com/Cat7373/remove-web-limits/issues/\n// @updateURL         https://cat7373.github.io/remove-web-limits/remove_web_limits.user.js\n\n// @author            Cat73\n// @version           1.3\n// @license           LGPLv3\n\n// @compatible        chrome Chrome_46.0.2490.86 + TamperMonkey + 脚本_1.3 测试通过\n// @compatible        firefox Firefox_42.0 + GreaseMonkey + 脚本_1.2.1 测试通过\n// @compatible        opera Opera_33.0.1990.115 + TamperMonkey + 脚本_1.1.3 测试通过\n// @compatible        safari 未测试\n\n// @match             *://*/*\n// @grant             none\n// @run-at            document-start\n// ==/UserScript==\n(function() {\n  'use strict';\n\n  // 域名规则列表\n  var rules = {\n    black_rule: {\n      name: \"black\",\n      hook_eventNames: \"\",\n      unhook_eventNames: \"\"\n    },\n    default_rule: {\n      name: \"default\",\n      hook_eventNames: \"contextmenu|select|selectstart|copy|cut|dragstart\",\n      unhook_eventNames: \"mousedown|mouseup|keydown|keyup\",\n      dom0: true,\n      hook_addEventListener: true,\n      hook_preventDefault: true,\n      hook_set_returnValue: true,\n      add_css: true\n    }\n  };\n  // 域名列表\n  var lists = {\n    // 黑名单\n    black_list: [\n      /.*\\.youtube\\.com.*/,\n      /.*\\.wikipedia\\.org.*/,\n      /mail\\.qq\\.com.*/,\n      /translate\\.google\\..*/\n    ]\n  };\n\n  // 要处理的 event 列表\n  var hook_eventNames, unhook_eventNames, eventNames;\n  // 储存名称\n  var storageName = getRandStr('qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM', parseInt(Math.random() * 12 + 8));\n  // 储存被 Hook 的函数\n  var EventTarget_addEventListener = EventTarget.prototype.addEventListener;\n  var document_addEventListener = document.addEventListener;\n  var Event_preventDefault = Event.prototype.preventDefault;\n\n  // Hook addEventListener proc\n  function addEventListener(type, func, useCapture) {\n    var _addEventListener = this === document ? document_addEventListener : EventTarget_addEventListener;\n    if(hook_eventNames.indexOf(type) >= 0) {\n      _addEventListener.apply(this, [type, returnTrue, useCapture]);\n    } else if(this && unhook_eventNames.indexOf(type) >= 0) {\n      var funcsName = storageName + type + (useCapture ? 't' : 'f');\n\n      if(this[funcsName] === undefined) {\n        this[funcsName] = [];\n        _addEventListener.apply(this, [type, useCapture ? unhook_t : unhook_f, useCapture]);\n      }\n\n      this[funcsName].push(func);\n    } else {\n      _addEventListener.apply(this, arguments);\n    }\n  }\n\n  // 清理循环\n  function clearLoop() {\n    var elements = getElements();\n\n    for(var i in elements) {\n      for(var j in eventNames) {\n        var name = 'on' + eventNames[j];\n        if(elements[i][name] !== null && elements[i][name] !== onxxx) {\n          if(unhook_eventNames.indexOf(eventNames[j]) >= 0) {\n            elements[i][storageName + name] = elements[i][name];\n            elements[i][name] = onxxx;\n          } else {\n            elements[i][name] = null;\n          }\n        }\n      }\n    }\n  }\n\n  // 返回true的函数\n  function returnTrue(e) {\n    return true;\n  }\n  function unhook_t(e) {\n    return unhook(e, this, storageName + e.type + 't');\n  }\n  function unhook_f(e) {\n    return unhook(e, this, storageName + e.type + 'f');\n  }\n  function unhook(e, self, funcsName) {\n    var list = self[funcsName];\n    for(var i in list) {\n      list[i](e);\n    }\n\n    e.returnValue = true;\n    return true;\n  }\n  function onxxx(e) {\n    var name = storageName + 'on' + e.type;\n    this[name](e);\n\n    e.returnValue = true;\n    return true;\n  }\n\n  // 获取随机字符串\n  function getRandStr(chs, len) {\n    var str = '';\n\n    while(len--) {\n      str += chs[parseInt(Math.random() * chs.length)];\n    }\n\n    return str;\n  }\n\n  // 获取所有元素 包括document\n  function getElements() {\n    var elements = Array.prototype.slice.call(document.getElementsByTagName('*'));\n    elements.push(document);\n\n    return elements;\n  }\n\n  // 添加css\n  function addStyle(css) {\n    var style = document.createElement('style');\n    style.innerHTML = css;\n    document.head.appendChild(style);\n  }\n\n  // 获取目标域名应该使用的规则\n  function getRule(url) {\n    function testUrl(list, url) {\n      for(var i in list) {\n        if(list[i].test(url)) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    if(testUrl(lists.black_list, url)) {\n      return rules.black_rule;\n    }\n\n    return rules.default_rule;\n  }\n\n  // 初始化\n  function init() {\n    // 获取当前域名的规则\n    var url = window.location.host + window.location.pathname;\n    var rule = getRule(url);\n\n    // 设置 event 列表\n    hook_eventNames = rule.hook_eventNames.split(\"|\");\n    // TODO Allowed to return value\n    unhook_eventNames = rule.unhook_eventNames.split(\"|\");\n    eventNames = hook_eventNames.concat(unhook_eventNames);\n\n    // 调用清理 DOM0 event 方法的循环\n    if(rule.dom0) {\n      setInterval(clearLoop, 30 * 1000);\n      setTimeout(clearLoop, 2500);\n      window.addEventListener('load', clearLoop, true);\n      clearLoop();\n    }\n\n    // hook addEventListener\n    if(rule.hook_addEventListener) {\n      EventTarget.prototype.addEventListener = addEventListener;\n      document.addEventListener = addEventListener;\n    }\n\n    // hook preventDefault\n    if(rule.hook_preventDefault) {\n      Event.prototype.preventDefault = function() {\n        if(eventNames.indexOf(this.type) < 0) {\n          Event_preventDefault.apply(this, arguments);\n        }\n      };\n    }\n\n    // Hook set returnValue\n    if(rule.hook_set_returnValue) {\n      Event.prototype.__defineSetter__('returnValue', function() {\n        if(this.returnValue !== true && eventNames.indexOf(this.type) >= 0) {\n          this.returnValue = true;\n        }\n      });\n    }\n\n    console.debug('url: ' + url, 'storageName：' + storageName, 'rule: ' + rule.name);\n\n    // 添加CSS\n    if(rule.add_css) {\n      addStyle('html, * {-webkit-user-select:text!important; -moz-user-select:text!important; user-select:text!important; -ms-user-select:text!important; -khtml-user-select:text!important;}');\n    }\n  }\n\n  init();\n})();\n```\n\n## 某乎\n- 标题隐藏\n- 外链免确认\n- 复制移除copy@版权信息\n\n```\n// ==UserScript==\n// @name         某乎\n// @namespace    undefined\n// @version      0.1\n// @description  屏蔽网页版某乎查看答案时自动浮现的问题标题\n// @author       林霖\n// @connect-src  www.zhihu.com\n// @include      *://www.zhihu.com/question/*\n// ==/UserScript==\n\n//标题隐藏\n(function() {\n    'use strict';\n\n    var titleBlock=document.getElementsByClassName(\"QuestionHeader-title\")[0];\n    titleBlock.style.display=\"none\";\n})();\n\n//外链免确认\nif(location.host==='link.zhihu.com') {\n    let regRet = location.search.match(/target=(.+?)(&|$)/);\n    if(regRet && regRet.length==3)\n        location.href = decodeURIComponent(regRet[1]);\n}\nelse{\n    window.addEventListener('click', function(e){\n        let dom = e.target,max_times = 5;\n        while(dom && max_times--) {\n            if(dom.nodeName.toUpperCase()==='A') {\n                let regRet = dom.search.match(/target=(.+?)(&|$)/);\n                if(regRet && regRet.length==3)\n                    dom.href = decodeURIComponent(regRet[1]);\n                return;\n            }\n            else\n                dom = dom.parentNode;\n        }\n    });\n}\n\n//复制移除copy@版权信息\n(function() {\n    'use strict';\n\n    function addLink(e) {\n        e.preventDefault();\n        var pagelink = '\\nRead more: ' + document.location.href,\n            copytext = window.getSelection();\n        var clipdata = e.clipboardData || window.clipboardData;\n        if (clipdata) {\n            clipdata.setData('Text', copytext);\n        }\n    }\n    document.addEventListener('copy', addLink);\n})();\n```","categories":["技术博客"]},{"title":"Tomcat安装部署常规配置","url":"//19881.html","content":"\n## Tomcat配置优化\n\n### 修改`server.xml`\n\n> [Tomcat 8.5 安全配置与高并发优化](https://www.cnblogs.com/opma/p/11712314.html)\n\n默认配置\n```\n\n<Connector \n   port=\"8080\" \n   protocol=\"HTTP/1.1\" \n   connectionTimeout=\"20000\" \n   redirectPort=\"8443\" \n/>\n\n```\n\n优化配置\n```\n # 用此项配置 protocol=\"org.apache.coyote.http11.Http11Nio2Protocol\"启动时会有警告\n # 警告 [main] org.apache.tomcat.util.net.Nio2Endpoint.bind The NIO2 connector requires an exclusive executor to operate properly on shutdown\n\n<Connector \n  executor=\"tomcatThreadPool\"\n  port=\"8080\" \n  protocol=\"org.apache.coyote.http11.Http11NioProtocol\" \n  connectionTimeout=\"40000\" \n  maxConnections=\"10000\" \n  redirectPort=\"8443\" \n  enableLookups=\"false\" \n  acceptCount=\"100\" \n  maxPostSize=\"10485760\" \n  compression=\"on\" \n  disableUploadTimeout=\"true\" \n  compressionMinSize=\"2048\" \n  acceptorThreadCount=\"2\" \n  compressableMimeType=\"text/html,text/xml,text/plain,text/css,text/javascript,application/javascript\" \n  maxHttpHeaderSize=\"8192\"\n  processorCache=\"20000\"\n  tcpNoDelay=\"true\"\n  connectionLinger=\"5\"\n  server=\"Server Version 11.0\"\n  URIEncoding=\"utf-8\"\n/>\n```\n\n优化配置升级(连接池)\n> 未配置`APR`可使用`org.apache.coyote.http11.Http11NioProtocol`\n\n```\n\n<Executor name=\"tomcatThreadPool\" \n                namePrefix=\"catalina-exec-\" \n                maxThreads=\"800\" \n                minSpareThreads=\"100\"\n                maxSpareThreads=\"500\"\n                prestartminSpareThreads=\"true\"\n                maxQueueSize=\"200\" \n                maxIdleTime=\"30000\"\n        />\n\t\t\n\t\t<Connector  executor=\"tomcatThreadPool\"\n               port=\"8081\" \n               URIEncoding=\"UTF-8\"\n               protocol=\"org.apache.coyote.http11.Http11AprProtocol\"\n               connectionTimeout=\"10000\"\n               acceptCount=\"200\"\n               acceptorThreadCount=\"2\"         \n               maxConnections=\"8192\"          \n               enableLookups=\"false\"\n               redirectPort=\"8443\"\n               server=\" \"\n               compression=\"on\" \n               compressableMimeType=\"text/html,text/xml,text/plain,text/css,text/javascript,application/javascript\"\n        />\n```\n\n---\n\n`server.xml`配置供参考\n>已启用`apr`\n\n```\n<Executor name=\"tomcatThreadPool\" \n                namePrefix=\"catalina-exec-\" \n                maxThreads=\"800\" \n                minSpareThreads=\"100\"\n                maxSpareThreads=\"500\"\n                prestartminSpareThreads=\"true\"\n                maxQueueSize=\"100\" \n                maxIdleTime=\"20000\"\n        />\n\t\t\n\t\t<Connector  executor=\"tomcatThreadPool\"\n               port=\"7171\" \n               URIEncoding=\"UTF-8\"\n               protocol=\"org.apache.coyote.http11.Http11NioProtocol\"\n               connectionTimeout=\"20000\"\n               acceptCount=\"100\"\n               acceptorThreadCount=\"2\"         \n               maxConnections=\"8192\"          \n               enableLookups=\"false\"\n               redirectPort=\"8443\"\n               server=\" \"\n               compression=\"on\" \n               compressableMimeType=\"text/html,text/xml,text/plain,text/css,text/javascript,application/javascript\"\n        />\n```\n\n\n#### 配置对照\n```\nprotocol，Tomcat 8 设置 nio2 更好：org.apache.coyote.http11.Http11Nio2Protocol（如果这个用不了，就用下面那个）\nprotocol，Tomcat 6、7 设置 nio 更好：org.apache.coyote.http11.Http11NioProtocol\nenableLookups，禁用DNS查询\nacceptCount，指定当所有可以使用的处理请求的线程数都被使用时，可以放到处理队列中的请求数，超过这个数的请求将不予处理，默认设置 100\nmaxPostSize，以 FORM URL 参数方式的 POST 提交方式，限制提交最大的大小，默认是 2097152(2兆)，它使用的单位是字节。10485760 为 10M。如果要禁用限制，则可以设置为 -1。\nmaxPostSize：设置由容器解析的URL参数的最大长度，-1(小于0)为禁用这个属性，默认为2097152(2M) 请注意， FailedRequestFilter 过滤器可以用来拒绝达到了极限值的请求。\nacceptorThreadCount，用于接收连接的线程的数量，默认值是1。一般这个指需要改动的时候是因为该服务器是一个多核CPU，如果是多核 CPU 一般配置为 2.\nacceptorThreadCount：用于接受连接的线程数量。增加这个值在多CPU的机器上,尽管你永远不会真正需要超过2。 也有很多非维持连接,您可能希望增加这个值。默认值是1。\nconnectionTimeout：Connector接受一个连接后等待的时间(milliseconds)，默认值是60000。\nmaxConnections：这个值表示最多可以有多少个socket连接到tomcat上\nmaxHttpHeaderSize：http请求头信息的最大程度，超过此长度的部分不予处理。一般8K。\ncompression：是否启用GZIP压缩 on为启用（文本数据压缩） off为不启用， force 压缩所有数据\ndisableUploadTimeout：这个标志允许servlet容器使用一个不同的,通常长在数据上传连接超时。 如果不指定,这个属性被设置为true,表示禁用该时间超时。\ncompressionMinSize：当超过最小数据大小才进行压缩\ncompressableMimeType：配置想压缩的数据类型\nURIEncoding：网站一般采用UTF-8作为默认编码。\nprocessorCache：协议处理器缓存的处理器对象来提高性能。 该设置决定多少这些对象的缓存。-1意味着无限的,默认是200。 如果不使用Servlet 3.0异步处理,默认是使用一样的maxThreads设置。                 如果使用Servlet 3.0异步处理,默认是使用大maxThreads和预期的并发请求的最大数量(同步和异步)。\ntcpNoDelay：如果设置为true,TCP_NO_DELAY选项将被设置在服务器套接字,而在大多数情况下提高性能。这是默认设置为true。\nconnectionLinger：秒数在这个连接器将持续使用的套接字时关闭。默认值是 -1,禁用socket 延迟时间。\nserver：隐藏Tomcat版本信息，首先隐藏HTTP头中的版本信息\n```\n\n\n### 禁用 AJP\n> Tomcat8.5.88 当前教程版本中是默认关闭`AJP`的\n\n```\n<!-- <Connector port=\"8009\" protocol=\"AJP/1.3\" redirectPort=\"8443\" /> -->\n```\n\n### 隐藏 Tomcat 版本号\n\n```\ncd /usr/local/tomcat/lib/\n```\n\n```\nunzip catalina.jar\n```\n\n```\ncd org/apache/catalina/util\n```\n\n```\nvim ServerInfo.properties\n```\n\n``` \n#server.info=Apache Tomcat/8.5.16\n#server.number=8.5.16.0\n#server.built=Jun 21 2017 17:01:09 UTC\n\nserver.info=\nserver.number=\nserver.built=\n```\n\n## Tomcat 配置APR线程池\n\n\n\n[参考文档（搭建OK）](https://www.cnblogs.com/bigdevilking/p/9497991.html)\n\n[辅助-参考文档](https://blog.csdn.net/weixin_43703769/article/details/108323177)\n\n### 安装成功配置情况示例参考\n\nTomcat 8.5.88 成功开启APR模式依赖组件版本信息如下：\n- [apr-1.6.3.tar.gz](https://archive.apache.org/dist/apr/apr-1.6.3.tar.gz)\n- [apr-iconv-1.2.2.tar.gz](https://archive.apache.org/dist/apr/apr-iconv-1.2.2.tar.gz)\n- [apr-util-1.6.1.tar.gz](https://archive.apache.org/dist/apr/apr-util-1.6.1.tar.gz) \n- tomcat-native (Tomcat/bin/ 目录下自带)\n\n### 下载依赖文件\n\n[最新依赖下载地址](https://apr.apache.org/download.cgi)\n\n[历史依赖下载地址](https://archive.apache.org/dist/apr/)\n\n \n### 编译环境准备\n```\nyum -y install gcc gcc-c++ libtool* autoconf automake expat-devel perl perl-devel\n```\n\n### 编译apr组件\n\napr\n\n```\ncd /path/apr/apr-1.6.3\n```\n\n```\n./configure --prefix=/usr/local/apr\n```\n\n```\nmake && make install\n```\n\napr-iconv\n```\ncd /path/apr/apr-iconv-1.2.2\n```\n\n```\n./configure --prefix=/usr/local/apr-iconv --with-apr=/usr/local/apr\n```\n\n```\nmake && make install\n```\n\napr-util\n```\ncd /path/apr/apr-util-1.6.1\n```\n\n```\n./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr --with-apr-iconv=/usr/local/apr-iconv/bin/apriconv\n```\n\n```\nmake && make install\n```\n\ntomcat-native\n```\ncd /path/tomcat-native-1.2.16-src/native \n```\n\n```\n./configure --with-java-home=/opt/jdk/jdk1.8.0_151/  --with-ssl=/usr/local/openssl\n```\n\n```\nmake && make install\n```\n\n### 错误情况记录\n#### openssl版本低\n![](./Tomcat安装部署常规配置/Snipaste_2023-11-27_10-02-39.png)\n\n```\nwget https://www.openssl.org/source/openssl-1.1.0g.tar.gz --no-check-certificate\n```\n\n```\ntar -zxvf openssl-1.1.0g.tar.gz\n```\n\n```\ncd openssl-1.1.0g\n```\n\n```\n./config --prefix=/usr/local/openssl\n```\n\n> ./config -t\n\n```\nmake && make install\n```\n\n### 修改环境变量\n```\nvim /etc/profile\n```\n\n```\nexport LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/apr/lib\n```\n\n```\nsource /etc/profile\n```\n\n修改conf/server.xml配置文件\n\n- 连接池\n```\nprotocol=\"org.apache.coyote.http11.Http11AprProtocol\"\n```\n\n替换命令`vim`操作\n> ```\n> :%s/protocol=\"org.apache.coyote.http11.Http11NioProtocol\"/protocol=\"org.apache.coyote.http11.Http11AprProtocol\"/g\n> ```\n\n修改setenv.sh(可忽略)\n```\n-Djava.library.path=/usr/local/apr/lib\n```\n> 配置apr环境变量后不需要单独配置当前项\n\n### Apr启用成功截图\n![](./Tomcat安装部署常规配置/Snipaste_2023-11-03_13-57-37.png)\n \n\n## 设置环境`setenv.sh`\n\n> 注意：若配置一台服务器多个Tomcat，其他Tomcat的`setenv.sh`中'$CATALINA_BASE'也需要修改!\n\n```\n#Java环境(注意：若不配置jdk环境，以service方式启动报错！！！)\nJAVA_HOME=/opt/jdk1.8.0_151\n\n#配置tomcat启动后将进程号保存至 ./bin/tomcat.pid 文件\nCATALINA_PID=\"$CATALINA_BASE/tomcat.pid\"\n\n#添加JAVA启动变量配置\n### 末尾可添加针对开启jspAgent配置： -javaagent:/usr/local/services/tomcat_8.5.88/8084/jspAgent/JSPAgent.jar ###\n\n##默认一般jdk启动配置参数\n##JAVA_OPTS=\"-server -XX:PermSize=256M -XX:MaxPermSize=1024m -Xms512M -Xmx1024M -XX:MaxNewSize=256m\"\n##修改后的jdk启动配置参数（APR模式）\n##JAVA_OPTS=\"-Djava.io.tmpdir=/tmp -Djava.security.egd=file:/dev/./urandom -Djava.awt.headless=true -Dfile.encoding=UTF-8 -server -XX:+TieredCompilation -Xms8192m -Xmx8192m -XX:NewSize=6144m -XX:MaxNewSize=6144m -XX:PermSize=512m -XX:MaxPermSize=512m -XX:ReservedCodeCacheSize=512M -XX:SurvivorRatio=8 -XX:ParallelGCThreads=8 -XX:+UseAdaptiveSizePolicy -XX:+UseCompressedOops -XX:+UseBiasedLocking -XX:+UseParNewGC  -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -XX:+CMSParallelRemarkEnabled -XX:+CMSParallelInitialMarkEnabled -XX:CMSInitiatingOccupancyFraction=70  -XX:+PrintCommandLineFlags -XX:+PrintGCTimeStamps -XX:+PrintGCDetails -XX:+PrintHeapAtGC -XX:+PrintTenuringDistribution -Xloggc:/root/gc.$$.log -Djava.library.path=/usr/local/apr/lib\"\n##修改后的jdk启动配置参数（非APR模式）\nJAVA_OPTS=\"-Djava.io.tmpdir=/tmp -Djava.security.egd=file:/dev/./urandom -Djava.awt.headless=true -Dfile.encoding=UTF-8 -server -XX:+TieredCompilation -Xms8192m -Xmx8192m -XX:NewSize=6144m -XX:MaxNewSize=6144m -XX:PermSize=512m -XX:MaxPermSize=512m -XX:ReservedCodeCacheSize=512M -XX:SurvivorRatio=8 -XX:ParallelGCThreads=8 -XX:+UseAdaptiveSizePolicy -XX:+UseCompressedOops -XX:+UseBiasedLocking -XX:+UseParNewGC  -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -XX:+CMSParallelRemarkEnabled -XX:+CMSParallelInitialMarkEnabled -XX:CMSInitiatingOccupancyFraction=70  -XX:+PrintCommandLineFlags -XX:+PrintGCTimeStamps -XX:+PrintGCDetails -XX:+PrintHeapAtGC -XX:+PrintTenuringDistribution -Xloggc:../logs/gclogs/gc.$$.log\"\n```\n\n> 某环境配置项(可参考)\n\n```\nJAVA_OPTS=\"-server -Xms7168m -Xmx7168m -Xmn2400m -XX:MetaspaceSize=512m -XX:MaxMetaspaceSize=512m -XX:ReservedCodeCacheSize=1024M -XX:SurvivorRatio=8 -Djava.io.tmpdir=/tmp -Djava.security.egd=file:/dev/./urandom -Djava.awt.headless=true -Dfile.encoding=UTF-8 -XX:+AggressiveOpts -XX:+TieredCompilation -XX:+UseCompressedOops -XX:+UseBiasedLocking -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -XX:+CMSParallelRemarkEnabled -XX:+CMSParallelInitialMarkEnabled -XX:CMSInitiatingOccupancyFraction=75 -XX:+PrintCommandLineFlags -XX:+HeapDumpOnOutOfMemoryError -XX:CMSFullGCsBeforeCompaction=2 -XX:SoftRefLRUPolicyMSPerMB=0 -Djava.library.path=/usr/local/apr/lib -javaagent:/usr/local/services/tomcat851/jspAgent/JSPAgent.jar\";\n```\n---\n\n\n\n## 日志按日分割\n\n在`bin`目录下创建`back_catalina_out.sh`\n\n```\nvim back_catalina_out.sh\n```\n\n脚本内容\n```\n#!/bin/bash\n#tomcat日志目录\nlog_path=/usr/local/services/tomcat_8.5.88/8081/logs\nd=`date +%Y-%m-%d`\nd30=`date -d'30 day ago' +%Y-%m-%d`\ncd ${log_path} && cp catalina.out $log_path/catalina.out.$d.log\necho > catalina.out\nrm -rf $log_path/catalina.out.${d30}.log\n```\n\n赋予执行权限\n```\nchmod u+x back_catalina_out.sh\n```\n\n添加`corn`系统定时任务\n```\n0 0 * * * /usr/local/services/tomcat_8.5.88/8081/bin/back_catalina_out.sh\n```\n\n---\n\n### 日志优化\n环境变量配置\n```\nTomcat_LOGPATH_9091=/usr/local/services/tomcat_9.0.83/9091/logs\nexport Tomcat_LOGPATH_9091 \n```\n\n脚本文件修改\n```\n#!/bin/bash\n#tomcat日志目录\nlog_path=${Tomcat_LOGPATH_9091}\nd=`date +%Y-%m-%d`\nd30=`date -d'30 day ago' +%Y-%m-%d`\ncd ${log_path} && cp catalina.out $log_path/catalina.out.$d.log\necho > catalina.out\nrm -rf $log_path/catalina.out.${d30}.log\n```\n\n> cron定时任务执行的sh脚本中涉及引用环境变量配置，则需要修改定时任务项配置\n\n[Linux 中 Crontab 执行时的环境变量问题](https://www.cnblogs.com/besharp/p/13650175.html)\n\n```\n0 0 * * * . /etc/profile;/bin/sh /usr/local/services/tomcat_9.0.83/9091/bin/back_catalina_out.sh\n```\n\n\n\n## 配置Tomcat随系统启动\n\n新增配置文件\n```\nvi /usr/lib/systemd/system/tomcat8.service\n```\n\n文件内容\n```\n[Unit]\nDescription=Tomcat\nAfter=syslog.target network.target remote-fs.target nss-lookup.target\n\n[Service]\nType=oneshot\n#Tomcat的目录地址\nExecStart=/usr/local/services/tomcat_8.5.88/8081/bin/startup.sh \nExecStop=/usr/local/services/tomcat_8.5.88/8081/bin/shutdown.sh\nExecReload=/bin/kill -s HUP $MAINPID\nRemainAfterExit=yes\n\n[Install]\nWantedBy=multi-user.target\n```\n\n设置开机启动\n```\nsystemctl enable tomcat8\n```\n\n常见命令\n```\n#启动tomcat\nsystemctl start tomcat8_8082.service\n#关闭tomcat\nsystemctl stop tomcat8_8082.service\n#重启tomcat \nsystemctl restart tomcat8_8082.service\n#查看状态tomcat\nsystemctl status tomcat8_8082.service\n```\n\n\n## Linux配置多个Tomcat容器\n\n复制已配置好Tomcat目录`8081`\n```\ncp -rf 8081 8082\ncp -rf 8081 8083\ncp -rf 8081 8084\n```\n\n### 配置多Tomcat环境变量\n\n修改`/etc/profile`配置文件\n> 命名规则：CATALINA-{序号}-BASE-{版本号}\n```\n##########first tomcat###########\nCATALINA_1_BASE_8_5_88=/usr/local/services/tomcat_8.5.88/8081\nCATALINA_1_HOME_8_5_88=/usr/local/services/tomcat_8.5.88/8081\nTOMCAT_1_HOME_8_5_88=/usr/local/services/tomcat_8.5.88/8081\nexport CATALINA_1_BASE_8_5_88 CATALINA_1_HOME_8_5_88 TOMCAT_1_HOME_8_5_88\n##########first tomcat###########\n\n##########second tomcat##########\nCATALINA_2_BASE_8_5_88=/usr/local/services/tomcat_8.5.88/8082\nCATALINA_2_HOME_8_5_88=/usr/local/services/tomcat_8.5.88/8082\nTOMCAT_2_HOME_8_5_88=/usr/local/services/tomcat_8.5.88/8082\nexport CATALINA_2_BASE_8_5_88 CATALINA_2_HOME_8_5_88 TOMCAT_2_HOME_8_5_88\n##########second tomcat##########\n\n##########third tomcat##########\nCATALINA_3_BASE_8_5_88=/usr/local/services/tomcat_8.5.88/8083\nCATALINA_3_HOME_8_5_88=/usr/local/services/tomcat_8.5.88/8083\nTOMCAT_3_HOME_8_5_88=/usr/local/services/tomcat_8.5.88/8083\nexport CATALINA_3_BASE_8_5_88 CATALINA_3_HOME_8_5_88 TOMCAT_3_HOME_8_5_88\n##########third tomcat##########\n\n##########fourth tomcat##########\nCATALINA_4_BASE_8_5_88=/usr/local/services/tomcat_8.5.88/8084\nCATALINA_4_HOME_8_5_88=/usr/local/services/tomcat_8.5.88/8084\nTOMCAT_4_HOME_8_5_88=/usr/local/services/tomcat_8.5.88/8084\nexport CATALINA_4_BASE_8_5_88 CATALINA_4_HOME_8_5_88 TOMCAT_4_HOME_8_5_88\n##########fourth tomcat##########\n```\n\n使配置文件生效\n```\nsource /etc/profile\n```\n\n验证配置文件\n```\necho $CATALINA_1_BASE_8_5_88\n```\n\n修改Tomcat配置项\n> 如果新服务器中从未安装过Tomcat则第一个8081不需要修改\n>\n> 如果新服务器中已存在旧Tomcat，则为了避免CataLina的环境变量冲突，8081也需要进行修改\n\n\n\n`vim`打开`catalina.sh`文件执行以下命令全局替换\n\n8081\n```\n:%s/CATALINA_BASE/CATALINA_1_BASE_8_5_88/g\n:%s/CATALINA_HOME/CATALINA_1_HOME_8_5_88/g\n```\n\n8082\n```\n:%s/CATALINA_BASE/CATALINA_2_BASE_8_5_88/g\n:%s/CATALINA_HOME/CATALINA_2_HOME_8_5_88/g\n```\n\n8083\n```\n:%s/CATALINA_BASE/CATALINA_3_BASE_8_5_88/g\n:%s/CATALINA_HOME/CATALINA_3_HOME_8_5_88/g\n```\n\n8084\n```\n:%s/CATALINA_BASE/CATALINA_4_BASE_8_5_88/g\n:%s/CATALINA_HOME/CATALINA_4_HOME_8_5_88/g\n```\n\n### 配置多Tomcat的`setenv.sh`\n修改`setenv.sh`\n\n8081\n```\nCATALINA_PID=\"$CATALINA_1_BASE_8_5_88/tomcat.pid\"\n```\n8082\n```\nCATALINA_PID=\"$CATALINA_2_BASE_8_5_88/tomcat.pid\"\n```\n8083\n```\nCATALINA_PID=\"$CATALINA_3_BASE_8_5_88/tomcat.pid\"\n```\n8084\n```\nCATALINA_PID=\"$CATALINA_4_BASE_8_5_88/tomcat.pid\"\n```\n\n### 配置多Tomcat的端口\n修改端口\n```\n### 示例：8082 修改端口 ###\n#修改关闭端口(原8015)：\n<Server port=\"8025\" shutdown=\"SHUTDOWN\"  ... > \n#修改访问端口(原8081)：\n<Connector port=\"8082\" ... > \n#修改监听端口（AJP默认是注释关闭的、不用修改）：\n#<Connector port=\"8011\" protocol=\"AJP/1.3\"  ... >\n```\n \n\n## 迁移部署新环境\n> 搭建环境VM虚拟机中，需要迁移已配置好到生产环境部署\n\n### 迁移Tomcat旧环境准备\n压缩`Tomcat`环境\n```\ntar -zvcf tomcat_8.5.88.tar.gz tomcat_8.5.88\n```\n\n解压缩\n```\ntar -zxvf tomcat_8.5.88.tar.gz (-C 指定目录 )\n```\n\n上传至新服务器环境\n> [scp命令传文件](https://blog.csdn.net/a545812327/article/details/111313810)\n\n```\n#scp【本地文件的路径】【服务器用户名】@【服务器地址】：【服务器上存放文件的路径】\nscp tomcat_8.5.88.tar.gz  root@192.168.116.129:/root/\n```\n\n### 迁移Tomcat新环境部署\n\n创建部署目录`service`\n```\nmkdir -p /usr/local/services/\n```\n\n移动tomcat环境压缩包并解压\n```\n#移动\nmv /root/tomcat_8.5.88.tar.gz ./\n#解压\ntar -zxvf tomcat_8.5.88.tar.gz\n```\n\n检查目录是否与原tomcat服务器环境一致\n```\n#pwd\n/usr/local/services/tomcat_8.5.88\n```\n\n配置Tomcat的环境变量\n[点击跳转](#Linux配置多个Tomcat容器)\n \n### 配置日志分割\n[点击这里跳转指定位置](#日志按日分割)\n\n\n\n### 配置系统启动\n[点击这里跳转指定位置](#配置Tomcat随系统启动)\n \n\n## 配置GC日志\n[JDK8打印并分析GC日志](https://www.cnblogs.com/dtyy/p/15873735.html)\n> 详解可参考博客文档信息\n\n\n```\n-XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:+UseSerialGC -Xmx1m -Xloggc:./gc-serial.log\n```\n\n> 参数\t功能\n-XX:+PrintGC\t输出GC日志\n-XX:+PrintGCDetails\t输出GC的详细日志\n-XX:+PrintGCTimeStamps\t输出GC的时间戳（以基准时间的形式）\n-XX:+PrintGCDateStamps\t输出GC的时间戳（以日期的形式，如 2013-05-04T21:53:59.234+0800）\n-XX:+PrintHeapAtGC\t在进行GC的前后打印出堆的信息\n-Xloggc:gc.log\t日志文件的输出路径\n\n## 注意事项\n### 自动部署已关闭\n```\n <Host name=\"localhost\"  appBase=\"webapps\" unpackWARs=\"true\" autoDeploy=\"false\">\n```\n\n\n### 创建gcLog日志目录\n\n> setenv.sh的配置gclog的路径可修改\n>> 如果有设gc日志打印输出则需要配置gc日志目录 \n\n```\n#示例：Tomcat8081\nmkdir -p /usr/local/services/tomcat_8.5.88/8081/logs/gclogs\n```\n\n## Tomcat配置定时重启\n\n[Linux操作系统用crontab做定时关闭启动tomcat](https://blog.csdn.net/weixin_34066347/article/details/90505811)\n\n[查看crontab任务是否执行以及执行日志](https://blog.csdn.net/liaoyanyunde/article/details/86572370)\n\n[crontab报错：errors in crontab file, can't install](https://blog.csdn.net/andyguan01_2/article/details/89918026)\n\n---\n\n`cron`定时任务配置\n> 打印定时任务日志输出\n\n\n11月30日11时51分执行任务\n```\n51 11 30 11 * /bin/sh /opt/sh_file/tomcat.sh >> /var/log/tomcat_sh.log 2>&1\n```\n\n\n`Tomcat.sh`脚本\n```\n#!/bin/sh\n#./etc/profile\n\n#防止cron定时执行由于无java环境导致失败情况\nexport JAVA_HOME=/opt/jdk/jdk1.8.0_151\n\nsh  /usr/local/services/tomcat_8.5.88/8081/bin/shutdown.sh\n\nsleep 30s\n\nsh  /usr/local/services/tomcat_8.5.88/8081/bin/startup.sh\n```\n\n\n注意:\n`setenv.sh`文件中最好也配置下Java环境变量路径，防止以service服务方式启动tomcat失败情况。\n\n![](./Tomcat安装部署常规配置/Snipaste_2023-11-30_11-56-44.png)\n\n\n## Tomcat9.0.83版本升级\n\n## Tomcat9 升级注意事项\n\n配置文件`server.xml`变更项:\n```\n#compressableMimeType Tomcat9.0以前参数配置项\ncompressibleMimeType\n```\n\n连接池`Executor`配置项需变更\n```\n#以下配置需移除\nmaxSpareThreads\nprestartminSpareThreads\n```\n\n### 写在最前面的话\n\n**前言：将打包好环境迁移部署其他服务器时，需要注意以下几点**：\n- 配置`etc/profile`环境变量\n  - Tomcat环境\n  - 日志脚本\n- `cron`的定时任务\n  - 日志\n- `firewalld`防火墙\n  - 开启9091-9094防火墙\n\n---\n\n1. 环境变量 `/etc/profile`\n> 此处示例仅`9091`，其余`9092-9094`的tomcat容器可自行参照博客配置\n>\n> 【完整配置示例请滚动到底部查看（包括9091-9094）】\n```\nCATALINA_1_BASE_9_0_83=/usr/local/services/tomcat_9.0.83/9091/\nCATALINA_1_HOME_9_0_83=/usr/local/services/tomcat_9.0.83/9091/\nTOMCAT_1_HOME_9_0_83=/usr/local/services/tomcat_9.0.83/9091/\nexport CATALINA_1_BASE_9_0_83 CATALINA_1_HOME_9_0_83 TOMCAT_1_HOME_9_0_83\n```\n\n1. bin目录下环境配置`setenv.sh`\n> 若打印gc日志，需要提前创建gc日志目录\n\n```\nJAVA_HOME=/opt/jdk/jdk1.8.0_151\n\nCATALINA_PID=\"$CATALINA_1_BASE_9_0_83/tomcat.pid\"\n\nJAVA_OPTS=\"-server -Xms7168m -Xmx7168m -Xmn2048m -XX:MetaspaceSize=512m -XX:MaxMetaspaceSize=512m -XX:ReservedCodeCacheSize=1024M -XX:SurvivorRatio=8 -Djava.io.tmpdir=/tmp -Djava.security.egd=file:/dev/./urandom -Djava.awt.headless=true -Dfile.encoding=UTF-8 -XX:+AggressiveOpts -XX:+TieredCompilation -XX:+UseCompressedOops -XX:+UseBiasedLocking -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -XX:+CMSParallelRemarkEnabled -XX:+CMSParallelInitialMarkEnabled -XX:CMSInitiatingOccupancyFraction=75 -XX:+PrintCommandLineFlags -XX:+HeapDumpOnOutOfMemoryError -XX:CMSFullGCsBeforeCompaction=2 -XX:SoftRefLRUPolicyMSPerMB=1000 -XX:+PrintGCTimeStamps -XX:+PrintGCDetails -XX:+PrintHeapAtGC -XX:+PrintTenuringDistribution -Xloggc:../logs/gclogs/gc.$$.log -Djava.library.path=/usr/local/apr/lib -javaagent:/usr/local/services/tomcat_9.0.83/9091/jspAgent/JSPAgent.jar\";\n```\n\n3. 替换`catalina.sh`\n>在`vim`中按`:`号后输入以下命令全局替换\n\nCATALINA_BASE\n```\n%s/CATALINA_BASE/CATALINA_1_BASE_9_0_83/g\n```\n\nCATALINA_HOME\n```\n%s/CATALINA_HOME/CATALINA_1_HOME_9_0_83/g\n```\n\n4. 配置`apr`，针对tomcat版本的`tomcat-native`配置\n\n5. 修改`server.xml`配置文件\n6. 配置日志脚本`back_catalina_out.sh`\n7. 启动，观察日志是否报错 \n\n8. 后续`9092 - 9094`的容器需要配置拓展\n   1. 以`9091`为模板复制多个容器`9092-9094`\n   2. 修改`setenv.sh`的`CATALINA_PID`\n   3. 替换`catalina.sh`的`CATALINA_BASE`和`CATALINA_HOME`\n   4. 修改`back_catalina_out`的目录配置\n   5. 修改`server.xml`的端口配置\n   6. 启动验证是否启动成功\n\n9.  补充配置项参数\n\n开启防火墙\n\n> 继续往后滑，有相关代码直接执行命令\n```\nfirewall-cmd --permanent --add-rich-rule=\"rule family=\"ipv4\" source address=\"x.x.x.x\" port protocol=\"tcp\" port=\"9091\" accept\"\nfirewall-cmd --permanent --add-rich-rule=\"rule family=\"ipv4\" source address=\"x.x.x.x\" port protocol=\"tcp\" port=\"9092\" accept\"\nfirewall-cmd --permanent --add-rich-rule=\"rule family=\"ipv4\" source address=\"x.x.x.x\" port protocol=\"tcp\" port=\"9093\" accept\"\nfirewall-cmd --permanent --add-rich-rule=\"rule family=\"ipv4\" source address=\"x.x.x.x\" port protocol=\"tcp\" port=\"9094\" accept\"\n```\n\nTomcat的环境变量\n```\nCATALINA_1_BASE_9_0_83=/usr/local/services/tomcat_9.0.83/9091/\nCATALINA_1_HOME_9_0_83=/usr/local/services/tomcat_9.0.83/9091/\nTOMCAT_1_HOME_9_0_83=/usr/local/services/tomcat_9.0.83/9091/\nexport CATALINA_1_BASE_9_0_83 CATALINA_1_HOME_9_0_83 TOMCAT_1_HOME_9_0_83\nCATALINA_2_BASE_9_0_83=/usr/local/services/tomcat_9.0.83/9092/\nCATALINA_2_HOME_9_0_83=/usr/local/services/tomcat_9.0.83/9092/\nTOMCAT_2_HOME_9_0_83=/usr/local/services/tomcat_9.0.83/9092/\nexport CATALINA_2_BASE_9_0_83 CATALINA_2_HOME_9_0_83 TOMCAT_2_HOME_9_0_83\nCATALINA_3_BASE_9_0_83=/usr/local/services/tomcat_9.0.83/9093/\nCATALINA_3_HOME_9_0_83=/usr/local/services/tomcat_9.0.83/9093/\nTOMCAT_3_HOME_9_0_83=/usr/local/services/tomcat_9.0.83/9093/\nexport CATALINA_3_BASE_9_0_83 CATALINA_3_HOME_9_0_83 TOMCAT_3_HOME_9_0_83\nCATALINA_4_BASE_9_0_83=/usr/local/services/tomcat_9.0.83/9094/\nCATALINA_4_HOME_9_0_83=/usr/local/services/tomcat_9.0.83/9094/\nTOMCAT_4_HOME_9_0_83=/usr/local/services/tomcat_9.0.83/9094/\nexport CATALINA_4_BASE_9_0_83 CATALINA_4_HOME_9_0_83 TOMCAT_4_HOME_9_0_83\n```\n\nLogPath环境变量\n```\nTomcat_LOGPATH_9091=/usr/local/services/tomcat_9.0.83/9091/logs\nTomcat_LOGPATH_9092=/usr/local/services/tomcat_9.0.83/9092/logs\nTomcat_LOGPATH_9093=/usr/local/services/tomcat_9.0.83/9093/logs\nTomcat_LOGPATH_9094=/usr/local/services/tomcat_9.0.83/9094/logs\nexport Tomcat_LOGPATH_9091 Tomcat_LOGPATH_9092 Tomcat_LOGPATH_9093 Tomcat_LOGPATH_9094\n```\n\n定时任务配置\n> `crontab -e`打开定时配置 \n\n老版本定时任务配置\n```\n0 0 * * * /usr/local/services/tomcat_9.0.83/9091/bin/back_catalina_out.sh\n0 0 * * * /usr/local/services/tomcat_9.0.83/9092/bin/back_catalina_out.sh\n0 0 * * * /usr/local/services/tomcat_9.0.83/9093/bin/back_catalina_out.sh\n0 0 * * * /usr/local/services/tomcat_9.0.83/9094/bin/back_catalina_out.sh\n```\n\n新版本定时任务配置（脚本文件启用了环境变量）\n```\n0 0 * * * . /etc/profile;/bin/sh /usr/local/services/tomcat_9.0.83/9091/bin/back_catalina_out.sh\n0 0 * * * . /etc/profile;/bin/sh /usr/local/services/tomcat_9.0.83/9092/bin/back_catalina_out.sh\n0 0 * * * . /etc/profile;/bin/sh /usr/local/services/tomcat_9.0.83/9093/bin/back_catalina_out.sh\n0 0 * * * . /etc/profile;/bin/sh /usr/local/services/tomcat_9.0.83/9094/bin/back_catalina_out.sh\n```\n\nTomcat的catalina替换命令\n> 由于是通过`9091`复制出来的，命令如下(在`vim`中按`:`)：\n\n9092\n```\n%s/CATALINA_1_BASE_9_0_83/CATALINA_2_BASE_9_0_83/g\n\n```\n```\n%s/CATALINA_1_HOME_9_0_83/CATALINA_2_HOME_9_0_83/g\n```\n\n9093\n```\n%s/CATALINA_1_BASE_9_0_83/CATALINA_3_BASE_9_0_83/g\n```\n```\n%s/CATALINA_1_HOME_9_0_83/CATALINA_3_HOME_9_0_83/g\n```\n\n9094\n```\n%s/CATALINA_1_BASE_9_0_83/CATALINA_4_BASE_9_0_83/g\n```\n```\n%s/CATALINA_1_HOME_9_0_83/CATALINA_4_HOME_9_0_83/g\n```\n\n\n防火墙添加放行端口命令\n`Firewall`防火墙命令\n- 添加放行IP+端口\n- 重载防火墙\n- 打印防火墙规则\n\n开放允许指定IP+端口访问\n```\nfirewall-cmd --permanent --add-rich-rule=\"rule family=\"ipv4\" source address=\"xx.xxx.x.25\" port protocol=\"tcp\" port=\"9091\" accept\" && firewall-cmd --permanent --add-rich-rule=\"rule family=\"ipv4\" source address=\"xx.xxx.x.25\" port protocol=\"tcp\" port=\"9092\" accept\" && firewall-cmd --permanent --add-rich-rule=\"rule family=\"ipv4\" source address=\"xx.xxx.x.25\" port protocol=\"tcp\" port=\"9093\" accept\" && firewall-cmd --permanent --add-rich-rule=\"rule family=\"ipv4\" source address=\"xx.xxx.x.25\" port protocol=\"tcp\" port=\"9094\" accept\" && firewall-cmd --reload && firewall-cmd --zone=public --list-rich-rules\n```\n\n开放指定端口访问\n```\nfirewall-cmd --zone=public --add-port=9091/tcp --permanent && firewall-cmd --zone=public --add-port=9092/tcp --permanent && firewall-cmd --zone=public --add-port=9093/tcp --permanent && firewall-cmd --zone=public --add-port=9094/tcp --permanent && firewall-cmd --reload && firewall-cmd --zone=public --list-ports\n```\n\n---\n\n`iptables`\n\n```\n/sbin/iptables -I INPUT -s xx.xxx.x.25 -p tcp --dport 9091 -j ACCEPT && /sbin/iptables -I INPUT -s xx.xxx.x.25 -p tcp --dport 9092 -j ACCEPT && /sbin/iptables -I INPUT -s xx.xxx.x.25 -p tcp --dport 9093 -j ACCEPT && /sbin/iptables -I INPUT -s xx.xxx.x.25 -p tcp --dport 9094 -j ACCEPT && /sbin/iptables -I INPUT -s xx.xxx.x.29 -p tcp --dport 9091 -j ACCEPT && /sbin/iptables -I INPUT -s xx.xxx.x.29 -p tcp --dport 9092 -j ACCEPT && /sbin/iptables -I INPUT -s xx.xxx.x.29 -p tcp --dport 9093 -j ACCEPT && /sbin/iptables -I INPUT -s xx.xxx.x.29 -p tcp --dport 9094 -j ACCEPT \n```\n\n```\nservice iptables save && service iptables restart && cat /etc/sysconfig/iptables\n```\n\n## 一键部署配置命令\n\n```\n#!/bin/bash\n#desc 一键部署tomcat环境\n#author muyh\n#date 2024/04/20\n\n# 指定要下载的 URL\nurl=\"YOUR_URL_HERE\"\n# 指定要保存文件的目录\ndirectory=\"/usr/local/services\"\n\n# 检查目录是否存在，如果不存在则创建\nif [ ! -d \"$directory\" ]; then\n    mkdir -p \"$directory\"\nfi\n\n# 使用 wget 下载文件到指定目录\n# wget -P \"$directory\" \"$url\"\nwget -P \"$directory\" \"$url\" --no-check-certificate || { echo \"下载失败，脚本中止执行\"; exit 1; }\n\n\n# 获取下载的文件名\nfilename=$(basename \"$url\")\n\n# 切换到目标目录\ncd \"$directory\" || exit\n\n# 解压缩文件\nif [[ \"$filename\" == *.zip ]]; then\n    unzip \"$filename\"\nelif [[ \"$filename\" == *.tar.gz || \"$filename\" == *.tgz ]]; then\n    tar xvzf \"$filename\"\nelif [[ \"$filename\" == *.tar.bz2 || \"$filename\" == *.tbz2 ]]; then\n    tar xvjf \"$filename\"\nelse\n    echo \"Unsupported file format for extraction: $filename\"\nfi\n\n# 赋予执行权限给特定文件夹下的所有 .sh 文件\nfor folder in \"$directory/$filename\"*/; do\n    if [ -d \"$folder\" ]; then\n        if [ -n \"$(find \"$folder\" -maxdepth 1 -type f -name '*.sh')\" ]; then\n            chmod u+x \"${folder}\"*.sh > /dev/null 2>&1\n        fi\n    fi\ndone\n\n\n\n# 添加命令语句到 /etc/profile\n# echo '# Add your command here' >> /etc/profile\n\necho 'CATALINA_1_BASE_9_0_83=/usr/local/services/tomcat_9.0.83/9091/' >> /etc/profile\necho 'CATALINA_1_HOME_9_0_83=/usr/local/services/tomcat_9.0.83/9091/' >> /etc/profile\necho 'TOMCAT_1_HOME_9_0_83=/usr/local/services/tomcat_9.0.83/9091/' >> /etc/profile\necho 'export CATALINA_1_BASE_9_0_83 CATALINA_1_HOME_9_0_83 TOMCAT_1_HOME_9_0_83' >> /etc/profile\n\necho 'CATALINA_2_BASE_9_0_83=/usr/local/services/tomcat_9.0.83/9092/' >> /etc/profile\necho 'CATALINA_2_HOME_9_0_83=/usr/local/services/tomcat_9.0.83/9092/' >> /etc/profile\necho 'TOMCAT_2_HOME_9_0_83=/usr/local/services/tomcat_9.0.83/9092/' >> /etc/profile\necho 'export CATALINA_2_BASE_9_0_83 CATALINA_2_HOME_9_0_83 TOMCAT_2_HOME_9_0_83' >> /etc/profile\n\necho 'CATALINA_3_BASE_9_0_83=/usr/local/services/tomcat_9.0.83/9093/' >> /etc/profile\necho 'CATALINA_3_HOME_9_0_83=/usr/local/services/tomcat_9.0.83/9093/' >> /etc/profile\necho 'TOMCAT_3_HOME_9_0_83=/usr/local/services/tomcat_9.0.83/9093/' >> /etc/profile\necho 'export CATALINA_3_BASE_9_0_83 CATALINA_3_HOME_9_0_83 TOMCAT_3_HOME_9_0_83' >> /etc/profile\n\necho 'CATALINA_4_BASE_9_0_83=/usr/local/services/tomcat_9.0.83/9094/' >> /etc/profile\necho 'CATALINA_4_HOME_9_0_83=/usr/local/services/tomcat_9.0.83/9094/' >> /etc/profile\necho 'TOMCAT_4_HOME_9_0_83=/usr/local/services/tomcat_9.0.83/9094/' >> /etc/profile\necho 'export CATALINA_4_BASE_9_0_83 CATALINA_4_HOME_9_0_83 TOMCAT_4_HOME_9_0_83' >> /etc/profile\n\n\necho 'Tomcat_LOGPATH_9091=/usr/local/services/tomcat_9.0.83/9091/logs' >> /etc/profile\necho 'Tomcat_LOGPATH_9092=/usr/local/services/tomcat_9.0.83/9092/logs' >> /etc/profile\necho 'Tomcat_LOGPATH_9093=/usr/local/services/tomcat_9.0.83/9093/logs' >> /etc/profile\necho 'Tomcat_LOGPATH_9094=/usr/local/services/tomcat_9.0.83/9094/logs' >> /etc/profile\necho 'export Tomcat_LOGPATH_9091 Tomcat_LOGPATH_9092 Tomcat_LOGPATH_9093 Tomcat_LOGPATH_9094' >> /etc/profile\n\n\n# 加载 /etc/profile\nsource /etc/profile\n \n\n# 检查 iptables 是否启动\n### iptables此处执行可能失效 ###\nif systemctl is-active --quiet iptables; then\n    echo \"iptables 防火墙已启动\"\n    # 执行 iptables 相关命令\n    # 在这里添加你想要执行的 iptables 命令\n\n    /sbin/iptables -I INPUT -s xx.xxx.x.25 -p tcp --dport 9091 -j ACCEPT && /sbin/iptables -I INPUT -s xx.xxx.x.25 -p tcp --dport 9092 -j ACCEPT && /sbin/iptables -I INPUT -s xx.xxx.x.25 -p tcp --dport 9093 -j ACCEPT && /sbin/iptables -I INPUT -s xx.xxx.x.25 -p tcp --dport 9094 -j ACCEPT && /sbin/iptables -I INPUT -s xx.xxx.x.29 -p tcp --dport 9091 -j ACCEPT && /sbin/iptables -I INPUT -s xx.xxx.x.29 -p tcp --dport 9092 -j ACCEPT && /sbin/iptables -I INPUT -s xx.xxx.x.29 -p tcp --dport 9093 -j ACCEPT && /sbin/iptables -I INPUT -s xx.xxx.x.29 -p tcp --dport 9094 -j ACCEPT && service iptables save && service iptables restart && cat /etc/sysconfig/iptables\n\nfi\n\n# 检查 firewalld 是否启动\nif systemctl is-active --quiet firewalld; then\n    echo \"firewalld 防火墙已启动\"\n    # 执行 firewalld 相关命令\n    # 在这里添加你想要执行的 firewalld 命令\n\n    firewall-cmd --permanent --add-rich-rule=\"rule family=\"ipv4\" source address=\"xx.xxx.x.25\" port protocol=\"tcp\" port=\"9091\" accept\" && firewall-cmd --permanent --add-rich-rule=\"rule family=\"ipv4\" source address=\"xx.xxx.x.25\" port protocol=\"tcp\" port=\"9092\" accept\" && firewall-cmd --permanent --add-rich-rule=\"rule family=\"ipv4\" source address=\"xx.xxx.x.25\" port protocol=\"tcp\" port=\"9093\" accept\" && firewall-cmd --permanent --add-rich-rule=\"rule family=\"ipv4\" source address=\"xx.xxx.x.25\" port protocol=\"tcp\" port=\"9094\" accept\" && firewall-cmd --reload && firewall-cmd --zone=public --list-rich-rules\n\nfi\n\n\n# 添加定时任务到 crontab\n(crontab -l ; echo \"0 0 * * * . /etc/profile;/bin/sh /usr/local/services/tomcat_9.0.83/9091/bin/back_catalina_out.sh\") | crontab -\n(crontab -l ; echo \"0 0 * * * . /etc/profile;/bin/sh /usr/local/services/tomcat_9.0.83/9092/bin/back_catalina_out.sh\") | crontab -\n(crontab -l ; echo \"0 0 * * * . /etc/profile;/bin/sh /usr/local/services/tomcat_9.0.83/9093/bin/back_catalina_out.sh\") | crontab -\n(crontab -l ; echo \"0 0 * * * . /etc/profile;/bin/sh /usr/local/services/tomcat_9.0.83/9094/bin/back_catalina_out.sh\") | crontab -\n\n\nbase_dir=\"$directory\"\n\n# 检查基础目录是否存在\nif [ ! -d \"$base_dir\" ]; then\n    echo \"Base directory '$base_dir' not found.\"\n    exit 1\nfi\n\n# 获取当前系统的 JAVA_HOME 值\njava_home=$(echo $JAVA_HOME)\n\n# 查找所有 Tomcat 目录并修改其中的 setenv.sh 文件\n# -maxdepth 2 检索深度2\n# -name \"90*\" 目录文件名前缀90开头\nfind \"$base_dir\" -maxdepth 2 -type d -name \"90*\" | while IFS= read -r tomcat_dir; do\n    setenv_file=\"$tomcat_dir/bin/setenv.sh\"\n    if [ -f \"$setenv_file\" ]; then\n        # 替换 setenv.sh 文件中的 JAVA_HOME 变量\n        sed -i \"s|^#* *export *JAVA_HOME=.*|export JAVA_HOME=\\\"$java_home\\\"|g\" \"$setenv_file\"\n        echo \"JAVA_HOME in $setenv_file has been replaced with $java_home\"\n    else\n        echo \"setenv.sh not found in $tomcat_dir\"\n    fi\ndone\n\necho \"脚本命令执行完毕!\"\n\n```","categories":["技术博客"]},{"title":"Tomcat监控保活SH脚本命令","url":"//25701.html","content":"\n## 脚本命令及定时配置\n\n定时`cron`配置\n```\n* * * * * . /etc/profile;/bin/sh /usr/local/services/tomcat_9.0.83/9092/monitor.sh\n``` \n\n脚本`monitor.sh`\n\n\n ```\n\n#!/bin/sh                                        \n# func:自动监控tomcat脚本并且执行重启操作\n# author:EagleHao  \n# date:2018-04-08\n# DEFINE                                               \n\n# 获取tomcat进程ID（其中[grep -w 'tomcat']代码中的tomcat需要替换为你的tomcat文件夹名）         \nTomcatID=$(ps -ef | grep tomcat | grep -w 'tomcat_9.0.83/9092' | grep -v 'grep' | awk '{print $2}' | head -n 1)\n\n# tomcat启动程序(这里注意tomcat实际安装的路径)                                                     \nStartTomcat=/usr/local/services/tomcat_9.0.83/9092/bin/startup.sh                                   \nTomcatCache=/usr/local/services/tomcat_9.0.83/9092/bin/work\n\n#定义要监控的页面地址                                                                           \nWebUrl=http://127.0.0.1:9092/YOUR_PROJECT/index_white.html\n\n#日志输出                                                                                      \nGetPageInfo=/tmp/TomcatMonitor.Info                                                          \nTomcatMonitorLog=/tmp/TomcatMonitor.log                                                      \n\nMonitor()                    \n{                 \n    echo \"[info]开始监控tomcat_PID:[$TomcatID]...[$(date +'%F %H:%M:%S')]\"                          \n\n    if [ $TomcatID ];then #这里判断Tomcat进程是否存在             \n        echo \"[info]当前tomcat进程ID为:$TomcatID,跳过检测页面...\"     \n        # 检测是否启动成功(成功的话页面会返回状态\"200\")            \n        TomcatServiceCode=$(curl -s -o $GetPageInfo -m 10 --connect-timeout 10 $WebUrl -w %{http_code})                    \n        if [ $TomcatServiceCode -eq 200 ];then                          \n            echo \"[info]页面返回码为$TomcatServiceCode，tomcat启动成功，测试页面正常\"         \n        else \n            echo \"[error]tomcat页面出错，请注意...状态码为$TomcatServiceCode，错误日志已输出到$GetPageInfo\"                \n            echo \"[error]页面访问出错，开始重启tomcat\"    \n            kill -9 $TomcatID # 杀掉原tomcat进程        \n            sleep 3                     \n            #rm -rf $TomcatCache # 清理tomcat缓存  \n            #$StartTomcat        \n        fi                      \n    else                       \n        echo \"[error]tomcat进程不存在!tomcat开始自动重启...\"    \n        echo \"[info]$StartTomcat，请稍候...\"      \n        #rm -rf $TomcatCache   \n        #$StartTomcat          \n    fi          \n    echo \"--------------------------\"         \n}              \nMonitor>>$TomcatMonitorLog\n ```\n\n\n ## 命令解析\n\n获取`TomcatPID`进程号\n ```\n ps -ef | grep tomcat | grep -w 'tomcat_9.0.83/9092' | grep -v 'grep' | awk '{print $2}' | head -n 1\n ```\n\n 解析：\n ![](./Tomcat监控保活SH脚本命令/image.png)\n \n ---\n\n获取第一行结果`head -n 1`\n\n ![](./Tomcat监控保活SH脚本命令/image%20copy.png)\n\ncurl命令获取接口响应码\n```\ncurl -s -o $GetPageInfo -m 10 --connect-timeout 10 $WebUrl -w %{http_code}\n```\n![](./Tomcat监控保活SH脚本命令/image%20copy%202.png)","categories":["技术博客"]},{"title":"Tomcat配置自动重启","url":"//58808.html","content":"\n[Linux下Tomcat开机自动启动（建议采用第二种方法）](https://blog.csdn.net/weixin_46014293/article/details/117259086)\n\n\n\n# 修改系统配置文件的方式实现\n## 修改/etc/rc.d/rc.local\n```\n/bin/bash /home/ordinary/apprestart.sh\n```\n\n## 启动脚本命令\n```\n#!/bin/bash\narray=(`ps aux | grep tomcat | grep -v grep | awk '{print $2}'`)\n#echo ${array[@]}\nfor  i in ${array[@]}\n   do\n     kill -9 ${i}\n   done\nsleep 3s\n/usr/local/services/tomcat8_5_78/tomcat8081/bin/startup.sh\nsleep 3s\n/usr/local/services/tomcat8_5_78/tomcat8082/bin/startup.sh\nsleep 3s\n/usr/local/services/tomcat8_5_78/tomcat8083/bin/startup.sh\nsleep 3s\n/usr/local/services/tomcat8_5_78/tomcat8084/bin/startup.sh\n```\n\n## 配置权限\n```\n chmod +x /etc/rc.d/rc.local\n```\n\n## 重启验证\n```\nsu reboot\n```","categories":["技术博客"]},{"title":"Windows下Tomcat控制台中文乱码","url":"//22134.html","content":"\n> [tomcat控制台乱码问题](https://blog.csdn.net/qq_41639347/article/details/90550249)\n\n\nTomcat目录下日志配置文件\n```\ntomcat/conf/logging.properties\n```\n\n\n添加命令\n```\njava.util.logging.ConsoleHandler.encoding = GBK\n```\n\n重启Tomcat运行","categories":["技术博客"]},{"title":"Vmware虚拟机错误汇总","url":"//64626.html","content":"\n## VMware 不可恢复错误（mks)解决方案\n\n[VMware 不可恢复错误（mks)解决方案](https://blog.csdn.net/Dark_Volcano/article/details/128658228)\n\n### 问题详情：\n查看vmware.log日志报错：`mks ISBRendererComm: Lost connection to mksSandbox (3093)`\n\n### 解决方案：\n在`.vmx`文件最后一行加上\n```\nmks.dx12.vendorID = \"0x10de\"\n```\n","categories":["技术博客"]},{"title":"Windows固定IP地址","url":"//29704.html","content":"\n\n[Win10 固定IP地址方法](https://blog.csdn.net/qq_38693757/article/details/127094255)\n\n\n![](./Windows固定IP地址/固定win系统IP地址.png)\n","categories":["技术博客"]},{"title":"Win11环境下配置VM下虚拟系统开机启动","url":"//31511.html","content":"\n\n[win10设置vmware 虚拟机开机自启](https://zhuanlan.zhihu.com/p/559313500)\n\n## 配置`vmrun`环境变量\n\n![](./Win11环境下配置VM下虚拟系统开机启动/image.png)\n\n![](./Win11环境下配置VM下虚拟系统开机启动/image%20copy.png)\n\n### 验证`vmrun`环境配置 \n\n打开`cmd`输入`vmrun`\n\n![](./Win11环境下配置VM下虚拟系统开机启动/image%20copy%202.png)\n\n\n## 配置`.bat`脚本\n```\n#通过ping命令持续60秒实现延时开启(可根据需要是否开启)\n#ping 127.0.0.1 -n 60 \n\n#配置要开机自启的虚拟机`.vmx`后缀文件\nvmrun -T ws start \"D:\\Virtual Machines\\Linux_DEV_DB\\Linux_DEV_DB.vmx\" nogui \n```\n> 关闭虚拟机： `vmrun -T ws stop \"D:\\Virtual Machines\\Linux_DEV_DB\\Linux_DEV_DB.vmx\" nogui`\n\n## 配置开机启动\n\n```\nshell:startup\n```\n![](./Win11环境下配置VM下虚拟系统开机启动/image%20copy%203.png)\n\n![](./Win11环境下配置VM下虚拟系统开机启动/image%20copy%204.png)\n\n## 重启电脑\n验证虚拟机是否启动成功即可~","categories":["技术博客"]},{"title":"Uniapp-H5使用集成高德SDK","url":"//19205.html","content":"\n[uniapp中app、h5、小程序引入高德地图定位，并封装起来调用。](https://blog.csdn.net/weixin_44871749/article/details/119207400)\n\n[高德地图 key 和 安全密钥 的使用](https://blog.csdn.net/keke11211/article/details/124683754)\n\n[地图 JS API 1.4](https://lbs.amap.com/api/javascript-api/guide/abc/prepare)\n\n\n---\n\n\n\n## 问题记录\n\n### Get ipLocation failed\n[vue中使用高德地图定位报错 Get ipLocation failed.Geolocation permission denied](https://blog.csdn.net/Yi_qian1000/article/details/134832312)\n","categories":["技术博客"]},{"title":"Uniapp学习笔记","url":"//47452.html","content":"\n\n# Uniapp安装Element-UI组件\n\n> [参考博客](https://blog.csdn.net/wy313622821/article/details/119717012)\n\n- 安装Element-UI组件依赖\n```\nnpm install npm i element-ui -S \n```\n- 修改`main.js`配置文件\n\n引入element\n```\nimport ElementUI from 'element-ui'\nimport 'element-ui/lib/theme-chalk/index.css';\n```\n\n使用element\n```\nVue.use(ElementUI)\n```\n\n配置截图示例\n![](./Uniapp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/WechatIMG31.jpg)\n\n\n# 页面去掉顶部导航栏\n> [参考博客](https://www.uoften.com/article/226999.html)\n\n未去掉顶部导航栏截图展示\n![](./Uniapp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/WechatIMG35.jpg)\n\n修改文件`pages.json`,注意：实际以代码为准，截图示例仅做参照\n\n## 单一页面去掉顶部导航栏\n\n```\n  {\n      \"path\" : \"pages/login/login\",\n      \"style\" :                                                                                    \n      {\n          \"navigationBarTitleText\": \"Hi Uniapp\",\n          \"enablePullDownRefresh\": false\n          // 单一页面去掉顶部导航栏（移除注释，请留意上方代码末尾','需要补全）\n          // \"navigationStyle\":\"custom\",\n          // \"app-plus\":{\n          //  \"titleNView\":false\n          // }\n      }\n      \n  }\n```\n![](./Uniapp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/WechatIMG36.jpg)\n\n\n## 全局页面去掉顶部导航栏\n\n```\n\"globalStyle\": {\n  \"navigationBarTextStyle\": \"black\",\n  \"navigationBarTitleText\": \"uni-app\",\n  \"navigationBarBackgroundColor\": \"#F8F8F8\",\n  \"backgroundColor\": \"#F8F8F8\",\n  // 全局页面去掉顶部导航栏（移除注释，请留意上方代码末尾','需要补全）\n  // \"navigationStyle\":\"custom\",\n  // \"app-plus\":{\n  //  \"titleView\":false\n  // }\n }\n```\n\n![](./Uniapp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/WechatIMG38.jpg)\n","categories":["技术博客"],"tags":["UniApp"]},{"title":"Uniapp开发微信小程序页面跳转传值","url":"//9237.html","content":"\n\n## 页面间跳转携带参数对象\n\n父页面\n\n```\nclickDetail(item){\n  let objStr = JSON.stringify(item);\n  uni.navigateTo({\n    url: '/pages/policy/detail?id='+item.id+'&obj='+encodeURIComponent(objStr)\n  });\n}\n```\n\n子页面\n```\nonLoad: function (options) {\n    let objStr = decodeURIComponent(options.obj);\n    let obj = JSON.parse(objStr);\n  }\n```\n\n## 通过正则表达式替换url链接\n\n由于小程序图片显示的组件无法配置head参数携带token变量，进而无法直接访问图片地址。通过下载图片得到临时访问路径，在替换富文本中匹配url地址，进而实现在小程序中预览富文本信息；\n\n正则表达式解析：\n`/(src=')([^']*)(')/g`\n\n```\n/和/g : 表示开始、结束\n()    : 表示 捕获组，括号中的内容会保存，后续引用和使用\n[^']  : 表示 匹配除'号的任意字符序列\n\n```\n\n通过正则批量处理原html文本中url地址信息代码片段\n```\n    // 示例HTML代码，包含多个img标签\n    let htmlString = '<image url='https://xxx.xxx.xx/'/>';\n\n    // 正则表达式匹配所有src属性\n    const regex = /(src=')([^']*)(')/g;\n    let match;\n\n    // 创建一个数组来保存所有的Promise\n    let promises = [];\n\n    // 使用循环遍历所有匹配的src属性\n    while ((match = regex.exec(htmlString)) !== null) {\n      // 获取已匹配字符串数组\n      const [fullMatch, prefix, url, suffix] = match;\n\n      let promise = this.downloadTmpFile(url).then(newValue => {\n        // 构建替换后的字符串\n        let replacement = `${prefix}${newValue}${suffix}`;\n        // 替换原字符串中的匹配部分\n        htmlString = htmlString.replace(fullMatch, replacement);\n      }).catch(err => {\n        console.error('下载文件失败:', err);\n      });\n\n      promises.push(promise); // 将Promise添加到数组中\n    }\n\n    // 使用Promise.all来等待所有的Promise解决\n    Promise.all(promises).then(() => {\n      this.strings = htmlString;\n    });\n```\n\n\nuniapp中调用downloadFile获取指定url链接下载的临时文件地址\n\n```\ndownloadTmpFile(url){\n      return new Promise((resolve, reject) => {\n        uni.downloadFile({\n          url: url,\n          header: {\n            'token': uni.getStorageSync('token')\n          },\n          success: (res) => {\n            if (res.statusCode === 200) {\n              let newValue = res.tempFilePath;\n              resolve(newValue); // 解决Promise并返回新值\n            }\n          },\n          fail: (err) => {\n            reject(err); // 如果下载失败，拒绝Promise并返回错误\n          },\n          complete:(res) => {\n            //console.log('下载完成',res);\n          }\n        });\n      });\n    }\n```","categories":["技术博客"]},{"title":"Uniapp离线安卓打包基座-集成unipush模块","url":"//46197.html","content":"\n\n[官方文档](https://nativesupport.dcloud.net.cn/AppDocs/)\n[Android 离线SDK](https://nativesupport.dcloud.net.cn/AppDocs/download/android.html)\n\n> 博客基于 `HBuilderX 3.99及以上版本`，且未配置厂商推送\n\n\n\n\n## 添加`unipush`依赖`aar`文件\nSDK/libs\n- aps-release.aar\n- aps-unipush-release.aar\n\n![](./Uniapp离线安卓打包基座-集成unipush模块/image.png)\n\n\n## 添加`个推`仓库\n\n![](./Uniapp离线安卓打包基座-集成unipush模块/image%20copy.png)\n\n### 根目录 - build.gradle\n\n> `项目根`目录下配置`个推`仓库\n\n\n```\nallprojects {\n\trepositories {\n\t\tjcenter()\n\t\tgoogle()\n                // 个推的Maven仓地址。\n                maven { \n                    url 'https://mvn.getui.com/nexus/content/repositories/releases' \n                }\n\t}\n}\n```\n\n### 项目目录 - build.gradle\n```\nandroid {\n    defaultConfig {\n        manifestPlaceholders = [\n                \"GETUI_APPID\": \"【unipush的appid】\",\n                \"plus.unipush.appid\" : \"【unipush的appid】\",\n                \"plus.unipush.appkey\" : \"【unipush的key】\",\n                \"plus.unipush.appsecret\": \"【unipush的secret】\",\n                \"apk.applicationId\":\"io.dcloud.HBuilder\"\n        ]\n    }\n}\n\ndependencies {\n    implementation 'com.getui:gtsdk:3.3.3.0'  //个推SDK\n    implementation 'com.getui:gtc:3.2.9.0'  //个推核心组件\n}\n```\n\n## `AndroidManifest.xml`配置\n\n> 在`io.dcloud.PandoraEntry`的`Activity`标签下追加`intent-filter`\n\n```\n<intent-filter>\n\t<action android:name=\"android.intent.action.VIEW\"/>\n\t<category android:name=\"android.intent.category.DEFAULT\" />\n\t<category android:name=\"android.intent.category.BROWSABLE\" />\n\t<data android:host=\"io.dcloud.unipush\" android:path=\"/\" android:scheme=\"unipush\" />\n</intent-filter>\n```\n\n## `dcloud_properties.xml`配置\n\n> 在`dcloud_properties.xml`中添加如下配置，`features`节点与`services`节点必须同时配置！\n\n![](./Uniapp离线安卓打包基座-集成unipush模块/image%20copy%202.png)\n\n```\n<properties>\n\t<features>\n\t\t<feature name=\"Push\" value=\"io.dcloud.feature.aps.APSFeatureImpl\">\n\t\t\t<module name=\"unipush\" value=\"io.dcloud.feature.unipush.GTPushService\"/>\n\t\t</feature>\n\t</features>\t\n\t<services>\n\t\t<service name=\"push\" value=\"io.dcloud.feature.aps.APSFeatureImpl\"/>\n\t</services>\n</properties>\n```\n\n## 最终涉及变动文件\n![](./Uniapp离线安卓打包基座-集成unipush模块/image%20copy%203.png)\n\n## 后话\n一定要仔细看官方教程贴，我一开是以为不用添加`aar`文件，只配置了`个推`的仓库，实际项目启动后发现一直是提示`push 模块未打包`。 \n\n我觉得官方的文档写的很清楚，如果可以精练下文字和内容排版就更舒服了。\n","categories":["技术博客"],"tags":["uniapp","unipush 1.0","Android Studio"]},{"title":"科学上网V2ray搭建教程","url":"//306267.html","content":"\n> [参考博客](https://liuzhengwei127.github.io/2020/11/12/v2ray/)\n\n\n## 部署v2ray服务\n\n```\nbash <(curl -L https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh)\n```\n\n安装成功截图\n![](./科学上网V2ray搭建教程/Snipaste_2023-05-20_16-07-07.jpg)\n\n### 配置v2ray文件\n```\nvi /usr/local/etc/v2ray/config.json\n```\n\n添加如下内容：\n> 注意：port与id均为自定义的\n```\n{\n    \"inbounds\": [\n        {\n            \"port\": 10086, //服务器监听端口\n            \"protocol\": \"vmess\",\n            \"settings\": {\n                \"clients\": [\n                    {\n                        \"id\": \"5ac211e0-5183-454b-9521-836db728310b\" //唯一标识符uuid\n                    }\n                ]\n            }\n        }\n    ],\n    \"outbounds\": [\n        {\n            \"protocol\": \"freedom\"\n        }\n    ]\n}\n```\n\nport：\n建议使用5位数的端口，不易与系统本身使用的端口冲突\n\nid：\nuuid随机生成器:\nhttps://www.uuidgenerator.net/\nhttps://www.v2fly.org/awesome/tools.html\n\n\n### 启动v2ray服务\n```\nsystemctl enable v2ray\nsystemctl start v2ray\n```\n\n## 客户端使用\n\n### MAC\nhttps://github.com/yanue/V2rayU/releases\n\n### WINDOWS \nhttps://github.com/2dust/v2rayN/releases\n\n\n## 使用截图\n\n\n谷歌搜索IP定位：日本（服务器实例为某里云-日本节点）\n![](./科学上网V2ray搭建教程/Snipaste_2023-05-20_16-48-04.jpg)\n\n系统代理：自动配置系统代理\n路由：全局\n![](./科学上网V2ray搭建教程/Snipaste_2023-05-20_16-47-42.jpg)\n\n","categories":["技术博客"]},{"title":"通过VM虚拟机proxy代理让宿主机访问vpn加密网络","url":"//52882.html","content":"\n## VM虚拟机关闭防火墙\n\n![](./通过VM虚拟机proxy代理让宿主机访问vpn加密网络/Snipaste_2024-05-09_11-43-46.png)\n\n检测网络是否通畅\n> `ping` VM虚拟机的ip地址\n```\nping 192.168.1.xx\n```\n## 在虚拟机安装proxy代理软件\n\n\n\n","categories":["技术博客"]},{"title":"VsCode相关集合","url":"//36128.html","content":"\n# 仅以此记录相关`VsCode`使用内容\n> 整理个人使用vscode编辑器过程中相关内容集合\n>\n\n# 已安装插件\n\n## 环境语言包\n### Chinese (Simplified) (简体中文) Language Pack for Visual Studio Code\n![](Snipaste_2023-04-29_09-53-06.jpg)\n\n## MD文件编辑相关插件\n### Markdown All in One \n![](Snipaste_2023-04-29_09-49-46.jpg)\n### Markdown PDF\n![](Snipaste_2023-04-29_09-50-41.jpg)\n### Markdown Preview Enhanced\n![](Snipaste_2023-04-29_09-51-05.jpg)\n<!-- ### markdownlint -->\n<!-- ![](Snipaste_2023-04-29_09-51-26.jpg) -->\n<!-- ### GitHub Markdown Preview -->\n<!-- ![](Snipaste_2023-04-29_09-51-57.jpg) -->\n\n## 代码提交相关插件\n### Git History\n![](Snipaste_2023-04-29_09-52-22.jpg)\n### git-commit-plugin\n![](Snipaste_2023-04-29_09-52-42.jpg)\n\n## 代码格式化\n### Prettier - Code formatter\n![](Snipaste_2023-04-29_09-53-28.jpg)\n\n<!-- ## VsCode主题 -->\n<!-- ### GitHub Theme -->\n<!-- ![](Snipaste_2023-04-29_09-53-47.jpg) -->\n<!-- ### Theme ⭐⭐⭐ -->\n<!-- ![](Snipaste_2023-04-30_22-20-39.jpg) -->\n\n\n<!-- ## VsCodew icon主题 -->\n<!-- ### Material Icon Theme ⭐⭐⭐⭐ -->\n<!-- ![](./VsCode相关集合/Snipaste_2023-05-01_11-09-54.jpg) -->\n\n\n## Angular \n### Angular Language Service\n> angular环境支持插件\n\n### Angular 10 Snippets - TypeScript, Html, Angular Material, ngRx, RxJS & Flex Layou \n> angular语法提示插件\n\n## Vue\n### Vue Language Features (Volar)\n> vue环境支持插件\n\n# VsCode相关内容\n\n[vscode禁用 json 添加注释时的报错](https://blog.csdn.net/hsj1669666567/article/details/119669562)","categories":["技术博客"],"tags":["vscode插件"]},{"title":"VsCode关闭预览模式","url":"//55949.html","content":"\n## 关闭vscode的预览模式\n[如何让 VSCode 打开文件始终在新标签页打开](https://blog.csdn.net/zyx_ly/article/details/89600366)\n\n`settings.json`文件添加配置：\n```\n\"workbench.editor.enablePreview\": false,\n```\n\n---\n\n## 修改vscode的setting.json文件\n\n[vscode如何打开settings.json](https://blog.csdn.net/qq_25378657/article/details/109516161)\n\n\n![](./VsCode关闭预览模式/Snipaste_2024-04-17_11-07-05.png)\n\n![](./VsCode关闭预览模式/Snipaste_2024-04-17_11-07-38.png)\n\n","categories":["技术博客"],"tags":["VsCode"]},{"title":"Vscode插件Prettier的自动格式化","url":"//24429.html","content":"\n[VS Code 保存文件时使用 Prettier 自动格式化](https://zhuanlan.zhihu.com/p/461977954)\n\n## 配置`Prettier`为默认代码格式化工具\n\n1. 打开`setting`选项\n2. 搜索`format`,设置默认代码格式化工具为`Prettier`\n3. 配置`Prettier`保存时自动格式化代码\n\n![](./Vscode插件Prettier的自动格式化/Snipaste_2023-10-10_09-34-08.png)\n","categories":["技术博客"]},{"title":"AntDesignVue的表格实现点击tr行特效显示","url":"//23808.html","content":"\n> 组件版本：3.x\n\n[antdv官网](https://3x.antdv.com/components/table-cn#API)\n\n[ant design vue利用rowClassName给table添加行样式](https://blog.csdn.net/yougejing/article/details/113212366)\n\n---\n\n涉及知识点：**样式穿透** 、 **熟悉官方文档**  \n可参考：[vue样式穿透的几种方式](https://juejin.cn/post/7090570269495918599)\n\n---\n\n![](./AntDesignVue的表格实现点击tr行特效显示/Snipaste_2024-05-11_16-51-59.png)\n\n```\n:row-class-name=\"(record,index)=>{ return record.id === selectIndex ?'litigationInfoListredRow':' '}\"\n```\n\n点击属性\n```\nconst selectIndex = ref(0);\n```\n\n\n表格点击\n> [`customRow`用法](https://3x.antdv.com/components/table-cn#customRow-%E7%94%A8%E6%B3%95)\n```\nconst customRow = record => {\n  return {\n    onClick: event => {\n      selectIndex.value = record.id;\n    }\n  };\n};\n```\n\n样式\n```\n<style lang=\"less\" scoped>\n.abc /deep/ .litigationInfoListredRow {\n  color: red\n}\n</style>\n```\n\n补充样式：\n```\n:deep(.abc .ant-table-tbody > tr > td) {\n\t//去掉悬停时的背景颜色，你可以将其设置为 transparent 或者和页面背景颜色相同的颜色。\n\tbackground-color: transparent !important;\n}\n```\n\n\n\n","categories":["开源组件"]},{"title":"算法题攻略-古典问题：有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？","url":"//10836.html","content":"\n> 参考博客：[【Java】题目：古典问题：有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？](https://blog.csdn.net/JockLiu/article/details/91880432)\n>\n> 解析：[有一对兔子从出生后第三个月起，每个月都生一对兔子，小兔子长到第三个月又生一对兔子，每个月兔子的总数是？ - 阿木的回答 - 知乎](https://www.zhihu.com/question/38045513/answer/286467541)\n\n## 题目\n算法题攻略-古典问题：有一对兔子，`从出生后第3个月起每个月都生一对兔子`，`小兔子长到第3个月后每个月又生一对兔子`，假如兔子都不死，问每个月的兔子总数为多少？\n\n### 关键点分析\n> 3个月起每个月都生一对兔子，实际是2个月生一对兔子！\n>\n> \n![](./算法题攻略-古典问题：兔子的数量问题/Snipaste_2023-06-29_20-55-05.png)\n\n### 图解分析\n\n![](./%E7%AE%97%E6%B3%95%E9%A2%98%E6%94%BB%E7%95%A5-%E5%8F%A4%E5%85%B8%E9%97%AE%E9%A2%98%EF%BC%9A%E5%85%94%E5%AD%90%E7%9A%84%E6%95%B0%E9%87%8F%E9%97%AE%E9%A2%98/Snipaste_2023-06-28_22-29-55.png)\n\n\n\n## java代码\n> 符合：斐波那契数列\n>   \n> `函数关系： f(n) = f(n-1)+f(n-2)`\n```\npackage com.ruoyi;\n\nimport java.util.Scanner;\n\npublic class Demo {\n\n//    当位数为1时，其返回值 = 1 = 1 + 0；\n//    当位数为2时，其返回值 = 1 = 1 + 0；\n//开始变化（题目中数学关系需要自己解析发现：一对兔子是满足2个月就可以生成一对新兔子）\n//    当位数为3时，其返回值 = 2 = 1 + 1；\n//    当位数为4时，其返回值 = 3 = 2 + 1；\n//    当位数为5时，其返回值 = 5 = 3 + 2；\n//    当位数为6时，其返回值 = 8 = 5 + 3；\n//    当位数为7时，其返回值 = 13 = 8 + 5；\n//    当位数为8时，其返回值 = 21 = 13+ 8；\n\n//    f(n) = f(n-1)+f(n-2)\n\n    /** 获取指定月数的兔子数量 */\n    public static Integer getRabbitCount(\n            Integer month\n    ){\n\n        if( month.equals( 1 ) || month.equals( 2 ) ){\n            return 1;\n        }else{\n            if( month.equals( 3 ) ){\n                return 2;\n            }else{\n                return getRabbitCount(month - 1) + getRabbitCount(month - 2);\n            }\n        }\n\n    }\n\n    public static void main(String[] args) {\n\n       Integer number = null;\n\n       while(true){\n           System.out.println(\"---请输入第几月(month)---\");\n           Scanner scanner = new Scanner(System.in);\n           number = scanner.nextInt();\n\n           if( number == 0 ){\n               break;\n           }\n\n           Integer count = getRabbitCount(number);\n           System.out.println(count);\n       }\n    }\n}\n\n```\n\n\n","categories":["学习成长"]},{"title":"Vscode编辑器常用配置","url":"//49369.html","content":"\n## 编辑器视图放大\n\n![](./Vscode编辑器常用配置/Snipaste_2023-10-10_09-43-53.png)\n","categories":["技术博客"]},{"title":"AntDesignVue的table表格清空选中缓存项","url":"//12950.html","content":"\n\n[ant design vue table清空选中](https://blog.csdn.net/hxm2017jy/article/details/121928247)\n\n> 非关键的其他代码已忽略\n\n表格`a-table`示例\n```\n <a-table\n        :row-selection=\"{\n          selectedRowKeys: state.selectedRowKeys,\n          onChange: onSelectChange ,\n          type:'checkbox',\n          preserveSelectedRowKeys: true\n        }\"\n      >\n\n      </a-table>\n```\n\n- selectedRowKeys 保存选中rowKey\n- onChange 监听事件\n- type 选中的标签类型\n- preserveSelectedRowKeys 翻页不清空已缓存rowKey\n\n声明变量\n```\nconst state = reactive({\n  selectedRowKeys: [],\n  selectedRows: []\n});\n```\n\n监听选项改变事件\n```\nconst onSelectChange = ( selectedRowKeys, selectedRows) =>{\n  state.selectedRowKeys = selectedRowKeys\n  state.selectedRows = selectedRows\n}\n```\n\n需要清空当前已点击rowKey\n```\nstate.selectedRowKeys = [];\n```","categories":["技术博客"]},{"title":"Create-React-APP使用搭建项目","url":"//54844.html","content":"\n## 设置Npm环境\n\n设置淘宝镜像源\n```\nnpm config set registry https://registry.npm.taobao.org\n```\n\n查看镜像源\n```\nnpm config get registry \n```\n\n安装React脚手架\n```\nnpm i -g create-react-app\n```\n\n通过脚手架创建APP\n```\ncreate-react-app my-app\n```\n\n启动命令\n```\nnpm start\n```\n \n## Create-React-APP目录结构\n\n```\nreact_first_pro\n├─ .gitignore               // 自动创建本地仓库\n├─ package.json             // 相关配置文件\n├─ public                   // 公共资源\n│  ├─ favicon.ico           // 浏览器顶部的icon图标\n│  ├─ index.html            // 应用的 index.html入口\n│  ├─ logo192.png           // 在 manifest 中使用的logo图\n│  ├─ logo512.png           // 同上\n│  ├─ manifest.json         // 应用加壳的配置文件\n│  └─ robots.txt            // 爬虫协议文件\n├─ src                      // 源码文件夹\n│  ├─ App.css               // App组件样式\n│  ├─ App.js                // App组件\n│  ├─ App.test.js           // 用于给APP做测试\n│  ├─ index.css             // 样式\n│  ├─ index.js              // 入口文件\n│  ├─ logo.svg              // logo图\n│  ├─ reportWebVitals.js    // 页面性能分析文件\n│  └─ setupTests.js         // 组件单元测试文件\n└─ yarn.lock\n```\n","categories":["技术博客"],"tags":["NPM","React","Create-React-App"]},{"title":"Vue前端预览PDF文件","url":"//21014.html","content":"\n> 参考博客01（参考）：[Vue在线预览PDF（不需要安装插件）](https://blog.csdn.net/m0_60067716/article/details/124017351)\n> \n> 参考博客02（推荐）：[vue+iframe预览pdf，页面显示pdf外框但是内容空白解决](https://blog.csdn.net/weixin_42567822/article/details/130556933)\n\n\n> 最终实现方式为参考`博客02`\n\n`PdfPreview2.vue`代码如下：\n```\n<template>\n    <div class=\"app\">\n        <el-button @click=\"preview1\">预览在线PDF</el-button>\n        <el-button @click=\"preview2\">请求后端预览</el-button>\n        <el-dialog v-if=\"previewShow\" title=\"预览\" :visible.sync=\"previewShow\" append-to-body width=\"90%\">\n            <!-- PDF显示的地方 -->\n            <!-- <iframe ref=\"pdf\" :src=\"previewUrl\" width=\"100%\"></iframe> -->\n            <iframe :src=previewUrl frameborder=\"0\" height=\"900px\" width=\"100%\"></iframe>\n\n            <span slot=\"footer\" class=\"dialog-footer\">\n                <el-button type=\"primary\" plain @click=\"previewShow = false\">关 闭</el-button>\n            </span>\n        </el-dialog>\n    </div>\n</template>\n<script>\nimport { getToken } from \"@/utils/auth\";\nimport axios from \"axios\";\n\nexport default {\n    data() {\n        return {\n            previewShow: false,\n            previewUrl: \"\",\n        };\n    },\n    methods: {\n        // 直接传入一个地址\n        preview1() {\n            this.previewShow = true;\n            this.previewUrl = \"https://www.gjtool.cn/pdfh5/git.pdf\";\n            this.$nextTick(() => {\n                this.$refs.pdf.height = document.documentElement.clientHeight;\n            });\n        },\n        // 后端返回二进制流\n        preview2() {\n            this.previewShow = true;\n\n            axios({\n                method: 'get',\n                responseType: 'blob',\n                url: 'http://localhost:1024/dev-api/profile/upload/2023/07/07/TestDOCX_1688696521125_mark_20230707104114A001.pdf',//后端接口地址\n                headers: {\n                    'Authorization': \"Bearer \" + getToken()\n                }\n            }).then(({ data }) => {\n                let blob = new Blob([data], { type: 'application/pdf' })\n                this.previewUrl = URL.createObjectURL(blob);\n            })\n\n\n        },\n    },\n};\n</script>\n<style scoped></style>\n```\n\n\n\n","categories":["技术博客"],"tags":["Vue","Vue-PDF"]},{"title":"Seezoon Stack 低代码开发平台","url":"//60445.html","content":"\n## Seezoon Stack 初步了解\n\n> [官方网站](https://doc.stack.seezoon.com/)\n\n![](./SeezoonStack低代码开发平台/Snipaste_2023-06-21_14-45-30.png)\n\ngithub仓库地址：\n```\nhttps://github.com/734839030/seezoon-stack\n```\n\ngithub代码克隆(https)地址：\n```\nhttps://github.com/734839030/seezoon-stack.git\n```\n\n## 项目本地Idea启动\n\n### pom文件更新\n\n#### 插件-maven-assembly-plugin\n![](./SeezoonStack低代码开发平台/Snipaste_2023-06-21_14-51-07.png)\n\n![](./SeezoonStack低代码开发平台/Snipaste_2023-06-21_14-50-48.png)\n\n项目模块`seezoon-admin-server`的pom文件引入依赖\n> 否则`pom/build/plugins/plugin`的`maven-assembly-plugin`报红!\n```\n<dependency>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-assembly-plugin</artifactId>\n    <version>3.0.0</version>\n</dependency>\n```\n\n#### 插件-lombok\n> 报错内链（已解决）：[maven 解析lombok报错module jdk.compiler does not export com.sun.tools.javac.processing to unnamed module](/posts/1529.html)\n\n![](./SeezoonStack低代码开发平台/Snipaste_2023-06-21_14-59-21.png)\n\n> 错误原因：`lombok`的版本与jre不兼容 ，需要在pom.xml中改变Lombok的版本，一般springboot中lombok的配置都是不带版本的，此时我们需要手动添加一下版本号\n```\n<dependency>\n    <groupId>org.projectlombok</groupId>\n    <artifactId>lombok</artifactId>\n    <optional>true</optional>\n    <version>1.18.20</version>\n    <scope>provided</scope>\n</dependency>\n```\n\n### 环境准备\n- mysql 8.0\n- redis\n- jdk 11\n\n> [内链|通过docker方式搭建mysql8.0](/posts/11638.html)\n\n#### Mysql 注意事项\n通过docker方式搭建mysql8.0及后续版本，在`设置大小写不敏感`只能在`容器初始化`时，`后续重启均无效`。\n\n正常操作`代码生成`功能点击`添加`(这里未展示报错截图!)\n![](./SeezoonStack低代码开发平台/Snipaste_2023-06-21_15-07-38.png)\n\n正常操作`代码生成`功能点击`添加`-success 截图展示\n> 截图也包括展示部分字段注释\n>\n![](./SeezoonStack低代码开发平台/Snipaste_2023-06-21_15-12-21.png)\n\n代码生成文件如下\n![](./SeezoonStack低代码开发平台/Snipaste_2023-06-21_15-16-59.png)\n\n- db 需要到数据库执行入库的菜单记录SQL文件\n- *-server 需要复制文件到`server`模块的`module`下\n- *-dao 需要复制文件到`dao`模块的`module`下\n- *-web 需要复制文件到`src/views/`目录下\n\n*-server的复制截图参考\n![](./SeezoonStack低代码开发平台/Snipaste_2023-06-21_15-18-40.png)\n\n*-web的复制截图参考\n![](./SeezoonStack低代码开发平台/Snipaste_2023-06-21_15-22-26.png)\n\n\n\n\n\n## 项目打包部署启动\n\nIdea的maven插件执行`package打包`\n![](./SeezoonStack低代码开发平台/Snipaste_2023-06-21_15-26-05.png)\n\n`maven-assembly-plugin`\n![](./SeezoonStack低代码开发平台/Snipaste_2023-06-21_15-28-23.png)\n- seezoon-admin-server-2.1.0.jar 插件Idea的`package`\n- seezoon-admin-server-2.1.0.tar.gz 插件\n\n\n### 项目后端运行\n\n> 参考博客：[SpringBoot 配置加载优先级详解](https://blog.csdn.net/zzhongcy/article/details/107200796)\n\n```\nnohup java -jar -Dspring.config.additional-location=application-local.properties seezoon-admin-server-2.1.0.jar > /dev/null 2>&1 &\n```\n\n- Dspring.config.additional-location 指定外部配置文件\n\n\n#### 进阶命令\n> [如何正确的启动停止SpringBoot Jar，解决端口被占用、终端退出后不停止服务](https://blog.csdn.net/shenju2011/article/details/103626433)\n\n输出日志\n```\nnohup java -jar demo.jar >./log.txt  2>&1 &\n```\n\n根据Java程序logback配置自输出日志（推荐）\n```\nnohup java -jar demo.jar > /dev/null 2>&1 &\n```\n\n\n停止Java程序进程\n```\nps -ef | grep  demo.jar\n```\n\n```\nkill -9 pid\n```\n\n### Docker部署Nginx代理静态资源页面\n> [内链|Docker部署Nginx](/posts/56599.html)\n\n\nNginx配置文件\n```\nupstream seezoon-admin-server {\n    server 192.168.136.181:8080 max_fails=3 fail_timeout=10s;\n}\n\nserver {\n    listen       80;\n    #server_name  stack.seezoon.com;\n    #rewrite ^(.*)$  https://$host$1 permanent;\n\n    #api接口\n    location ^~ /api/ {\n        proxy_redirect off;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Real-PORT $remote_port;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://seezoon-admin-server/;\n    }\n\n    #文件上传资源\n    location ^~ /file/ {\n        access_log off;\n        #同理不赘述，容器路径+宿主机路径\n        alias alias /usr/share/nginx/html/upload-server;\n    }\n\n    #新增配置项目，用于查看上传图片（2023.06.21）\n    location /static/ {\n        access_log off;\n        root /usr/share/nginx/html/upload-server;\n    }\n\n    #静态资源\n    location / {\n        access_log off;\n        #备注：/usr/share/nginx/html/ 为容器内路径，seezoon-admin-web/dist 为docker-v映射外部宿主机的文件目录\n        root  /usr/share/nginx/html/seezoon-admin-web/dist;\n        index index.html index.htm;\n    }\n\n}\n```\n\n\n\n> root  `/usr/share/nginx/html(容器路径)`+`/seezoon-admin-web/dist(宿主机)`;\n> > 注意事项：注意Docker容器和宿主机的配置静态资源html的路径问题（详细可`参考上述内链`）\n\n\n\n\n#### 部署结束截图（前端+后端）\n![](./SeezoonStack低代码开发平台/Snipaste_2023-06-21_17-07-10.png)\n\n\n\n### 项目配置文件变更\n#### 文件上传配置\n![](./SeezoonStack低代码开发平台/Snipaste_2023-06-21_17-59-59.png)","categories":["开源项目"],"tags":["Seezoon Stack","低代码开发平台","敏捷开发基础框架"]},{"title":"Win11开启HDR导致截图过曝","url":"//12815.html","content":"\n[谷歌截图的时候，网页整个忽然变得很亮是怎么回事](https://www.zhihu.com/question/399026077/answer/1262705309)\n\n\n解决方式\n1. 在chrome地址栏输入`chrome://flags/`\n2. 在页面的搜索栏搜索`force color profile`\n3. 在选项中选择所对应的颜色管理。（博客的是`sRGB`）\n","categories":["技术博客"],"tags":["Win11","HDR"]},{"title":"Vue相关错误记录","url":"//51066.html","content":"\n## 解决浏览器报 Mixed Content\n[解决浏览器报 Mixed Content](https://blog.csdn.net/nullsheep/article/details/127392082)\n\n页面头部(`meta`)加入`upgrade-insecure-requests`\n```\n<meta http-equiv=\"Content-Security-Policy\" content=\"upgrade-insecure-requests\">\n```\n\n## vue 启动项目时报错 ValidationError: webpack Dev Server Invalid Options\n[vue 启动项目时报错 ValidationError: webpack Dev Server Invalid Options](https://blog.csdn.net/csdn_chengpeng/article/details/89921958)\n\n> 把 `devServer` 将里面的`proxy`注释掉就可以了\n","categories":["技术博客"]},{"title":"vue中使用vconsole(移动端调试)","url":"//42897.html","content":"\n[vue 中使用vconsole(移动端调试)](https://zhuanlan.zhihu.com/p/358373930)\n\n[vsconsole的隐藏](https://juejin.cn/post/6844903988463140871)\n\n\n---\n\n## 安装使用\n\n安装\n```\nnpm install vconsole\n```\n\n创建`vConsole.js`文件\n```\nimport Vconsole from 'vconsole'\nconst vConsole = new Vconsole()\nexport default vConsole\n```\n\n在`main.js`引入\n```\nimport vConsole from '@/assets/js/vconsole.js'\nVue.prototype.vConsole = vConsole;\n```\n\n## 隐藏显示\n\n全局样式\n```\n//默认隐藏\n#__vconsole {\n  display: none;\n}\n//类名切换显示/隐藏\n.show {\n  display: block!important;\n}\n```\n\n按钮触发\n```\n//预留一个空按钮用来控制显示/隐藏\n<button @click=\"show_vconsole\" class=\"vc-tigger\"></button>\n```\n\n配置参数\n```\ndata() {\n    return {\n        lastClickTime: 0,\n        count: 0\n    }\n},\n```\n\n配置方法\n```\nmethods:{\n    hasClass(obj, cls) {\n        return obj.className.match(new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)'));\n    },\n    addClass(obj, cls) {\n        if (!this.hasClass(obj, cls)) obj.className += \" \" + cls;\n    },\n    toggleClass(obj, cls) {\n        if (this.hasClass(obj, cls)) {\n            this.removeClass(obj, cls);\n        } else {\n            this.addClass(obj, cls);\n        }\n    },\n    removeClass(obj, cls) {\n        if (this.hasClass(obj, cls)) {\n            var reg = new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)');\n            obj.className = obj.className.replace(reg, ' ');\n        }\n    },\n    //控制显示vconsole\n    show_vconsole() {\n        const nowTime = new Date().getTime();\n        if (nowTime - this.lastClickTime < 3000) {\n            this.count++;\n        } else {\n            this.count = 0;\n        }\n        this.lastClickTime = nowTime;\n        if (this.count >= 10) {\n            let vconDom = document.getElementById('__vconsole');\n            this.toggleClass(vconDom, 'show')\n            this.count = 0;\n        }\n    },\n}\n```","categories":["技术博客"]},{"title":"Win11右键菜单还原Win10","url":"//6541.html","content":"\n[WIN11右键菜单替换成WIN10右键菜单的办法](https://blog.csdn.net/Akanarika520/article/details/132587787)\n\n\n## 切换右键菜单\n\n1. 创建`.bat`脚本命令\n2. 以`管理员模式`运行\n\n---\n\n\n### 切换`win10`右键菜单命令\n```\nreg add \"HKCU\\Software\\Classes\\CLSID\\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\\InprocServer32\" /f /ve\n```\n\n### 切换`win11`右键菜单命令\n```\nreg delete \"HKCU\\Software\\Classes\\CLSID\\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\\InprocServer32\" /va /f\n```\n\n## 立即生效\n> 重启`Windows资源管理器`\n\n\n![](./Win11右键菜单还原Win10/Snipaste_2023-11-29_23-06-21.png)","categories":["技术博客"]},{"title":"Win下设置远程桌面连接显示分辨率","url":"//63737.html","content":"\n[Windows远程桌面如何调整分辨率呢](https://blog.csdn.net/m0_63641208/article/details/135630046)\n\n[Windows远程桌面如何设置分辨率](https://blog.csdn.net/BAIFOL/article/details/124420578)\n\n---\n\n## 修改远程连接配置文件`Default.rdp`\n\n> 存在某些远程桌面`screen mode id:i:2`时全屏分辨率依然未按设置生效，此时只能设置`screen mode id:i:1`,屏幕窗口缩放为`1920*1080`设置分辨率\n\n```\n# 1 标准； 2 全屏\nscreen mode id:i:1\nuse multimon:i:0\n# 远程桌面分辨率 宽 / 高\ndesktopwidth:i:1920\ndesktopheight:i:1080\nsession bpp:i:32\n```\n","categories":["技术博客"]},{"title":"win11添加应用到启动项","url":"//36325.html","content":"\n[参考博客](https://zhuanlan.zhihu.com/p/442808609)\n\n## 步骤1：\n按`win+R`,并输入\n```\nshell:startup\n```\n\n## 步骤2：\n将应用快捷方式拖入到指定窗口即可\n![](./win11添加应用到启动项/Snipaste_2023-11-06_14-47-47.png)","categories":["技术博客"]},{"title":"Win11绕过TPM升级","url":"//30832.html","content":"\n\n> [ Windows 11 绕过 TPM 方法总结，通用无 TPM 镜像下载 (2023 年 1 月更新)](https://www.cnblogs.com/sysin/p/17127862.html#_label1_4)\n\n记录:\n我通过win10系统升级到win11(保留应用及个人数据情况),使用的是[Rufus 创建 USB 启动盘](https://www.cnblogs.com/sysin/p/17127862.html#_label1_4)这个方法.\n\n![](./Win11绕过TPM升级/Snipaste_2023-05-06_07-29-59.jpg)\n\n补充:\nRufus安装win11会提供绕过TPM检测的功能,然后安装界面会显示win10等字样,实际安装的是win11.","categories":["技术博客"],"tags":["Win11","TPM"]},{"title":"解决windows的zip压缩包在linux下解压后中文乱码","url":"//50390.html","content":"\n> [解决windows的zip压缩包在linux下解压后中文乱码问题](https://blog.csdn.net/suiyueruge1314/article/details/90766185)\n\n## 最简单便捷的方法\n`CP936`是最早的`GBK`编码\n```\nunzip -O CP936 xxx.zip\n```\n\n## 其他方法\n\n> 备注: 我没有测试此方法,仅以此作记录!\n\n### 安装7zip和convmv\n```\n# centos\nyum install 7zip convmv\n# ubuntu\nsudo apt-get install 7zip convmv\n```\n### 解压缩命令\n```\n# 使用7z解压缩\nLANG=C 7za x your-zip-file.zip\n# 递归转码，从GBK转为UTF-8\nconvmv -f GBK -t utf8 --notest -r .\n```\n\n","categories":["技术博客"]},{"title":"Win10-全拼双拼切换脚本","url":"//31007.html","content":"\n[一键为微软输入法添加小鹤双拼键位](https://zhuanlan.zhihu.com/p/174778114)\n\n[Win10微软拼音输入法全拼双拼一键切换](https://www.jianshu.com/p/ed15869e03e6)\n\n\n## win10添加小鹤双拼键位\n\n文件后缀名改为.reg文件，双击即可添加小鹤双拼键位并启用。\n\n```\nWindows Registry Editor Version 5.00\n\n[HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\InputMethod\\Settings\\CHS]\n\"EnableExtraDomainType\"=dword:00000001\n\"Enable Double Pinyin\"=dword:00000001\n\"DoublePinyinScheme\"=dword:0000000a\n\"UserDefinedDoublePinyinScheme0\"=\"小鹤双拼*2*^*iuvdjhcwfg^xmlnpbksqszxkrltvyovt\"\n```\n\n> 若添加双拼键位中文乱码（由于编码问题导致），可直接右键编辑修改即可。\n\n## win10脚本切换全拼/双拼\n\n```\n@echo off\n\nset Mainkey=HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\InputMethod\\Settings\\CHS\n\nfor /f %%i in ('reg query %MainKey% /v \"Enable Double Pinyin\" ^| findstr /i \"0x1\"') do (set flg=%%i)\n\nif not defined flg (\n    reg add %MainKey% /v \"Enable Double Pinyin\" /t REG_DWORD /d 0x1 /f\n    echo S-Ping\n) else (\n    reg add %MainKey% /v \"Enable Double Pinyin\" /t REG_DWORD /d 0x0 /f\n    echo Q-Ping\n)\n\npause\n```","categories":["技术博客"]},{"title":"Axure RP 9的PJ使用","url":"//17952.html","content":"\n\n# Axure RP 9 序列号激活\n## win版本\n> 已验证可用\n\n\n被授权人（License）：\n```\nAX9001\n```\n授权码（Key）：\n```\niy9uUKbS7pEZwE5hbHTGigOcu48TdY4JXWbJYHxXLuvAzRL8qmry9J2mS5wXO7y3\n```\n\n\n## mac版本\n\n> 已验证可用\n\n被授权人（License）：\n```\n123\n```\n授权码（Key）:\n```\n8QL8bMkjnuHoGbUiCEAOTcPPZOyVnJ16h5CNoOoPjm1PeSanFtesYjIRWguJjLtm\n```\n\n# Axure RP 9 下载\n\n`Axure RP 9`下载地址\n- Win版本[百度云盘](https://pan.baidu.com/s/1gXKLp9iZxvTcDOtLOf1JcA?pwd=bdv9)\n\n\n# 后续todo\n- 关于win/mac下使用阿里巴巴antDesign的组件及字体\n- 关于win/mac下安装汉化文件\n\n","categories":["教程集合"],"tags":["Axure"]},{"title":"angular使用ng-alain","url":"//38158.html","content":"\n[NG-ALAIN 官网](https://ng-alain.com/docs/getting-started/zh)\n\n# Angular 项目中使用`NG-ALAIN`\n\n1. 需要先安装`yarn`\n\n> [yarn 的安装使用](/posts/51953.html)\n\n2. 创建 angular 项目\n\n```\nng new my-project --style less --routing --package-manager yarn\n```\n\n3. 添加`NG-ALAIN`到项目\n\n```\nng add ng-alain\n```\n\n4. 运行\n\n```\nyarn start\n```\n\n![](./angular使用ng-alain/Snipaste_2023-10-09_17-27-48.png)\n\n# [ng-alain 命令行工具](https://ng-alain.com/cli/getting-started/zh)\n\n命令格式\n\n```\nng g ng-alain:[command name] [name] [options]\n```\n\n示例\n\n```\n#生成 trade 模块\nng g ng-alain:module trade\n\n# trade 模块下生成一个 TradeListComponent List组件\nng g ng-alain:list list -m=trade\n\n# trade 模块下生成一个 TradeEditComponent List组件 及 TradeService 服务类\nng g ng-alain:list list -m=trade --service=root\n\n# 生成指定组件`log`目录下\nng g ng-alain:view view -m=sys -t=log\n```\n\n## Module 模块包括\n\n- `empty` 空白页\n- `list` 列表页\n- `edit` 编辑页\n- `view` 查看页\n- `curd` 列表、编辑、查看\n\n# 问题记录\n\n## 项目代码出错：\n\n在使用`ng new project`项目后,注意此时项目已初始化`git init`,在后续往项目中添加`ng add ng-alain`后,首次运行`yarn start`项目正常启动并预览。\n\n后续通过`vscode`对代码`commit`后,在此启动`yarn start`发现项目报错!编译不通过!\n\n截图部分代码出现：\n\n> 1. `>`多余的单书名号；\n> 2. `\"`部分代码片段中缺失双引号；\n\n![](./angular使用ng-alain/Snipaste_2023-10-09_17-35-00.png)\n\n## 项目代码报红\n\n禁用`ESLint`插件\n![](./angular使用ng-alain/Snipaste_2023-10-10_09-19-27.png)\n","categories":["教程集合"]},{"title":"GitHub仓库主页美化教程","url":"//20237.html","content":"\n参考博客：[GitHub 个人主页的究极美化攻略：当一个外链战士（万字详述）](https://blog.csdn.net/weixin_62651706/article/details/137957144)\n\n---\n\n\n## 创建github同名仓库\n\n![](./GitHub仓库主页美化教程/Snipaste_2024-06-12_15-06-36.png)\n\n## 安装waketime插件\n[官网地址](https://wakatime.com/)\n\n可通过`github`授权登录，然后获取`api key`，在idea（或其他）工具插件市场搜索`waketime`安装\n\n![](./GitHub仓库主页美化教程/Snipaste_2024-06-13_08-17-23.png)\n\n> Idea安装插件后，首次会需要输入waketime的`api key`\n\n![](./GitHub仓库主页美化教程/Snipaste_2024-06-13_08-40-27.png)\n\n## 页头、页脚\n[开源项目 capsule-render](git@github.com:kyechan99/capsule-render.git)\n\n> {TITLE} 替换成你想要的大标题，{SUB_TITLE} 替换成你想要的小标题。 \n\n页面顶部（section=header）\n```\n<p align=\"center\">\n<img src=\"https://capsule-render.vercel.app/api?type=waving&color=timeGradient&height=300&&section=header&text={TITLE}&fontSize=90&fontAlign=50&fontAlignY=30&desc={SUB_TITLE}&descAlign=50&descSize=30&descAlignY=60&animation=twinkling\" />\n</p>\n```\n\n页面底部（section=footer）\n```\n<p align=\"center\">\n<img src=\"https://capsule-render.vercel.app/api?type=waving&color=timeGradient&height=300&&section=footer&text={TITLE}&fontSize=90&fontAlign=50&fontAlignY=70&desc={SUB_TITLE}&descAlign=50&descSize=30&descAlignY=40&animation=twinkling\" />\n</p>\n```\n\n## 打字机效果\n\n[Readme Typing SVG](https://readme-typing-svg.demolab.com/demo/)\n\n在上述网站生成后，复制到readme文件中即可\n\n## GitHub 数据概览\n\n[项目地址 github-readme-stats ](https://github.com/anuraghazra/github-readme-stats)\n\n\n> {YOUR_USERNAME} 替换自己的用户名\n\n```\n<img align=\"center\" width=\"400\" src=\"https://github-readme-stats.vercel.app/api?username={YOUR_USERNAME}&theme=transparent&include_all_commits=true&show_icons=true&hide_border=true\" />\n```\n\n## 连续贡献记录\n[官方生成地址](https://streak-stats.demolab.com/demo/)\n\n","categories":["教程集合"]},{"title":"Angular学习笔记","url":"//28172.html","content":"\n\n> 视频来源\n[【建议1.5px倍速】Angular教程_Angular8 Angular9 Angular12入门实战视频教程-2023年更新【IT营】](https://www.bilibili.com/video/BV1bt411e71b?vd_source=8e00952413264f3b3e94efc849ae1d4e)\n\n# Angular 初识\n\n## Angular 环境配置\n\n```\nnpm install -g @angular/cli\n```\n\n```\ncnpm install -g @angular/cli\n```\n\n备注：`npm`若安装慢，可尝试使用`cnpm`方式代替，需要先安装`cnpm`依赖\n> `npm install -g cnpm --registry=https://registry.npm.taobao.org`\n\n\n## Angular 创建项目\n\n直接安装\n```\nng new angularDemo\n```\n\n跳过依赖安装\n```\nng new angularDemo --skip-install\n```\n\n项目创建完成后安装依赖并启动\n```\nnpm install / cnpm install \n```\n\n```\nng serve --open\n```\n\n## Augular 开发工具推荐\n\n工具：`Vscode`\n\n工具插件：`Angular Language Service`\n\n## Angular 结构目录\n![](./Angular学习笔记/Pasted%20image%2020230922173804.png)\n\n- `*.spec.ts` 属于测试文件，开发过程不需要关注\n\n# Angular 组件使用\n\n## 命令行创建组件\n使用命令创建组件，会自动引入并配置到`app.module.ts`中\n```\nng g component components/news\n```\n> `components/news` 属于指定的目录/文件\n\n![](./Angular学习笔记/微信截图_20230925093650.png)\n\n![](./Angular学习笔记/1695606652583.png)\n\n### 补充\n\n```\nng generate component dashboard --module=app.module\n```\n> 备注：需要指定`--module=app.module`,否则报错\n>>Error: More than one module matches. Use skip-import option to skip importing the component into the closest module. More than one module matches. Use skip-import option to skip importing the component into the closest module.\n\n## 组件使用方法\n\n组件`news.components.ts`，其中`selector`为组件使用名称\n```\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-news',\n  templateUrl: './news.component.html',\n  styleUrls: ['./news.component.css']\n})\nexport class NewsComponent {\n\n}\n```\n\n在`app.component.html`中使用方式\n```\n<!-- 新组件使用 -->\n<app-news></app-news>\n\n<!-- 原app.component.html内容-->\n<div>\nthis is angular Index !\n</div> \n```\n\n## 组件里面绑定数据\n组件`.ts`定义一个属性`title`\n\n> 规范定义属性格式\n```\n  public student: string = \"XXXX\";\n  public test: any = 'XXXXX';\n```\n\n```\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-news',\n  templateUrl: './news.component.html',\n  styleUrls: ['./news.component.css']\n})\nexport class NewsComponent {\n\n  title = \"我是一个新闻组件~\";\n\n}\n```\n\n在`news.component.html`使用属性\n```\n<p>{{title}}</p>\n```\n页面预览显示\n![](./Angular学习笔记/微信截图_20230925100647.png)\n\n### 基本数据类型\n\n> [参考博客](https://blog.csdn.net/qingdatiankong/article/details/79258409)\n\n- Boolean 布尔\n- number 数字\n- string 字符串\n- array 数组\n- any 任意类型\n- tuple 元组类型\n- enum 枚举\n- null和undefined\n- void类型\n- never类型\n\n布尔\n```\nlet flg : boolean = true;\n```\n\n 数字\n```\nlet a : number = 6;\n```\n\n字符串\n> Typescript支持使用单引号或双引号来表示字符串类型。支持使用模板字符串反引号（`）来定义多行文本和内嵌表达式。使用${expr}的形式嵌入变量或表达式。\n```\nlet name : string = \"Angular\";\nlet year : number = 2;\nlet words : string = `你好${name}${year}`;\n```\n\n 数组\n```\nlet arr : number[] = [1,2];\nlet arr : Array<number> = [1,2];\n```\n\n\n 元组\n> 元组类型用来表示已知元素数量和类型的数组，各元素类型不必相同。\n```\nlet xx : [string, number];\nxx = ['Angular', 2];\n```\n\n 枚举\n```\nenum Name {LI,WANG,ZHAO};\n let nm : Name = Name.WANG;\n alert(nm);//1\n枚举默认下标是从0开始，可以手动修改。\n enum Name2 {LI=3,WANG,ZHAO=8};\n let nm2 : Name2 = Name2.WANG;\n alert(nm2);//4\n alert(Name2.ZHAO);//8\n ```\n\nnull和undefined\n ```\n let x : number | null | undefined;\n ```\n\nvoid类型\n```\n function hello() :void {alert(\"hello\");}\n ```\n\n\nnever类型\n > never是其他类型的子类型，代表不会出现的值。声明为never类型的变量只能被never类型所赋值，在函数通常表现为抛出异常或无法执行到终止但（例如无限循环）\n```\n let x : never;\n x = (() => {throw new Error('exeption occur')})();\n ```\n\n\n## 在组件里面绑定属性\n属性`title`的动态取值,需要用`[]`中括号包起来。\n```\n<div [title]=\"student\">\n    this is angular Index !\n</div> \n```\n\n## 在组件里面绑定html代码片段\n```\nhtmlH:any = \"<h1>我是html代码段!</h1>\";\n```\n\n```\n<span [innerHTML]=\"htmlH\"></span>\n```\n\n\n\n## 引入图片\n\n\n```\n#静态文件资源目录`assets`下\n<img src=\"assets/images/all.png\" />\n\n#图片资源目录由动态获取\n<img [src]=\"pic\"/>\n```\n\n# Angular 组件方法/命令\n\n## 在组件里面使用循环\n```\narr = [12,234,231];\n```\n\n> `*ngFor=\"let item of arr ` 标准语法格式，`arr`为定义的数据对象\n```\n<ul>\n    <li *ngFor=\"let item of arr\">\n        {{item}}\n    </li>\n</ul>\n```\n\n## 循环数据显示数组的索引（key）\n\n```\n  public list:any[] = [\n\n    {\n      \"title\":\"我是标题01\"\n    },\n    {\n      \"title\":\"我是标题02\"\n    },\n    {\n      \"title\":\"我是标题03\"\n    },\n\n  ];\n```\n\n```\n<ul>\n    <li *ngFor=\"let item of list;let key = index;\">\n        {{key}} -- {{item.title}}\n    </li>\n</ul>\n```\n\n## ngif的使用\n\n```\npublic flag:boolean = false;\n```\n\n```\n<div *ngIf=\"flag\">\n    {{flag}}\n</div>\n<div *ngIf=\"!flag\">\n    {{flag}}\n</div>\n```\n\n### ngif搭配ngfor使用\n\n#### 方式01\n> [ngif]实现\n```\n<ul>\n    <li *ngFor=\"let item of list;let key = index;\">\n        \n        <span *ngIf=\"key == 2\" class=\"red\"> {{key}} -- {{item.title}} </span>\n        <span *ngIf=\"key != 2\"> {{key}} -- {{item.title}} </span>\n\n    </li>\n</ul>\n```\n#### 方式02\n> [ngclass]实现\n```\n<ul>\n    <li *ngFor=\"let item of list;let key = index;\">\n        <span [ngClass]=\"{'red': key==1,'blue':key==0}\"> {{key}} -- {{item.title}} </span>\n    </li>\n</ul>\n```\n\n## ngswitch的使用\n```\npublic orderStatus:number = 1; \n```\n\n```\n<span [ngSwitch]=\"orderStatus\">\n<p *ngSwitchCase=\"1\">\n    订单已支付\n</p>\n<p *ngSwitchCase=\"2\">\n    订单已支付并确认\n</p>\n<p *ngSwitchDefault>\n    订单未支付\n</p>\n</span>\n```\n\n## ngclass的使用\n```\n<div>\n <span [ngClass]=\"{'red': flag,'blue': !flag}\"> ngclass属性 </span>\n</div>\n```\n\n## ngstyle的使用\n\n静态方式写法\n```\n<p [ngStyle]=\"{'color':'red'}\">我是一个p标签</p>\n\n```\n\n动态方式写法\n> 主要`arr`，如果是动态取值，不加`'`单引号。静态方式写法需要加单引号。\n```\n  public arr:string = 'red';\n```\n```\n<p [ngStyle]=\"{'color':arr}\">我是一个p标签</p>\n```\n\n## 管道\n```\n  public today:any = new Date();\n```\n\n```\n<P>{{today}}</P>\n<p>{{today | date: 'yyyy-MM-dd HH:mm:ss'}}</p>\n```\n\n## 执行方法\n\n```\n<hr>\n\n<button (click)=\"run()\">run</button>\n\n<hr>\n\n<input type=\"text\" (keydown)=\"keyDown($event)\">\n```\n\n```\n  run(){\n    alert('执行自定义方法!');\n  \n  }\n\n  keyDown(event: any){\n    if( event.code == 'Enter' ){\n      console.log('敲了一下回车');\n    }else{\n      console.log(event.code);\n    }\n  }\n```\n\n## 双向绑定 mvvm\n\n需要在`app.module.ts`中引入`FormsModule`\n```\nimport { FormsModule } from '@angular/forms';\n```\n\n并且在`imports`中声明当前`FormModule`的使用\n```\n@NgModule({\n  declarations: [\n    AppComponent,\n    NewsComponent,\n    HomeComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\n\n\n```\n  public keywords:string = '';\n```\n\n```\n<input type=\"text\" [(ngModel)]=\"keywords\">\n{{keywords}}\n```\n\n# Angular 服务引入\n```\nng g service services/my_new_service\n```\n\n## `app.module.ts`中声明服务\n\n```\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\n\nimport {TestService} from './services/test.service';\n\n\n@NgModule({\n  declarations: [\n    ...\n  ],\n  imports: [\n    ...\n  ],\n  providers: [TestService],\n  bootstrap: [...]\n})\nexport class AppModule { }\n\n```\n\n在需要使用的`component`也需要在声明一次\n```\nimport { TestService } from 'src/app/services/test.service';\n```\n\n> 官方推荐使用`service`的方式\n\n通过构造方法注入参数对象\n```\n  constructor(public test:TestService){\n      let t  = this.test;\n      console.log(t.get());\n  }\n```\n\n# Angular 操作原生dom节点\n\n## 方式一\n\n```\n<div id=\"box\">\n    this is a box !\n</div>\n<br>\n<div id=\"box1\" *ngIf=\"flag\">\n    this is a box1 !\n</div>\n```\n\n```\n  // 组件和指令初始化完成，不是dom加载完成\n  ngOnInit(): void {\n\n    let oBox:any = document.getElementById('box');\n    console.log(oBox.innerHTML);\n    oBox.style.color = 'red';\n\n    // let oBox1:any = document.getElementById('box1');\n    // console.log(oBox1.innerHTML);\n    // oBox1.style.color = 'red';\n  }\n\n  //视图加载完成后触发的方法，dom加载完成 (建议把dom操作放这里)\n  ngAfterViewInit(): void {\n \n    let oBox1:any = document.getElementById('box1');\n    console.log(oBox1.innerHTML);\n    oBox1.style.color = 'red';\n  }\n```\n\n## 方式二\n\n引入\n```\nimport { ViewChild } from '@angular/core';\n```\n\n声明\n```\n<div #box2>\n  我是一个dom节点\n</div>\n```\n\n赋值\n```\n //获取dom节点并赋值box2\n  @ViewChild('box2') box2:any;\n```\n\n使用\n```\n  ngAfterViewInit(): void {\n    console.log(this.box2.nativeElement);\n\n    this.box2.nativeElement.style.width= 200;\n    this.box2.nativeElement.style.height= 200;\n    this.box2.nativeElement.style.background= 'red';\n  }\n```\n\n\n# Angular 组件间的传值\n## 父->子组件间的传值\n> 1.这里示例是父组件->子组件传值\n\n> 2,若需要父组件使用子组件，则`@ViewChild`是一种方法\n\n### 传值\n\n父组件定义传值参数\n```\npublic title:string = '父组件传值';\n```\n\n父组件页面html引入子组件\n> title 是父组件传值参数\n```\n<app-son [title]=\"title\"></app-son>\n```\n\n子组件引入`Input`模块\n```\nimport { Input } from '@angular/core';\n```\n\n子组件接收值\n```\n@Input() title:any;\n```\n\n### 传方法\n\n父组件定义方法\n```\nrun(){\n  alert('父组件的方法!');\n}\n```\n\n父组件页面html引入子组件\n> 'run'不需要加(),表示的是方法，而不是执行方法\n```\n<app-son [run]='run'></app-son>\n```\n\n子组件调用\n```\n@Input() run:any;\n\nrunParentsMethod(){\n  this.run();\n}\n```\n\n\n### 传递组件\n父组件页面html引入子组件\n> 'this'表示的是整个组件\n```\n<app-son [home]='this'></app-son>\n```\n\n子组件调用\n```\n@Input() home:any;\n\nrunParentsMethod(){\n  <!-- this.run(); -->\n\n  //获取父组件的值\n  alert(this.home.msg);\n\n  //调用父组件方法\n  this.home.run();\n}\n\n```\n\n\n## 子组件通过@output触发父组件方法\n> 比较复杂，用的比较少，但是要知道。\n\n子组件引入output和EventEmitter\n```\nimport { Output,EventEmitter } from '@angular/core';\n```\n\n子组件中实例化EventEmitter\n```\n@Output() private outer = new EventEmitter<string>();\n```\n\n子组件通过EventEmitter对象outer实例广播数据\n```\nsendParent(){\n  this.outer.emit('msg from child');\n}\n```\n\n父组件调用子组件时候，定义接收事件，outer就是子组件EventEmitter对象outer  \n```\n<app-header (outer)=\"runParent($event)\">\n</app-header>\n```\n\n父组件接收到数据会调用自己的runParent方法，这个时候就可以拿到子组件数据\n```\nrunParent(e){\n  //e 就是子组件传值给父组件的参数\n  console.log(e);\n}\n```\n\n## 拓展：非父子组件通信\n- localstage\n- 服务形式（service公有的组件）\n\n\n# Angular 异步数据编程\n\n`TestService`服务调用异步方法\n```\n  //同步方法\n  get(){\n    return 'this is a test service !';\n  }\n\n  //异步方法\n  //1.回调函数处理异步方法数据\n  getCallBackData(cb:any){\n\n    setTimeout(() => {\n       var name = '张三';\n       cb(name);\n    }, 1000);\n\n  }\n\n  //2. promise处理异步方法数据\n  getPromiseData(){\n\n    return new Promise((resolve,reject)=>{\n\n      //resolve(); 成功执行函数\n      //reject();  失败执行函数\n\n      setTimeout(() => {\n        var name = '张三--promise';\n        resolve(name);\n     }, 1000);\n    });\n    \n\n  }\n\n  //3. rxjs 处理异步方法数据\n  getrxjsData(){\n\n    return new Observable(observe=>{\n\n      //成功数据返回\n      // observe.next();\n      //失败数据返回\n      // observe.error();\n\n      setTimeout(() => {\n        var name = '张三--rxjs';\n        observe.next(name);\n     }, 1000);\n\n    });\n\n  }\n```\n\n获取异步方法返回参数结果\n```\nngOnInit(): void {\n\n    //同步方法\n    this.msg = this.testService.get();\n    console.log(this.msg);\n\n    //异步方法\n    this.testService.getCallBackData((data:any)=>{\n      console.log(data);\n    });\n\n    //Promise\n    var promiseData = this.testService.getPromiseData();\n    promiseData.then((data)=>{\n      console.log(data);\n    });\n\n    //rxjs\n    var rxjsData = this.testService.getrxjsData();\n    rxjsData.subscribe((data)=>{\n      console.log(data);\n    });\n\n  }\n```\n\n\n`rxjs`取消订阅\n```\n    var rxjsData = this.testService.getrxjsData();\n    let d = rxjsData.subscribe((data)=>{\n      console.log(data);\n    });\n    setTimeout(() => {\n     d.unsubscribe(); //取消订阅\n    }, 1000);\n```\n\n`rxjs`多次执行异步方法\n> Promise方法不能多次执行(没有这个能力)\n```\n  //4. rxjs 多次执行处理异步方法数据\n  getrxjsIntervalData(){\n\n    return new Observable(observe=>{\n\n      //成功数据返回\n      // observe.next\n      //失败数据返回\n      // observe.error\n\n      let count = 0 ;\n\n      setInterval(() => {\n        count ++ ;\n        \n        var name = '张三--rxjs-interval-'+count;\n        observe.next(name);\n     }, 3000);\n\n    });\n\n  }\n```\n\n`rxjs`的工具函数`map\\filter`\n```\nimport {map,filter} from 'rxjs/operators';\n```\n\n```\nlet number = this.testService.getRxjxIntervalNumData();\n    number.pipe(\n\n      //过滤工具\n      filter((value:any)=>{\n        if(value%2==0){\n          return true;\n        }else{\n          return false;\n        } \n      })\n\n      //多个工具组合使用，用','号隔开\n      , \n\n      //map工具\n      map((value:any)=>{\n        return value * value ;\n      })\n \n    ).subscribe((data)=>{\n      console.log(data);\n    });\n```\n\n\n# Angular 数据交互\n\n> [国外测试接口网站](https://reqres.in/)\n\n## get请求数据\n在`app.module.ts`中引入`HttpClientModule`并注入\n```\nimport {HttpClientModule} from '@angular/common/http'\n```\n\n```\n@NgModule({\n  declarations: [\n    ...\n  ],\n  imports: [\n    HttpClientModule\n  ],\n  providers: [...],\n  bootstrap: [...]\n})\nexport class AppModule { }\n```\n\n在需要使用组件中，`引入`并在构造方法中`声明对象`\n```\nimport {HttpClient} from '@angular/common/http';\n```\n\n```\n  constructor( public http: HttpClient ){\n  }\n```\n\n`get`方法调用\n```\n  get(){\n    console.log('get方法调用~');\n    let api = \"https://reqres.in/api/users?page=2\";\n    this.http.get(api).subscribe((response)=>{\n        console.log(response);\n    });\n  }\n```\n\n## post 提交数据\n\n在需要使用组件中，`引入`并在构造方法中`声明对象`\n> `post`需要设置请求头，需要`HttpHeaders`模块\n```\nimport {HttpClient,HttpHeaders} from '@angular/common/http';\n\n```\n\n```\n  post(){\n    console.log('post方法调用~');\n\n    const httpOptions = {\n        headers: new HttpHeaders({'Content-Type':'application/json'})\n    };\n\n    let api = \"https://reqres.in/api/users\";\n    this.http.post(api,'{\"name\": \"morpheus\",\"job\": \"leader\"}',httpOptions).subscribe((response:any)=>{\n      console.log(response);\n    });\n\n  }\n```\n\n## JsonP\n> 跨域的一种解决方案\n\n```\nimport {HttpClientModule,HttpClientJsonpModule} from '@angular/common/http';\n```\n\n```\n@NgModule({\n  declarations: [\n    ...\n  ],\n  imports: [\n    HttpClientModule,\n    HttpClientJsonpModule\n  ],\n  providers: [...],\n  bootstrap: [...]\n})\nexport class AppModule { }\n```\n\n**JsonP需要服务器后端支持**\n\n验证是否支持方法：\n```\nurl?callback=xxx\n或\nurl?cb=xxx\n```\n可响应接口参数返回是否有`xxx`标识名称（xxx是自己定义的一个参数，非必须按xxx标识参数使用）\n\n```\n  jsonP(){\n    console.log('jsonP~');\n    //jsonP请求，服务器必须支持jsonP\n    \n    this.http.jsonp('url','callback').subscribe((response)=>{\n      console.log(response);\n    });\n\n  }\n```\n\n## 使用第三方工具`axios`请求\n> [axios](https://www.axios-http.cn/docs/api_intro)\n\n安装模块\n```\nnpm install axios --save\n```\n\n引入模块\n```\nimport axios from 'axios';\n```\n\n封装service服务供组件调用\n```\nimport { Injectable } from '@angular/core';\nimport axios from 'axios';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpServiceService {\n\n  constructor() { }\n\n  axiosGet(api:string){\n\n    return new Promise((reslove,rject)=>{\n\n      axios.get(api)\n      .then(function (response) {\n      \n        // console.log(response);\n\n        reslove(response);\n      })\n\n    })\n\n    \n  }\n\n}\n\n```\n\n组件中使用\n```\nimport { Component } from '@angular/core';\nimport {HttpClient,HttpHeaders} from '@angular/common/http';\nimport { HttpServiceService } from 'src/app/services/http-service.service';\n\n@Component({\n  selector: 'app-demo04',\n  templateUrl: './demo04.component.html',\n  styleUrls: ['./demo04.component.css']\n})\nexport class Demo04Component {\n\n  constructor( public http: HttpClient ,public httpservice: HttpServiceService ){\n\n  }\n\n  axios(){\n    console.log('axios方法调用~');\n    let api = \"https://reqres.in/api/users?page=2\";\n    this.httpservice.axiosGet(api).then((data)=>{\n      console.log(data);\n    });\n  }\n\n}\n\n```\n\n# Angular 路由\n\n创建新项目时候，需要确认路由创建。\n\n路由文件名`app-routing.module.ts`\n\n\n创建的组件需要挂载到路由中\n```\nimport { NewsComponent } from './components/news/news.component';\nimport { HomeComponent } from './components/home/home.component';\nimport { ProductComponent } from './components/product/product.component';\n\n\nconst routes: Routes = [\n  {path:'home',component:HomeComponent},\n  {path:'news',component:NewsComponent},\n  {path:'product',component:ProductComponent}\n];\n```\n\n匹配不到路由，默认跳转到指定页面\n```\n {path:'**',redirectTo:'home'},\n```\n\n导航选中激活\n> `active`对应样式名\n```\n <a routerLink='/product' routerLinkActive=\"active\" >product</a>\n```\n\n## get 传值\n```\n<a [routerLink]=\"[ '/newscontent' ]\" [queryParams]=\"{'aid':key}\">{{item}}</a>\n```\n\n子组件接收传参\n```\nimport { ActivatedRoute } from '@angular/router';\n```\n\n```\nimport { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-newscontent',\n  templateUrl: './newscontent.component.html',\n  styleUrls: ['./newscontent.component.css']\n})\nexport class NewscontentComponent {\n\n  constructor(public route:ActivatedRoute){\n  }\n\n  ngOnInit(): void {\n    this.route.queryParams.subscribe((data)=>{\n      console.log(data);\n    });\n  }\n\n}\n\n```\n\n## 动态路由传值\n\n> `:aid`是动态路由传值需要获取的参数名称\n```\n{path:'newscontent/:aid',component:NewscontentComponent},\n```\n\n传值\n```\n<ul><li *ngFor=\"let item of list;let key = index\">\n    \n\n    <!-- get传值 -->\n    <!-- <a [routerLink]=\"[ '/newscontent' ]\" [queryParams]=\"{'aid':key}\">{{item}}</a> -->\n    <!-- 动态路由传值 -->\n    <a [routerLink]=\"[ '/newscontent/',key ]\" >{{item}}</a>\n    \n</li></ul>\n```\n\n接收\n```\n  ngOnInit(): void {\n\n    this.route.params.subscribe((data:any)=>{\n      console.log(data);\n    });\n\n  }\n```\n\n## 动态路由的`js`跳转\n```\nimport { Router } from '@angular/router';\n```\n\n`js`跳转\n```\n  goJs(){\n    console.log('js路由跳转~');\n    this.router.navigate(['/newscontent/','123']);\n  }\n```\n\n## get传值跳转路由\n[【Angular教程_Angular8 Angular9 Angular12入门实战视频教程-2023年更新【IT营】】- P14 - 21:36进度处](https://www.bilibili.com/video/BV1bt411e71b?p=14&vd_source=8e00952413264f3b3e94efc849ae1d4e)\n\n## 父子嵌套路由\n\n父子嵌套路由修改\n```\nconst routes: Routes = [\n  {path:'home',component:HomeComponent,children:[ \n    {path:'menu01',component:Menu01Component},\n    {path:'menu02',component:Menu02Component},\n  ]}\n];\n```\n\n父页面添加路由组件\n```\n<div>\n\n    <div class=\"left\">\n        <a [routerLink]=\"[ '/home/menu01' ]\">菜单01</a>\n        <a [routerLink]=\"[ '/home/menu02' ]\">菜单02</a>\n    </div>\n\n    <div class=\"right\">\n        <router-outlet></router-outlet>\n    </div>\n\n</div>\n```\n\n# Ionic \n> Angular + Ionic 可以开发app\n\n目前暂无学习规划，待`Angular`知识吸收归纳后跟进。","categories":["教程集合"]},{"title":"美区apple账户余额充值并订阅某gpt软件","url":"//65023.html","content":"\n\n简单概括：\n> 通过apple礼品卡充值，并通过礼品卡兑换到账户余额\n\n---\n\n\n## 购买apple礼品卡并充值apple账户余额\n\n[Apple礼品卡购买（官网）](https://www.apple.com/shop/buy-giftcard/giftcard)\n\n选择电子邮件方式\n\n![](./美区apple账户余额充值并订阅某gpt软件/Snipaste_2024-06-29_20-46-44.png)\n\n选择你要充值礼品卡的金额，并填写相关赠送与接收人信息。\n\n![](./美区apple账户余额充值并订阅某gpt软件/Snipaste_2024-06-29_20-50-19.png)\n\n结账\n\n![](./美区apple账户余额充值并订阅某gpt软件/Snipaste_2024-06-29_20-52-39.png)\n\n可以选择不登录apple账户\n\n![](./美区apple账户余额充值并订阅某gpt软件/Snipaste_2024-06-29_20-52-53.png)\n\n选择支付方式`信用卡`\n输入`卡号`,`有效期`,`安全码`\n> 注意：如果使用机场并进行跨区域信用卡预授权付款，请自行确认机场是否安全，避免信息泄露导致资金及信息安全事件发生。\n\n![](./美区apple账户余额充值并订阅某gpt软件/Snipaste_2024-06-29_20-54-19.png)\n\n选择账单接收地址信息\n> 这里可以根据注册美区appleid的信息来填相关的内容\n\n![](./美区apple账户余额充值并订阅某gpt软件/Snipaste_2024-06-29_21-00-07.png)\n\n付款成功后，邮件一共会收到三封邮件\n- 订单通知\n- 礼品卡\n- 订单完成通知\n\n![](./美区apple账户余额充值并订阅某gpt软件/Snipaste_2024-06-29_21-05-16.png)\n\n![](./美区apple账户余额充值并订阅某gpt软件/Snipaste_2024-06-29_21-06-56.png)\n\n![](./美区apple账户余额充值并订阅某gpt软件/Snipaste_2024-06-29_21-08-18.png)\n\n在 `iphone`端，进入大厅后选择`右上角的头像`点击进入\n\n![](./美区apple账户余额充值并订阅某gpt软件/Snipaste_2024-06-29_21-11-40.png\n)\n\n选择`兑换充值卡或代码`\n> 输入`第二封邮件`中的`礼品卡卡密`完成充值美区appleid账户余额\n\n![](./美区apple账户余额充值并订阅某gpt软件/Snipaste_2024-06-29_21-12-08.png)\n\n开始充值\n\n![](./美区apple账户余额充值并订阅某gpt软件/Snipaste_2024-06-29_21-12-43.png)\n\n## 下载相关软件\n\n`Shadowrocket` \n\n> 本地引入科学上网配置或订阅机场链接\n\n`ChatGpt`\n> 首先得有一个`openai`的账号，然后登录app后，付费通过apple余额订阅升级`gpt4.0`\n\n\n![alt text](./美区apple账户余额充值并订阅某gpt软件/Snipaste_2024-06-29_21-20-15.png)\n\n","categories":["教程集合"]},{"title":"angular使用ng-zorro","url":"//9812.html","content":"\n[官方文档 NG-ZORRO](https://ng.ant.design/docs/introduce/zh)\n\n## 创建ng-zorro项目\n\n搭建脚手架\n```\nnpm install -g @angular/cli\n```\n\n创建项目\n```\nng new PROJECT-NAME\n```\n\n初始化ng-zorro\n```\nng add ng-zorro-antd\n```\n\n启动\n```\nng serve --open\n```\n\n## 问题记录\n\n配置登录表单\n```\nng g ng-zorro-antd:form-normal-login <name>\n```\n\n在通过命令创建的html模板页面中，需要在`app.module.ts`引入以下依赖否则报错\n```\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NzButtonModule } from 'ng-zorro-antd/button';\nimport { NzFormModule } from 'ng-zorro-antd/form'; \nimport { NzInputModule } from 'ng-zorro-antd/input';\n```\n\n> 引入`ReactiveFormsModule`对应`formGroup`，其余引入依赖对应各自`ng-zorro`的组件标签","categories":["教程集合"]},{"title":"谷歌浏览器预览Axure导出Html页面展示","url":"//28847.html","content":"\n## 火狐浏览器（不支持）\n> 注意：火狐浏览器无插件支持预览Axure导出页面\n![](./谷歌浏览器预览Axure导出Html页面展示/屏幕快照%202023-07-07%20的%2011.34.41%20上午.png)\n\n## 谷歌浏览器（推荐）\n\n### 初次打开页面\n![](./谷歌浏览器预览Axure导出Html页面展示/屏幕快照%202023-07-07%20的%2011.37.04%20上午.png)\n![](./谷歌浏览器预览Axure导出Html页面展示/屏幕快照%202023-07-07%20的%2011.37.09%20上午.png)\n\n插件名称：`Axure RP Extension for Chrome`\n\n插件设置：\n![](./谷歌浏览器预览Axure导出Html页面展示/屏幕快照%202023-07-07%20的%2011.37.09%20上午.png)\n\n\n<font color='green' > 至此结束-SUCCESS  </font>\n","categories":["教程集合"],"tags":["Axure","Google"]},{"title":"Idea常用设置记录","url":"//60669.html","content":"\n\n## 关闭Idea启动默认开启项目\n\n![](./Idea常用设置记录/Snipaste_2023-09-05_14-14-37.png)\n\n## Idea快捷生成serialVersionUID\n[参考文档](https://blog.csdn.net/Vladimirzzzzz/article/details/129372146)\n\n![](./Idea常用设置记录/Snipaste_2023-09-26_10-26-50.png)\n\n![](./Idea常用设置记录/Snipaste_2023-09-26_10-29-37.png)\n\n\n## Idea关闭行首注释\n![](./Idea常用设置记录/Snipaste_2023-09-27_09-28-01.png)\n\n## webStorm\n![](./Idea常用设置记录/Snipaste_2023-11-17_14-05-27.png)\n\n## Idea打包package关闭单元测试\n[点击跳转](https://blog.csdn.net/agonie201218/article/details/129396503)","categories":["教程集合"]},{"title":"Mock单元测试","url":"//24618.html","content":"\n[mock详细教程入门这一篇就够了](https://blog.csdn.net/weixin_39327556/article/details/125292255)\n\n---\n\n## `pom`依赖环境\n```\n        <!--单元测试-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <!--mock的静态方法测试-->\n        <dependency>\n            <groupId>org.mockito</groupId>\n            <artifactId>mockito-inline</artifactId>\n            <version>4.3.1</version>\n            <scope>test</scope>\n        </dependency>\n```\n\n## 参数说明\n\n@BeforeEach\n> 测试前\n\n@AfterEach\n> 测试后\n\nMockitoAnnotations.openMocks(this)\n> 一般位于`@BeforeEach`,使`Mock`生效\n\n@Spy+@InjectMocks\n> `@Spy` 对象调用真实方法\n>\n> `@InjectMocks` 用于将`@Mock`标记注入测试类中\n\n@Mock\n> 模拟真实方法执行\n\nMockito.when(demo.add(1,2)).thenReturn(3)\n> 打桩，设置测试方法执行结果\n\nMockito.when(demo.add(1,2)).thenThrow(new RuntimeException())\n> 模拟异常抛出\n\nAssertions.assertEquals(3,demo.add(1,2))\n> 断言，判断测试执行结果\n\n## `Mock`单元测试\n\n### 方法测试\n\n```\npackage org.wo0ow.com;\n\npublic class demoTest {\n\n    public int add(int a,  int b){\n        return a + b;\n    }\n\n}\n\n```\n\n```\npackage org.wo0ow.com;\n\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockedStatic;\nimport org.mockito.Mockito;\nimport org.mockito.MockitoAnnotations;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass demoTestTest {\n\n    @Mock\n    demoTest demoTest;\n\n    @BeforeEach\n    void setUp() {\n        //System.out.println(\"测试开始\");\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    void add() {\n\n        /*打桩测试*/\n        //Mockito.when(demoTest.add(1,2)).thenReturn(3);\n        //Assertions.assertEquals(3,demoTest.add(1,2));\n\n        /*模拟抛出异常*/\n        //Mockito.when(demoTest.add(1,2)).thenThrow(new RuntimeException());\n        //demoTest.add(1,2);\n\n        /*调用真实方法*/\n        Mockito.when(demoTest.add(1,2)).thenCallRealMethod();\n        Assertions.assertEquals(3,demoTest.add(1,2));\n    }\n\n    @AfterEach\n    void after(){\n        //System.out.println(\"测试结束\");\n    }\n}\n```\n\n### 静态方法测试\n\n```\n    public static int addutil(int a,  int b){\n        return a + b;\n    }\n\n    public static int addutil(){\n        return 0;\n    }\n```\n\n```\n    @Test\n    void addutil(){\n\n        MockedStatic demo = Mockito.mockStatic(org.wo0ow.com.demoTest.class);\n        demo.when(()-> org.wo0ow.com.demoTest.addutil(1,2)).thenReturn(3);\n        Assertions.assertEquals(3,org.wo0ow.com.demoTest.addutil(1,2));\n        demo.close();\n    }\n\n    @Test\n    void addutilNoParams(){\n        MockedStatic demo = Mockito.mockStatic(org.wo0ow.com.demoTest.class);\n        demo.when(org.wo0ow.com.demoTest::addutil).thenReturn(0);\n        Assertions.assertEquals(0,org.wo0ow.com.demoTest.addutil());\n        demo.close();\n    }\n```\n\n### Service业务测试\n```\nclass ManmanUserInfoServiceImplTest {\n\n    @Mock\n    private ManmanUserInfoMapper manmanUserInfoMapper;\n\n    @Mock\n    private IManmanUserBalanceService manmanUserBalanceService;\n\n    @Spy\n    @InjectMocks\n    private ManmanUserInfoServiceImpl manmanUserInfoService;\n\n    @BeforeEach\n    void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    void insertManmanUserInfo() {\n\n        ManmanUserInfo manmanUserInfo = new ManmanUserInfo();\n        manmanUserInfo.setPhone(\"AAAXXXXBBBB\");\n\n        Mockito.when( manmanUserInfoMapper.insertManmanUserInfo(manmanUserInfo) ).thenReturn(1);\n\n        ManmanUserBalance manmanUserBalance = new ManmanUserBalance();\n        Mockito.when( manmanUserBalanceService.insertManmanUserBalance(manmanUserBalance) ).thenReturn(1);\n\n        assertEquals(1,manmanUserInfoService.insertManmanUserInfo(manmanUserInfo));\n\n    }\n}\n```","categories":["教程集合"]},{"title":"Idea插件推荐","url":"//10013.html","content":"\n## CodeGlance\n代码小地图\n![](./Idea插件推荐/Snipaste_2023-06-26_20-20-24.png)\n \n\n## Git Commit Template\ngit提交代码格式插件\n![](./Idea插件推荐/Snipaste_2023-06-26_20-19-02.png)\n\n## Rainbow Brackets\n> [IntelliJ IDEA Rainbow Brackets 插件安装与使用](https://blog.csdn.net/jiahao1186/article/details/94626937)\n彩虹颜色的括号，清除分清括号个数，防止括号错乱。\n\n代码内高亮\n![](./Idea插件推荐/Snipaste_2023-06-26_20-26-07.png)\n代码外暗淡\n![](./Idea插件推荐/Snipaste_2023-06-26_20-26-21.png)\n\n\n## Alibaba Java Coding Guidelines\n阿里巴巴代码规范\n\n## Maven Helper\n> [IDEA Maven Helper插件（详细使用教程）](https://blog.csdn.net/GyaoG/article/details/120599475)\n> \n解决maven项目冲突\n\n## MyBatisX\n> [SpringBoot中MybatisX插件的简单使用教程（超详细！！）](https://blog.csdn.net/weixin_47025166/article/details/125362323)\n\n## GsonFormatPlus\n根据`json`字符串生成实体类对象\n\n## GitToolBox\n显示每一行代码后面的git版本提交记录信息\n\n## Builder Generator\n\n## Private Notes\n\n## Smart Input\n根据场景自动切换中/英输入法\n","categories":["教程集合"]},{"title":"Mac允许任意来源安装","url":"//46244.html","content":"\n\n```\nsudo spctl --master-disable\n```\n\n![](./Mac允许任意来源安装/WX20230704-213629@2x.png)","categories":["教程集合"]},{"title":"解决shell报错-bash命令无法运行问题","url":"//5003.html","content":"\n\n> 参考博客：[解决shell报错-bash: ./test.sh: bin/bash: bad interpreter: No such file or directory](https://blog.csdn.net/HYZX_9987/article/details/120061672)\n\n\n查看`*.sh`文件格式\n```\ncat -A 文件\n```\n![](./解决shell报错-bash命令无法运行问题/Snipaste_2023-07-16_19-58-43.png)\n\n使用`dos2unix`文件转命令\n```\nyum install -y dos2unix\n```\n\n```\ndos2unix *.sh\n```\n![](./解决shell报错-bash命令无法运行问题/Snipaste_2023-07-16_20-12-37.png)\n\n\n\n","categories":["问题记录"],"tags":["SHELL","BASH"]},{"title":"Liniux下互联网访问不通问题解决","url":"//64790.html","content":"\n\n## 我有话说\n### 前言\n由于需要在Linux上部署PHP+Nginx项目，用了一台现有的服务器，注意：这是大坑的开始！\n\n以后部署新项目一定要新服务器，不要在已有项目运行的服务器上跑新的环境项目，因为你不知道你部署的这个新环境会不会搞一些很奇怪的问题出来。\n\n### 问题描述\n\n在服务器上部署了一个PHP项目，然后联系网络部人员对指定端口开放了互联网访问入口，但是 `telnet` 是通的！通过浏览器打开页面报错`Connection reset by peer`\n```\ntelnet xxx.xxx.xxx.xxx port\n```\n\n通过命令检查防火墙是否开启:\n```\nsystemctl status firewalld \n\nservice iptables status\n```\n\n都未显示防火墙，认为是防火墙默认已关闭的，所以一度怀疑是在互联网相关入口处有啥限制导致的！\n\n如果当时`firewall-cmd --state`命令检查下就好了，显示`running`!!!\n\n当时问题有三个\n- nginx启动报错\n- 防火墙无法关闭\n- nginx访问403报错\n\n## 解决方式\n\n### 启动nginx报错\n\n我之前启动nginx方式`/usr/sbin/nginx -s reload`,实际配置了服务方式的`systemctl start nginx.service`，可能导致冲突原服务方式启动报错。\n\n![](./Liniux下互联网访问不通问题解决/微信图片_20240312145119.png)\n\n[Nginx 启动报 [emerg] bind() to 0.0.0.0:XXXX failed (13: Permission denied)错误处理](https://blog.csdn.net/RunSnail2018/article/details/81185138)\n\n[SElinux错误:值错误:端口tcp/5000已定义](https://cloud.tencent.com/developer/ask/sof/117120965)\n\n查看http允许访问的端口\n```\nsemanage port -l | grep http_port_t\n```\n> 显示输出： http_port_t                    tcp      80, 81, 443, 488, 8008, 8009, 8443, 9000\n\n启动的端口新增\n```\nsemanage port -a -t http_port_t  -p tcp 8000\n```\n\n报错日志：`ValueError: Port tcp/5000 already defined`\n\n\n将`-a`选项替换为用于修改的`-m`，将`tcp port 8000`添加到`http_port_t`中\n```\nsemanage port -m -t http_port_t -p tcp 8000\n```\n\n### 关闭防火墙\n[centOS7防火墙关闭失败问题](https://www.cnblogs.com/spll/p/9804469.html)\n\n由于无法直接通过命令关闭防火墙，且不清楚实际需要放开服务端口有哪些，所以只得想办法关闭防火墙服务。\n\n通过以下命令，先执行一遍。 \n```\nsystemctl stop firewalld\npkill -f firewalld\nsystemctl start firewalld\n```\n在关闭防火墙\n```\nsystemctl stop firewalld\n```\n\n> 一般如果云服务器，可以在云服务商的安全组开启限定端口访问，可以关闭服务器的防火墙（仅个人想法）。\n\n在执行`firewall-cmd --state`显示`not running`就ok啦！\n\n### 关闭selinux\n\n[selinux改变状态不需要重启的方法](https://blog.csdn.net/yujia_666/article/details/107822046)\n\n由于通过互联网`http://xxx.xxx.xxx.xxx:port/`访问页面报错`nginx 403`，经过查询需要关闭`selinux`，修改配置文件需要重启服务器，于是选择临时更改解决。\n\n\n方式一：\n修改配置文件`/etc/selinux/config`，然后重启服务器。\n```\nSELINUX=disabled\n```\n\n方式二：\n```\nsetenforce 0\n```\n- 【默认：enforcing】setenforce 1 设置SELinux 成为enforcing模式\n- setenforce 0 设置SELinux 成为permissive模式\n\n查看`selinux`状态\n```\nsestatus -v\n```\n![](./Liniux下互联网访问不通问题解决/2024-03-12_15-06-55.png)\n\n修改后，访问地址页面及显示正常\n![](./Liniux下互联网访问不通问题解决/2024-03-12_15-01-12.png)\n\n","categories":["问题记录"]},{"title":"OceanBase数据库搭建使用","url":"//15846.html","content":"\n## 前言\n[OceanBase下载中心（选择社区版）](https://www.oceanbase.com/softwarecenter)\n\n[OceanBase快速上手(方案一：部署 OceanBase 演示环境)](https://open.oceanbase.com/quickStart)\n\n## 部署 OceanBase 演示环境\n### 下载并安装 all-in-one 安装包\n> 当前为下载压缩包方式\n```\ntar -xzf oceanbase-all-in-one-*.tar.gz\ncd oceanbase-all-in-one/bin/\n./install.sh\nsource ~/.oceanbase-all-in-one/bin/env.sh\n```\n### 单机部署 OceanBase 数据库\n```\nobd demo\n```\n\n使用 OBClient 客户端连接到 OceanBase 数据库\n```\n# 通过 2881 端口直连数据库\nobclient -h127.0.0.1 -P2881 -uroot@sys -Doceanbase -A\n# 通过 ODP 代理访问数据库\nobclient -h127.0.0.1 -P2883 -uroot@sys -Doceanbase -A --proxy-mode\n```\n\n## 运维管理工具\n[ODC](https://obbusiness-private.oss-cn-shanghai.aliyuncs.com/download-center/opensource/odc/v4.2.0/OceanBase%20Developer%20Center%20Setup%204.2.0%20win64jre.exe)\n\n![](./OceanBase数据库搭建使用/Snipaste_2023-09-08_11-45-42.png)\n\n## 问题记录\n[ERROR] (127.0.0.1) open files number must not be less than 20000 (Current value: 1024)\n\n> [Linux 修改open files 数量](https://www.jianshu.com/p/10ac8e141d76)\n\n1.修改file-max\n```\n# echo  102400 > /proc/sys/fs/file-max \n# sysctl -w \"fs.file-max=102400\"，前面2种重启机器后会恢复为默认值\n# vim /etc/sysctl.conf, 加入以下内容，重启生效\nfs.file-max=102400\nnet.nf_conntrack_max = 1024000\nnet.netfilter.nf_conntrack_max = 1024000\n```\n\n2.修改ulimit的open file，系统默认的ulimit对文件打开数量的限制是1024\n```\n# ulimit -HSn 102400  //这只是在当前终端有效，退出之后，open files又变为默认值。当然也可以写到/etc/profile中，因为每次登录终端时，都会自动执行/etc/profile\n或\n# vim /etc/security/limits.conf  //加入以下配置，重启即可生效\n* hard nofile 102400\n* soft nofile 102400\n```\n","categories":["教程集合"]},{"title":"SpringCloud基础教程-Eureka-Client","url":"//34343.html","content":"\n\n> 参考博客: [Springboot 整合 SpringCloud组件-Eureka 微服务 EurekaClient（二）](https://blog.csdn.net/qq_35387940/article/details/94562280)\n\n---\n## Eureka注册中心\nEureka注册中心服务-发现Client端截图\n![](./SpringCloud基础教程-Eureka-Client/Snipaste_2023-06-19_08-51-09.png)\n\n---\n\n## 相关配置项\n\n### 入口启动类\n\n`@EnableEurekaClient`是Eureka客户端的核心注解\n```\npackage com.mumu.springcloud_eureka_client;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.netflix.eureka.EnableEurekaClient;\n\n@EnableEurekaClient\n@SpringBootApplication\npublic class SpringcloudEurekaClientApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringcloudEurekaClientApplication.class, args);\n    }\n\n}\n\n```\n\n### yml配置文件\n\n`application.yml`配置文件\n```\nserver:\n  port: 8762\n\nspring:\n  application:\n    name: client-01\neureka:\n  instance:\n    #以IP地址注册到服务中心，相互注册使用IP地址\n    preferIpAddress: true\n    instance-id: ${spring.cloud.client.ip-address}:${server.port}\n  client:\n    #eureka server注册中心的地址\n    serviceUrl:\n      defaultZone: http://localhost:8080/eureka/\n```\n\n### pom配置文件\n\n核心pom配置项\n```\n<dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n</dependency>\n```\n\n完整pom配置文件\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.7.12</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <groupId>com.mumu</groupId>\n    <artifactId>springcloud_eureka_client</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>springcloud_eureka_client</name>\n    <description>springcloud_eureka_client</description>\n\n    <properties>\n        <java.version>1.8</java.version>\n        <spring-cloud.version>2021.0.7</spring-cloud.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n```\n\n\n## 附件\n\n[SpringCloud-Eureka-Client.zip](./SpringCloud%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B-Eureka-Client/springcloud_eureka_client.zip)","categories":["教程集合"],"tags":["SpringCloud","Eureka-Client"]},{"title":"SpringCloud基础教程-Feign","url":"//22804.html","content":"\n> 参考博客: [Springboot 整合 SpringCloud组件-Feign(Ribbon/Hystrix) （三）](https://blog.csdn.net/qq_35387940/article/details/94569189)\n>> 由于SpringCloud版本不同，上述文档中`feign`开启`hystrix`失效!\n>\n> 参考博客: [Spring Cloud 之五：Feign使用Hystrix](https://blog.csdn.net/caitianzhen2/article/details/130174670)\n\n---\n\n## 相关配置项\n\n### 入口启动类\n```\npackage com.mumu.springcloud_feign;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\nimport org.springframework.cloud.netflix.eureka.EnableEurekaClient;\nimport org.springframework.cloud.netflix.hystrix.EnableHystrix;\nimport org.springframework.cloud.netflix.hystrix.dashboard.EnableHystrixDashboard;\nimport org.springframework.cloud.openfeign.EnableFeignClients;\n\n@EnableEurekaClient\n@EnableDiscoveryClient\n@EnableHystrix\n@EnableHystrixDashboard\n@EnableFeignClients\n@SpringBootApplication\npublic class SpringcloudFeignApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringcloudFeignApplication.class, args);\n    }\n\n}\n```\n\n### yml配置文件\n\n```\neureka:\n  instance:\n    preferIpAddress: true\n    instance-id: ${spring.cloud.client.ip-address}:${server.port}\n  client:\n    serviceUrl:\n      defaultZone: http://localhost:8080/eureka/\nserver:\n  port: 8765\n\nspring:\n  application:\n    name: feign\nfeign:\n#  hystrix的配置此处不生效！可能由于springCloud版本的原因，启用`circuitbreaker`开启熔断\n#  hystrix:\n#    enabled: true\n  circuitbreaker:\n    enabled: true\n\n\n```\n\n### pom配置文件\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.7.12</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.mumu</groupId>\n    <artifactId>springcloud_feign</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>springcloud_feign</name>\n    <description>springcloud_feign</description>\n    <properties>\n        <java.version>1.8</java.version>\n        <spring-cloud.version>2021.0.7</spring-cloud.version>\n    </properties>\n    <dependencies>\n\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-openfeign</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>\n            <version>2.2.1.RELEASE</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-hystrix-dashboard</artifactId>\n            <version>2.2.1.RELEASE</version>\n        </dependency>\n\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n\n```\n---\n\n## 代码相关类\n\n### Feign - Service方法接口\n```\npackage com.mumu.springcloud_feign.service;\n\n\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\n\n//@FeignClient(value = \"client-01\",fallback = SchedualServiceHiHystric.class)\n@FeignClient(value = \"client-01\",fallbackFactory = SchedualServiceHiHystricFacotry.class)\n@Component\npublic interface SchedualServiceHi {\n\n    @RequestMapping(value = \"/haveatry\",method = RequestMethod.GET)\n    String sayHiFromClientOne(@RequestParam(value = \"name\") String name);\n\n}\n```\n\n### Feign - Hystrix\n\n#### @FeignClient(fallback=…)\n```\npackage com.mumu.springcloud_feign.service;\n\nimport com.mumu.springcloud_feign.service.SchedualServiceHi;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class SchedualServiceHiHystric implements SchedualServiceHi {\n\n    @Override\n    public String sayHiFromClientOne(String name) {\n        return \"Fallback | sorry! 网络异常，服务暂时无法访问。 请求的name为:\"+name;\n    }\n}\n\n```\n#### @FeignClient(fallbackFactory=…)\n> 支持打印出异常日志（推荐）\n\n```\npackage com.mumu.springcloud_feign.service;\n\nimport org.springframework.cloud.openfeign.FallbackFactory;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class SchedualServiceHiHystricFacotry implements FallbackFactory<SchedualServiceHi> {\n\n    @Override\n    public SchedualServiceHi create(Throwable cause) {\n        return new SchedualServiceHi() {\n            @Override\n            public String sayHiFromClientOne(String name) {\n                System.out.println(\"异常日志error:\"+cause);\n                return \"FallbackFactory | sorry! 网络异常，服务暂时无法访问。 请求的name为:\"+name;\n            }\n        };\n    }\n}\n\n```\n\n## 问题记录\n1. 错误日志: `Could not find artifact org.springframework.cloud:spring-cloud-starter-netflix-hystrix:pom:unknown in central (https://repo.maven.apache.org/maven2)`\n\n> 参考博客解决方式: [Could not find artifact org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:pom](https://blog.csdn.net/weixin_44670952/article/details/104626578)\n\n```\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>\n    <version>2.2.1.RELEASE</version>\n</dependency>\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-hystrix-dashboard</artifactId>\n    <version>2.2.1.RELEASE</version>\n</dependency>\n```\n\n","categories":["教程集合"],"tags":["SpringCloud","Feign"]},{"title":"SpringCloud基础教程-Eureka","url":"//41405.html","content":"\n> 参考博客: [Springboot 整合 SpringCloud组件-Eureka 注册中心 EurekaServer (一)](https://blog.csdn.net/qq_35387940/article/details/94559369)\n\n---\n## Eureka注册中心\nEureka注册中心服务启动截图\n![](./SpringCloud基础教程-Eureka/Snipaste_2023-06-19_08-22-55.png)\n\n---\n\n## 相关配置项\n\n### 入口启动类\n\n`@EnableEurekaServer`是Eureka注册中心的核心注解\n```\npackage com.mumu.springcloud_eureka;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;\n\n@EnableEurekaServer\n@SpringBootApplication\npublic class SpringcloudEurekaApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringcloudEurekaApplication.class, args);\n    }\n\n}\n```\n\n### yml配置文件\n\n`application.yml`配置文件\n```\nserver:\n  port: 8080\n\neureka:\n  instance:\n    hostname: localhost\n  client:\n    #是否注册自身到eureka服务器\n    register-with-eureka: false\n    #是否从eureka服务器获取注册信息\n    fetch-registry: false\n    #设置eureka服务器所在的地址，查询服务和注册服务都需要依赖这个地址\n    service-url:\n      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/\n#  server:\n#    #关闭注册中心自我保护机制\n#    enable-self-preservation: false\n#    #注册中心清理间隔（单位毫秒，默认60*1000）\n#    eviction-interval-timer-in-ms: 10000\n\nspring:\n  application:\n    name: eureka-server\n\n```\n\n### pom配置文件\n\n核心pom配置项\n```\n<dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>\n</dependency>\n```\n\n完整pom配置文件\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.7.12</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    \n    <groupId>com.mumu</groupId>\n    <artifactId>springcloud_eureka</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>springcloud_eureka</name>\n    <description>springcloud_eureka</description>\n    \n    <properties>\n        <java.version>1.8</java.version>\n        <spring-cloud.version>2021.0.7</spring-cloud.version>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n\n```\n\n\n## 附件\n\n[SpringCloud-Eureka.zip](./SpringCloud%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B-Eureka/springcloud_eureka.zip)","categories":["教程集合"],"tags":["SpringCloud","Eureka"]},{"title":"小米11U刷类原生系统教程记录","url":"//30563.html","content":"\n需要科学上网\n\n- 下载pixel刷机文件\n  - https://get.pixelexperience.org/mars\n- 操作安装文档\n  - https://wiki.pixelexperience.org/devices/mars/install/\n\n\nMIUI刷机论坛\n  - https://miuiver.com/aosp-rom-of-xiaomi/\nMIUI中文刷机教程\n  - https://miuiver.com/install-pixelexperience-on-xiaomi/\n\n安装adb环境\n  - https://blog.csdn.net/weixin_42581177/article/details/126777539","categories":["教程集合"]},{"title":"ruoyi框架前后端分离部署实战记录","url":"//3915.html","content":"\n[linux下tomcat设置开机自启动](https://blog.csdn.net/xinx98/article/details/119891693)\n\n[CentOS7设置nginx服务开机自启【开机自启】](https://blog.csdn.net/qq_22841387/article/details/131362796)\n\n\n# 云服务器部署方案\n\n## java后台运行\n```\nnohup java -jar ruoyi-admin.jar >/tmp/ruoyi-log.txt &\n```\n\n查看后台运行\n```\njobs\n```\n\n# VM虚拟机部署方案\n\n## 前端部署\n```\nnpm run build:prod\n```\n\n## 后台部署\n修改pom.xml的packing为`war`格式，部署于Tomcat下\n\n## Nginx配置\n```\nserver {\n        listen       9002;\n        server_name  localhost;\n        charset utf-8;\n\n        location / {\n            root   /usr/local/nginx/html/dist;\n            try_files $uri $uri/ /index.html;\n            index  index.html index.htm;\n        }\n\n        location /prod-api/ {\n                proxy_set_header Host $http_host;\n                proxy_set_header X-Real-IP $remote_addr;\n                proxy_set_header REMOTE-HOST $remote_addr;\n                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n                proxy_pass http://localhost:8080/;\n        }\n\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n```\n\n## 备注\n配置Nginx、Tomcat的自启动\n\n\n\n","categories":["教程集合"]},{"title":"yarn的安装使用","url":"//51953.html","content":"\n\n安装yarn\n```\nnpm install -g yarn\n```\n\n查看yarn版本号\n```\nyarn --version\n```\n\nyarn淘宝源地址配置\n```\nyarn config set registry https://registry.npm.taobao.org -g\nyarn config set sass_binary_site http://cdn.npm.taobao.org/dist/node-sass -g\n```\n\n> 还原配置镜像地址\n```\nyarn config delete registry\nyarn config delete sass_binary_site\n\nyarn config set registry https://registry.npmmirror.com\nyarn config set sass_binary_site https://npmmirror.com/mirrors/node-sass\n```\n","categories":["教程集合"]},{"title":"若依（ruoyi）开发框架支持将word文档等文件转pdf并通过接口实时访问返回pdf水印文件","url":"//29743.html","content":"\n> 文档内链：[通过Java对word/xls/image/ppt转pdf文件并添加水印信息](/posts/3367.html)\n\njava后台端代码\n```\n    @Log(title = \"预览上传文件\", businessType = BusinessType.OTHER)\n    @RequestMapping(\"/queryPdfFile\")\n    public void queryPdfFile(\n            @RequestParam(value = \"fileUrl\",required = true)String fileUrl,\n            HttpServletResponse response\n    )throws  Exception{\n\n        //上传文件目录\n        String defaultBaseDir = RuoYiConfig.getProfile();\n        //文件真实位置\n        String filePath = defaultBaseDir+fileUrl.substring(fileUrl.indexOf(\"/upload\"));\n        logger.info(\"文件FileUrl地址：{}\",filePath);\n\n        String fileStr = fileUrl.substring(fileUrl.lastIndexOf(\"/\"));\n        //文件名称\n        String fileName = fileStr.substring(1);\n        //文件类型\n        String fileType = fileName.substring(fileName.lastIndexOf(\".\")+1);\n\n\n        //获取原文件流数据对象\n        FileInputStream inputStream = new FileInputStream(filePath);\n        //生成临时文件\n        File tempPdfFile = File.createTempFile(fileName+\"_convertpdf_\"+System.currentTimeMillis()+\"\",\".pdf\");\n        FileOutputStream outputStream = new FileOutputStream(tempPdfFile);\n\n        //根据文件类型选择不同转换pdf方法类\n        if( \"jpg\".equals(fileType) || \"png\".equals(fileType) || \"jpeg\".equals(fileType) ){\n            PdfConverUtil.imgToPdf(inputStream, outputStream);\n        }else if( \"doc\".equals(fileType) || \"docx\".equals(fileType) ){\n            PdfConverUtil.wordTopdfByAspose(inputStream, outputStream);\n        }else if( \"xls\".equals(fileType) || \"xlsx\".equals(fileType) ){\n            PdfConverUtil.excelToPdf(inputStream, outputStream);\n        }else{\n            logger.error(\"文件类型异常!fileType:{}\",fileType);\n            return ;\n        }\n\n        logger.info(\"文件fileName:{}转pdf完成~\",fileName);\n\n        /*pdf文件加水印信息*/\n        File tempWaterMarkPdfFile = File.createTempFile(fileName+\"_watermark_\"+System.currentTimeMillis()+\"\",\".pdf\");\n        // 要输出的pdf文件\n        FileOutputStream outputStreamMarkPdf = new FileOutputStream(tempWaterMarkPdfFile);\n        BufferedOutputStream bos = new BufferedOutputStream(outputStreamMarkPdf);\n        // 将pdf文件先加水印然后输出\n        setWatermarkText(bos, new FileInputStream(tempPdfFile) ,fileName+(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date())));\n\n        logger.info(\"文件fileName:{}添加水印watermark完成~\",fileName);\n\n        FileInputStream fileInputStream = new FileInputStream(tempWaterMarkPdfFile);\n        InputStream fis = new BufferedInputStream(fileInputStream);\n        byte[] buffer = new byte[fis.available()];\n        fis.read(buffer);\n        fis.close();\n\n        //设置响应头以指示浏览器下载文件\n        response.setContentType(\"application/pdf\");\n        response.setHeader(\"Content-Disposition\", \"inline; filename=\" + URLEncoder.encode(fileName,\"UTF-8\"));\n\n        OutputStream os = new BufferedOutputStream(response.getOutputStream());\n        os.write(buffer);\n        os.flush();\n\n    }\n```","categories":["教程集合"]},{"title":"若依（ruoyi）开发框架使用教程01","url":"//48206.html","content":"\n## 登录首页信息处理\n后台管理登录页面的信息修改\n- 后台管理系统名称\n- 登录页面底部版权信息\n![](./若依（ruoyi）开发框架使用教程01/Snipaste_2023-06-26_14-56-02.png)\n![](./若依（ruoyi）开发框架使用教程01/Snipaste_2023-06-26_14-57-16.png)\n\n## 登录首页背景图片及登录用户头像处理\n![](./若依（ruoyi）开发框架使用教程01/Snipaste_2023-06-27_10-00-06.png)\n![](./若依（ruoyi）开发框架使用教程01/Snipaste_2023-06-27_10-01-16.png)\n\n\n## 调用`ruoyi`的`upload`组件实现文件上传功能\n> 参考博客: [Vue 中 import 引入的方法在template模板中使用](https://blog.csdn.net/winnyrain/article/details/124624969)\n\n\n### `Vue` 中 `import` 引入的方法在`template模板`中使用\n![](./若依（ruoyi）开发框架使用教程01/Snipaste_2023-07-03_11-04-28.png)\n\n### 调用`ruoyi`的`upload`上传文件组件使用\n\n![](./若依（ruoyi）开发框架使用教程01/Snipaste_2023-07-03_11-06-51.png)\n![](./若依（ruoyi）开发框架使用教程01/Snipaste_2023-07-03_11-07-28.png)\n![](./若依（ruoyi）开发框架使用教程01/Snipaste_2023-07-03_11-07-44.png)\n![](./若依（ruoyi）开发框架使用教程01/Snipaste_2023-07-03_11-08-12.png)\n\n### 调用模板组件实现上传通知新增记录\n\n> 参考博客：[vue-自定义事件之—— 子组件修改父组件的值](https://www.cnblogs.com/padding1015/p/7878741.html)\n\n\n#### 子组件配置\n子组件模板\n![](./若依（ruoyi）开发框架使用教程01/Snipaste_2023-07-03_16-53-30.png)\n\n\n```\n#子组件使用this.$emit()向父组件传值\nthis.$emit(\"input\", this.listToString(this.fileList));\n```\n\n#### 父组件设置\n\n![](./若依（ruoyi）开发框架使用教程01/Snipaste_2023-07-03_16-57-43.png)\n\n\n```\n<uploadIndexVue v-on:input=\"uploadFile($event)\" > </uploadIndexVue>\n```\n- `v-on:`的`input`是子组件方法、`uploadFile`是父组件方法\n\n```\n/** 获取上传文件（子组件）地址 */\nuploadFile(val){\n\n  //空字符串忽略操作\n  if( val === '' || val.trim().length === 0  ){\n    return ;\n  }\n\n  //初始字符串\n  var initUploadFiles = \"\";\n\n  //for循环遍历添加文件请求地址url前缀\n  var uploadFiles = val.split(',');\n  for( var i = 0;i<uploadFiles.length;i++ ){\n    initUploadFiles = \",\" + process.env.VUE_APP_BASE_API+uploadFiles[0];\n  }\n\n  //上传文件\n  this.form.uploadPath = initUploadFiles.slice(1);//字符串截取，移除首位','符号\n\n  //提交添加数据\n  addDoc_upload_record(this.form).then(response => {\n          this.$modal.msgSuccess(\"新增成功\");\n          this.open = false;\n          this.getList();\n  });\n\n}\n```","categories":["教程集合"]},{"title":"'NodeJs新版本引起问题:digitalenveloperoutines::unsupported'","url":"//50836.html","content":"\n参考博客：[nodejs新版本引起的：digital envelope routines::unsupported](https://blog.csdn.net/fengyuyeguirenenen/article/details/128319228)\n\n\n\n## 问题截图\n![](./NodeJs新版本引起问题-digitalenveloperoutines-unsupported/Snipaste_2023-06-25_17-17-04.png)\n\n\n## 解决方式\n\n### 永久解决\n> 未实际运行测试\n\n\n（推荐）修改package.json，在相关构建命令之前加入SET NODE_OPTIONS=--openssl-legacy-provider\n```\n\"scripts\": {\n   \"serve\": \"SET NODE_OPTIONS=--openssl-legacy-provider && vue-cli-service serve\",\n   \"build\": \"SET NODE_OPTIONS=--openssl-legacy-provider && vue-cli-service build\"\n}\n```\n\n### 临时解决\n> 已实际运行正常\n\n1. 在你当前文件的cmd命令窗口输入：`SET NODE_OPTIONS=--openssl-legacy-provider`\n2. 在输入命令：`npm run dev`\n![](./NodeJs新版本引起问题-digitalenveloperoutines-unsupported/Snipaste_2023-06-25_17-20-15.png)\n\n### 版本回退\nnodejs的版本回退16版本\n\n","categories":["问题记录"]},{"title":"maven 解析lombok报错module jdk.compiler does not export com.sun.tools.javac.processing to unnamed module","url":"//1529.html","content":"\n\n> 参考博客：https://blog.csdn.net/qq_45733154/article/details/127318576\n\n![](./maven解析lombok报错modulejdk-compilerdoesnotexportcom-sun-tools-javac-processingtounnamedmodule/Snipaste_2023-06-21_10-11-57.png)\n\n```\n <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n            <version>1.18.20</version>\n            <scope>provided</scope>\n        </dependency>\n```","categories":["问题记录"]},{"title":"Vue3安装依赖报错The-engine-node-is-incompatible-with-this-module","url":"//39037.html","content":"\n> 参考博客:[Vue3安装依赖报错The engine “node“ is incompatible with this module](https://blog.csdn.net/qq_42345906/article/details/120665003)\n\n错误日志：\n```\nC:\\Users\\14751\\Documents\\WorkSpace\\gitee\\hertzbeat\\web-app>yarn install\nyarn install v1.22.19\n[1/4] Resolving packages...\n[2/4] Fetching packages...\nerror eslint-plugin-jsdoc@39.3.25: The engine \"node\" is incompatible with this module. Expected version \"^14 || ^16 || ^17 || ^18 || ^19\". Got \"20.3.0\"\nerror Found incompatible module.\ninfo Visit https://yarnpkg.com/en/docs/cli/install for documentation about this command.\n```\n\n补充兼容报错信息\n```\nyarn config set ignore-engines true\n```","categories":["问题记录"],"tags":["VUE"]},{"title":"Linux登录数据库Can‘t connect to local MySQL server through socket‘/tmp/mysql.sock‘最终解决方法","url":"//23817.html","content":"\n> 参考博客：[Linux 登录数据库Can‘t connect to local MySQL server through socket ‘/tmp/mysql.sock‘最终解决方法](https://blog.csdn.net/u013475386/article/details/118800143)\n\n\n## 问题记录\n![](./Linux登录数据库Can‘tconnecttolocalMySQLserverthroughsocket‘-tmp-mysql-sock‘最终解决方法/Snipaste_2023-06-22_20-59-21.png)\n\n经过实际排查`my.cnf`下无配置`/tmp/mysql.sock`\n\n## 解决方式\n![](./Linux登录数据库Can‘tconnecttolocalMySQLserverthroughsocket‘-tmp-mysql-sock‘最终解决方法/Snipaste_2023-06-22_21-01-38.png)\n\n```\nmysql -h 127.0.0.1 -P 3306 -u root -p\n```","categories":["问题记录"],"tags":["MySQL","/tmp/mysql.sock"]},{"title":"'mysqldump执行命令报错'Couldn't execute 'show create table `tablename`':Table tablename 'doesn't exist''","url":"//32982.html","content":"\n\n参考博客：[mysqldump：Couldn't execute 'show create table `tablename`': Table tablename' doesn't exist (1146)](https://www.cnblogs.com/kerrycode/p/4966172.html)\n\n\n![](./mysqldump执行命令报错-Couldn-texecute-showcreatetable-tablename-Tabletablename-doesn-texist/Snipaste_2023-06-23_08-26-20.png)\n![](./mysqldump执行命令报错-Couldn-texecute-showcreatetable-tablename-Tabletablename-doesn-texist/Snipaste_2023-06-23_08-27-39.png)\n","categories":["问题记录"]},{"title":"MySQL8.0登录提示caching_sha2_password问题解决方法","url":"//43077.html","content":"\n> 参考博客：[MySQL8.0登录提示caching_sha2_password问题解决方法](https://blog.csdn.net/maoxinwen1/article/details/88629313)\n\n# 修改方式\n## 一.修改`my.cnf`配置文件\n```\n[mysqld]\ndefault_authentication_plugin = mysql_native_password\n```\n\n## 二.修改身份验证类型(修改密码)\n```\nALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '123456';\n```\n\n```\nflush privileges;\n```\n\n# 验证结果\n```\nSELECT Host, User, plugin from user;\n```\n\n```\n+-----------+------------------+-----------------------+\n| Host      | User             | plugin                |\n+-----------+------------------+-----------------------+\n| %         | root             | mysql_native_password |\n| localhost | mysql.infoschema | caching_sha2_password |\n| localhost | mysql.session    | caching_sha2_password |\n| localhost | mysql.sys        | caching_sha2_password |\n| localhost | root             | mysql_native_password |\n+-----------+------------------+-----------------------+\n5 rows in set (0.00 sec)\n```\n","categories":["问题记录"],"tags":["Mysql8.0","caching_sha2_password"]},{"title":"'虚拟机未能将管道连接到虚拟机:系统找不到指定的文件'","url":"//9190.html","content":"\n> 参考博客：[虚拟机未能将管道连接到虚拟机: 系统找不到指定的文件](https://blog.csdn.net/qq_43581670/article/details/124495429)\n\n\n## 问题记录01\n![](./虚拟机未能将管道连接到虚拟机-系统找不到指定的文件/Snipaste_2023-06-22_14-16-21.png)\n\n解决方式\n![](./虚拟机未能将管道连接到虚拟机-系统找不到指定的文件/Snipaste_2023-06-22_14-21-32.png)\n\n![](./虚拟机未能将管道连接到虚拟机-系统找不到指定的文件/Snipaste_2023-06-22_14-21-47.png)\n\n\n## 问题记录02\n![](./虚拟机未能将管道连接到虚拟机-系统找不到指定的文件/Snipaste_2023-06-22_14-25-33.png)\n\n安装`C++2015`\n![](./虚拟机未能将管道连接到虚拟机-系统找不到指定的文件/Snipaste_2023-06-22_14-26-12.png)\n\n[C++2015](./虚拟机未能将管道连接到虚拟机-系统找不到指定的文件/VisualC2015.zip)\n\n## 问题记录03\n发现在vm虚拟机中安装centos过程中，键盘输入无效！\n\n最后的解决方式也是误打误撞的，我把`问题01`的设置恢复了，然后在尝试虚拟机安装centos界面键盘正常可输入状态！","categories":["问题记录"],"tags":["Win10","VM虚拟机"]},{"title":"JavaGuide面试突击版-Java基础","url":"//58856.html","content":"\n[JavaGuide面试突击版-学习-0506](/posts/40038.html)\n\n[JavaGuide面试突击版-学习-0507](/posts/23719.html)","categories":["面试准备"],"tags":["JavaGuide面试突击","Java基础"]},{"title":"面试准备-多线程","url":"//8310.html","content":"\n# 多线程\n\n## 线程和进程的区别\n> [进程和线程的区别(超详细)](https://blog.csdn.net/ThinkWon/article/details/102021274)\n\n### 进程\n一个在内存中运行的应用程序. 每一个进程都有自己独立的内存空间,一个进程可以有多个线程,比如在Windows系统中,一个运行的xxx.exe就是一个进程.\n\n### 线程\n进程中一个执行任务控制单元,负责当前进程中程序的执行.一个进程至少有一个线程,一个进程可以运行多个线程,多个线程共享数据.\n\n与进程不同的是同类的多个线程共享进程的**堆**和**方法区**资源,但每个线程有自己的**程序计数器**,**虚拟机栈**,**本地方法栈**,所以系统在产生一个线程或是各个线程间作切换工作时,负担要比进程小得多.线程也被称为**轻量级进程**.\n\n### 进程与线程的区别总结\n- 根本区别: 进程是操作系统资源分配的基本单位,而线程是处理器任务调度和执行的基本单位.\n- 资源开销:\n  - 进程: 每个进程都有独立的代码和数据空间(程序上下文),程序将的切换会有较大的开销.\n  - 线程: 看作轻量级的进程,同一线程共享代码和数据空间,每个线程都有自己独立的运行栈和程序计数器,线程之间切换开销较小.\n- 包含关系: 如果一个进程内有多个线程,则执行过程不是一条线程,而是多条线程共同完成的;线程是进程的一部分,所以线程也被称为轻权进程或轻量级进程.\n- 内存分配: 同一个进程的线程共享本进程的地址空间和资源,而进程之间的空间和资源是相互独立的.\n- 影响关系: 一个进程崩溃后,在保护模式下不会对其他进程产生影响,但是一个线程崩溃整个进程都会死掉.所以多进程比多线程健壮.\n- 执行过程: 每个独立的进程有程序的入口\\顺序执行序列\\程序出口.但是线程不能独立执行,必须依存在应用程序中,由应用程序提供多个线程执行控制,两者均可并发执行.\n\n\n## 什么是上下文切换?\n上下文切换是指操作系统在多任务处理中，暂停当前任务的执行并保存它的状态信息，然后加载下一个任务的状态信息，使得下一个任务能够继续执行。在任务执行完毕或者发生中断时，操作系统会再次进行上下文切换，将之前保存的任务的状态信息恢复到处理器中并继续执行。上下文切换是实现多任务处理的重要技术，但频繁的上下文切换会带来性能开销。\n\n\n## 什么是线程死锁?如何避免死锁?\n\n## 乐观锁和悲观锁了解么？\n> [【BAT面试题系列】面试官：你了解乐观锁和悲观锁吗？](https://www.cnblogs.com/kismetv/p/10787228.html)\n\n## 说说 sleep() 方法和 wait() 方法区别和共同点?\n> [Java中sleep()方法和wait()方法的异同点](https://blog.csdn.net/x541211190/article/details/109545132)\n\n## Java 线程池有哪些参数？阻塞队列有几种？拒绝策略有几种？新线程添加的流程?\n> [Java线程池七个参数详解：核心线程数、最大线程数、空闲线程存活时间、时间单位、工作队列、线程工厂、拒绝策略](https://blog.csdn.net/Anenan/article/details/115603481)\n>\n> [Java-五种线程池，四种拒绝策略，三类阻塞队列](https://blog.csdn.net/xxj_jing/article/details/84835476)\n\n## \n\n\n\n","categories":["面试准备"]},{"title":"Java面试题2023","url":"//33730.html","content":"\n\n# 复习进度总览\n\n> [Java面试常见问题总结（2023最新版）- Guide哥](https://articles.zsxq.com/id_7mcfhuacmhzs.html)\n> \n\n\n## JAVA\n### Java - 基础\n- [x] [Java 中的几种基本数据类型是什么？对应的包装类型是什么？各自占用多少字节呢？](/posts/59036.html)\n- [x] [String 、 StringBuffer 和 StringBuilder 的区别是什么? String 为什么是不可变的?](/posts/21142.html)\n- [x] [String s1 = new String(\"abc\");这段代码创建了几个字符串对象？](/posts/10949.html)\n- [x] [== 与 equals?hashCode 与 equals ?](/posts/33636.html)\n- [x] [包装类型的缓存机制了解么？](/posts/48309.html)\n- [x] [自动装箱与拆箱了解吗？原理是什么？](/posts/13955.html)\n- [x] [深拷贝和浅拷贝区别了解吗？什么是引用拷贝？](/posts/30985.html)\n- [ ] 谈谈对 Java 注解的理解，解决了什么问题？\n- [x] [Exception 和 Error 有什么区别？](/posts/60744.html)\n- [x] [Java 反射？反射有什么缺点？你是怎么理解反射的（为什么框架需要反射）？](/posts/43267.html)\n- [x] [Java 泛型了解么？什么是类型擦除？介绍一下常用的通配符？](/posts/47052.html)\n- [x] [内部类了解吗？匿名内部类了解吗？](/posts/19656.html)\n- [x] [BIO,NIO,AIO 有什么区别?](/posts/59996.html)\n\n### Java - 集合框架\n- [x] [说说 List,Set,Map 三者的区别？三者底层的数据结构？](/posts/50957.html)\n- [x] [有哪些集合是线程不安全的？怎么解决呢？](/posts/62981.html)\n- [x] [比较 HashSet、LinkedHashSet 和 TreeSet 三者的异同](/posts/18392.html)\n- [x] [HashMap 和 Hashtable 的区别？HashMap 和 HashSet 区别？HashMap 和 TreeMap 区别？](/posts/3318.html)\n- [x] [HashMap 的底层实现](/posts/34725.html)\n- [x] [HashMap 的长度为什么是 2 的幂次方](/posts/23150.html)\n- [x] [ConcurrentHashMap 和 Hashtable 的区别？](/posts/12495.html)\n- [x] [ConcurrentHashMap 线程安全的具体实现方式/底层具体实现](/posts/19235.html)\n\n### Java - JVM\n- [x] [jvm 内存结构](/posts/62546.html)\n- [x] [jvm 调优参数](/posts/7617.html)\n- [x] [什么是类加载？何时类加载？类加载流程？](/posts/26747.html)\n- [ ] 知道哪些类加载器。类加载器之间的关系？\n- [ ] 类加载器的双亲委派了解么？ 结合 Tomcat 说一下双亲委派（Tomcat 如何打破双亲委托机制？...）。\n- [ ] 为什么需要双亲委派\n- [ ] Java 内存模型\n- [ ] 栈中存放什么数据，堆中呢？\n- [ ] 大对象放在哪个内存区域\n- [ ] 堆区如何分类\n- [ ] 垃圾回收有哪些算法\n- [ ] GC 的全流程\n- [ ] GC 中老年代用什么回收方法？\n\n### Java - 多线程\n- [ ] 线程和进程的区别。\n- [ ] 什么是上下文切换?\n- [x] [什么是线程死锁?如何避免死锁?](/posts/58164.html)\n- [x] [说说 sleep() 方法和 wait() 方法区别和共同点?](/posts/31949.html)\n- [x] [Java 线程池有哪些参数？阻塞队列有几种？拒绝策略有几种？新线程添加的流程?](/posts/50604.html)\n- [x] [实现 Runnable 接口和 Callable 接口的区别](/posts/54835.html)\n- [x] [讲一下 JMM(Java 内存模型)。volatile 关键字解决了什么问题？说说 synchronized 关键字和 volatile 关键字的区别。](/posts/50822.html)\n- [ ] AQS 原理了解么？AQS 组件有哪些？\n- [x] [用过 CountDownLatch 么？什么场景下用的？](https://zhuanlan.zhihu.com/p/148231820)\n\n## 数据库\n### Mysql\n#### Mysql - 基础\n\n- [x] [非关系型数据库和关系型数据库的区别？](/posts/27108.html)\n- [ ] 事务的四大特性了解么?\n- [x] [MySQL 事务隔离级别？默认是什么级别？](/posts/30299.html)\n- [x] [乐观锁和悲观锁了解么？](https://blog.csdn.net/SnailMann/article/details/88388829)\n- [x] [MySQL 数据库两种存储引擎的区别?](/posts/65022.html)\n\n#### Mysql - 索引\n- [ ] 为什么索引能提高查询速度?\n- [ ] 聚集索引和非聚集索引的区别？非聚集索引一定回表查询吗?\n- [ ] 索引这么多优点，为什么不对表中的每一个列创建一个索引呢？(使用索引一定能提高查询性能吗?)\n- [ ] 索引底层的数据结构了解么？Hash 索引和 B+树索引优劣分析\n- [ ] B+树做索引比红黑树好在哪里？\n- [ ] 最左前缀匹配原则了解么？\n- [ ] 什么是覆盖索引\n\n#### Mysql - 进阶\n- [ ] 一条 SQL 语句在 MySQL 中如何执行的？\n- [ ] explain 命令了解么？\n- [ ] 简单说一下 SQL 调优思路。\n- [ ] 简单说一下大表优化的思路。\n- [ ] 分库分表了解么？为什么要分库分表？有哪些常见的分库分表工具(sharding-jdbc、TSharding、MyCAT...)？\n\n### Redis\n\n- [ ] 分布式缓存常见的技术选型方案有哪些？说一下 Redis 和 Memcached 的区别和共同点\n- [ ] 说一下有缓存情况下查询数据和修改数据的流程。\n- [ ] Redis 有哪些数据结构？SDS 了解么？\n- [ ] Redis 内存满了怎么办？\n- [ ] Redis 内存淘汰算法除了 LRU 还有哪些？\n- [ ] Redis 给缓存数据设置过期时间有啥用？ Redis 是如何判断数据是否过期的呢？\n- [ ] Redis 事务了解么？(Redis 可以通过 MULTI，EXEC，DISCARD 和 WATCH 等命令来实现事务功能)\n- [ ] Redis 批量操作的方式有哪些？\n- [ ] 缓存穿透和缓存雪崩问题了解么？有哪些解决办法？\n- [ ] 如何基于 Redis 实现分布式锁？\n- [ ] 什么是 Sentinel？ 有什么用？\n- [ ] Sentinel 如何检测节点是否下线？主观下线与客观下线的区别?\n- [ ] Sentinel 是如何实现故障转移的？\n- [ ] Sentinel 如何选择出新的 master（选举机制）?\n- [ ] 如何从 Sentinel 集群中选择出 Leader ？\n- [ ] Sentinel 可以防止脑裂吗？\n- [ ] 为什么需要 Redis Cluster？解决了什么问题？有什么优势？\n- [ ] Redis Cluster 是如何分片的？\n- [ ] 为什么 Redis Cluster 的哈希槽是 16384 个?\n- [ ] 如何确定给定 key 的应该分布到哪个哈希槽中？\n- [ ] Redis Cluster 支持重新分配哈希槽吗？\n- [ ] Redis Cluster 扩容缩容期间可以提供服务吗？\n- [ ] Redis Cluster 中的节点是怎么进行通信的？  \n\n## 网络\n\n### 网络分层模型 \n- [ ] OSI 与 TCP/IP 各层的结构与功能。\n- [ ] 为什么网络要分层？\n- [ ] OSI 与 TCP/IP 各层都有哪些协议?\n\n### TCP 与 UDP \n- [ ] TCP 的三次握手与四次挥手的内容？ TCP 为什么连接是三次握手而断开是四次握手？\n- [ ] TCP 与 UDP 的区别及使用场景\n- [ ] TCP 是如何保证传输的可靠性？\n- [ ] HTTP 基于 TCP 还是 UDP？\n\n### HTTP\n- [ ] HTTP 状态码有哪些？\n- [ ] 一次完整的 HTTP 请求所经的步骤\n- [ ] HTTP 协议了解么？HTTP 是基于 TCP 还是 UDP 的？\n- [ ] HTTP 报文的内容简单说一下！ HTTP 请求报文和响应报文中有哪些数据？\n- [ ] HTTP 和 HTTPS 的区别了解么？\n- [ ] HTTP/1.0 和 HTTP/1.1 有什么区别？\n- [ ] HTTP/1.1 和 HTTP/2.0 有什么区别？\n- [ ] HTTP/2.0 和 HTTP/3.0 有什么区别？\n- [ ] HTTP 请求有哪些常见的状态码？\n- [ ] HTTP 长连接和短连接了解么？\n- [ ] Cookie 和 Session 的关系\n- [ ] URI 和 URL 的区别是什么?\n\n### PING\n- [ ] PING 命令的作用是什么？\n- [ ] PING 命令的工作原理是什么？\n\n### IP\n- [ ] IP 协议的作用是什么？\n- [ ] 什么是 IP 地址？IP 寻址如何工作？\n- [ ] IPv4 和 IPv6 有什么区别？\n\n## 操作系统\n- [ ] 进程和线程的区别\n- [ ] 进程有哪几种状态?\n- [ ] 进程间的通信方式\n- [ ] 线程间的同步的方式\n- [ ] PCB\n- [ ] 进程的调度算法\n- [ ] 什么是死锁？死锁的四个必要条件，解决死锁的方法\n- [ ] 常见的内存管理机制\n- [ ] 内存碎片\n- [ ] 分段机制和分页机制的区别和共同点\n- [ ] 分段机制和分页机制下的地址翻译过程分别是怎样的\n- [ ] 单级页表有什么问题？为什么需要多级页表？\n- [ ] TLB 有什么用？使用 TLB 之后的地址翻译流程是怎样的？\n- [ ] 页缺失，常见的页面置换算法有哪些?\n- [ ] 硬链接和软链接有什么区别？\n- [ ] 常见的磁盘调度算法有哪些？\n\n## 算法和数据结构\n\n### 算法\n- [ ] LRU 算法了解吗？你能实现一个吗？\n- [x] [写排序算法（快排、堆排）](https://blog.csdn.net/shujuelin/article/details/82423852)\n- [ ] 使用数组实现一个栈\n- [ ] 使用数组实现一个队列\n- [ ] 实现一个链表、反转链表、\n\n### 数据结构\n- [ ] 数组 vs 链表\n- [ ] 栈的应用场景\n- [ ] 队列的分类、应用场景\n- [ ] 红黑树的特点、红黑树 vs 二叉查找树\n- [ ] 哈希表、哈希表应用场景\n- [ ] 布隆过滤器了解吗？\n\n## 系统设计\n### 设计模式\n- [ ] 何为设计模式？有哪些常见的设计模式？\n- [x] [单例模式了解么？说一下单例模式的使用场景。手写一个单例模式的实现。](/posts/44263.html)\n- [ ] 观察者模式了解么？说一下观察者模式的使用场景。\n- [ ] 工厂模式了解么？说一下工厂模式的使用场景。\n- [ ] 责任链模式了解么？哪些开源项目（Netty、MyBatis ...）中用到了责任链模式？怎么用的？\n- [ ] SOLID 原则了解么？简单谈谈自己对于单一职责原则和开闭原则的理解。\n- [ ] 阅读 Spring 源码的时候什么设计模式最让你影响深刻？能简单讲讲吗？\n\n### 常见框架\n#### Spring\n- [x] [什么是 Spring 框架?](/posts/28206.html)\n- [x] [列举一些重要的 Spring 模块？](/posts/34910.html)\n- [x] [谈谈自己对于 Spring IoC 和 AOP 的理解](/posts/5393.html)\n- [x] [Spring Bean 的生命周期说一下](/posts/44604.html)\n- [x] [Spring 中的 bean 的作用域有哪些?](/posts/63647.html)\n- [x] [拦截器和过滤器了解么？](/posts/48331.html)\n- [x] [Spring 动态代理默认用哪一种](/posts/21371.html)\n- [x] [hibernate 和 mybatis 区别](/posts/64579.html)\n- [x] [Spring Boot 和 Spring 的区别](/posts/9789.html)\n- [x] [说出使用 Spring Boot 的主要优点](/posts/1453.html)\n- [x] [什么是 Spring Boot Starter?](/posts/15195.html)\n- [x] [介绍一下@SpringBootApplication 注解](/posts/59082.html)\n- [x] [Spring Boot 的自动配置是如何实现的?](/posts/6677.html)\n- [x] [Spring Boot 支持哪些嵌入式 web 容器？](/posts/24826.html)\n\n#### Netty\n- [x] [BIO,NIO 和 AIO 有啥区别？](/posts/59996.html)\n- [ ] Netty 是什么？为啥不直接用 NIO 呢?\n- [ ] 为什么要用 Netty？Netty 应用场景了解么？\n- [ ] 介绍一下 Netty 的核心组件？\n- [ ] Bootstrap 和 ServerBootstrap 了解么？\n- [ ] NioEventLoopGroup 默认的构造函数会起多少线程？\n- [ ] Netty 线程模型了解么？\n- [ ] 什么是 TCP 粘包/拆包?有什么解决办法呢？\n- [ ] Netty 长连接、心跳机制了解么？\n\n### 权限认证\n- [ ] 认证 (Authentication) 和授权 (Authorization)的区别是什么？\n- [ ] 什么是 Cookie ? Cookie 的作用是什么?如何在服务端使用 Cookie ?\n- [ ] Cookie 和 Session 有什么区别？如何使用 Session 进行身份验证？\n- [ ] 如果没有 Cookie 的话 Session 还能用吗？\n- [ ] 为什么 Cookie 无法防止 CSRF 攻击，而 token 可以？\n- [ ] 什么是 Token?什么是 JWT?如何基于 Token 进行身份验证？\n- [ ] 什么是 OAuth 2.0？\n- [ ] 什么是 SSO(单点登录)？\n\n## 分布式\n### 分布式理论\n- [ ] [CAP & BASE 理论详解](https://javaguide.cn/distributed-system/theorem&algorithm&protocol/cap&base-theorem.html) \n- [ ] [Paxos 算法详解](https://javaguide.cn/distributed-system/theorem&algorithm&protocol/paxos-algorithm.html)\n- [ ] [Raft 算法详解](https://javaguide.cn/distributed-system/theorem&algorithm&protocol/raft-algorithm.html)\n\n### RPC\n#### RPC 基础\n- [ ] 了解 RPC 吗？有哪些常见的 RPC 框架？\n- [ ] 如果让你自己设计 RPC 框架你会如何设计？\n- [ ] 服务之间的调用为啥不直接用 HTTP 而用 RPC？\n\n#### Dubbo\n- [ ] Dubbo 了解吗？\n- [ ] Dubbo 的工作原理了解么？注册中心扮演了什么角色？注册中心挂了可以继续通信吗？\n- [ ] Dubbo 的负载均衡策略了解么？\n- [ ] Dubbo 的 spi 机制了解么？带来了啥好处？\n\n### 分布式 ID\n- [ ] 何为 ID？\n- [ ] 何为分布式 ID？\n- [ ] 一个合格的分布式 ID 需要满足什么要求?\n- [ ] 分布式 ID 常见的生成方法有哪些？（数据库主键自增、数据库的号段模式、UUID、SNOWFLAKE 等等）\n\n### API 网关\n- [ ] 什么是网关？\n- [ ] 网关能提供哪些功能？\n- [ ] 有哪些常见的网关系统？\n\n### 分布式锁\n#### 基于 Redis 实现分布式锁：\n- [ ] 如何基于 Redis 实现一个最简易的分布式锁？ \n- [ ] 为什么要给锁设置一个过期时间？\n- [ ] 如何实现锁的优雅续期？\n- [ ] 如何实现可重入锁？\n- [ ] Redis 如何解决集群情况下分布式锁的可靠性？\n\n#### 基于 ZooKeeper 实现分布式锁：\n- [ ] 如何基于 ZooKeeper 实现分布式锁？\n- [ ] 为什么要用临时顺序节点？\n- [ ] 为什么要设置对前一个节点的监听？\n- [ ] 如何实现可重入锁？\n\n## 高并发\n### 消息队列\n- [ ] 为什么要用消息队列?\n- [ ] 对比一下常见的消息队列?\n- [ ] 如何保证消息不被重复消费?\n- [ ] 如何保证消息消费的顺序性?\n\n### CDN（内容分发网络）\n- [ ] 什么是 CDN ？\n- [ ] CDN 的工作原理是什么？\n\n### 读写分离和分库分表\n- [ ] 什么是读写分离？\n- [ ] 主库和从库的数据存在延迟的问题如何解决？\n- [ ] 如何实现读写分离？主从复制原理是什么？\n- [ ] 什么是分库？什么是分表？什么情况下需要分库分表？\n- [ ] 常见的分片算法有哪些？\n- [ ] 分库分表会带来什么问题呢？\n- [ ] 分库分表后，数据怎么迁移呢？\n\n## 系统设计/场景题\n- [ ] 假如有 10 亿个数，只有一个重复，内存只能放下 5 亿个数，怎么找到这个重复的数字？\n- [ ] 如何设计一个秒杀系统（服务端、数据库、分布式）？分布式系统的设计？\n- [ ] 有一个服务器专门接收大量请求，怎么设计？\n- [ ] 如果让你自己设计 RPC 框架你会如何设计？\n- [ ] 怎么快速出现一个 stackoverflow 错误？\n- [ ] 如何设计一个秒杀系统？\n- [ ] 如何设计一个微博 Feed 流/信息流系统？\n- [ ] 如何设计一个短链系统？\n\n## 项目经历\n- [ ] 说说你的项目中的亮点有哪些？\n- [ ] 项目用户人数有多少？最大在线人数多少？\n- [ ] 画一下你的项目的架构图。\n- [ ] 项目中遇到的困难有哪些？怎么解决的？\n- [ ] xx 某块的数据库表是如何设计的？\n\n## HR面\n- [ ] 个人介绍\n- [ ] 平时的兴趣爱好\n- [ ] 对我们公司的了解\n- [ ] 三个词形容自己\n- [ ] 职业规划\n- [ ] 平时的学习方式\n- [ ] 大学里做过比较有意义的事情\n- [ ] 手里还有哪些 offer\n- [ ] 选择工作的理由排序（薪资、加班情况之类的）。\n\n\n\n\n\n","categories":["面试准备"]},{"title":"Java面试复盘","url":"//62634.html","content":"\n---\n\n## 2023.06.09\n### 满阳科技（现场面）\n- 已拿offer（周一入职）\n--- \n\n## 2023.06.08\n\n### 享连信息科技 （线上）\n- 由于电信面试6点才结束（包括笔试、机试），被错过时间\n\n### 电信（现场面）\n下午 15：00 - 18:00 多结束\n- 下周才有初步结果\n\n### 大自然（外包）\n\n- 技术栈\n  - SpringCloud + Vue\n- 项目周期\n  - 短期 （2个月）\n- 工作情况\n  - 无试用期、薪资全额\n---\n\n## 2023.06.07\n### 医耕天下（外包）\n\n\n  - 技术栈\n    - SpringBoot+jsp\n  - 确认时间\n    - 大概1天，有消息会进行二面\n  - 工作地点\n    - 重庆西南医院驻场开发\n  - 原本期待\n    - 永川区域内工作\n\n面试回顾：\n- [x] Docker的容器是否可以导出: [可以的](https://jld5.cn/wenda/201909191578.html)\n- [x] SpringBoot的外置配置文件有哪几种导入方式\n  - 我只回答出一个： import 导入\n- [ ] SpringBoot的配置文件优先级最高的是那种  \n- [x] [消息队列使用如何保证消息的不丢失](https://www.cnblogs.com/cnndevelop/p/12091348.html)\n\n---\n\n## 英之豪（外包）\n\n- [x] [JDK1.8的新特性](/posts/13923.html)\n- [ ] SpringMvc的循环依赖怎么解决\n- [x] [SpringBoot的依赖注入](/posts/62919.html)\n- [x] [Autowrite和Resource区别](/posts/62919.html)\n- [x] [线程池的使用](/posts/10804.html)\n- [ ] 如何增加线程\n- [X] [Mysql的如何判断走没有走索引](https://blog.csdn.net/weixin_52690231/article/details/124925897)\n- [X] Mysql的引擎是-Innodb\n- [ ] JVM的调优\n- [x] [Redis的分布式锁如何实现的](/posts/2567.html)\n- [x] [什么是AOP、IOC](https://blog.csdn.net/weixin_43824520/article/details/108266157)\n- [ ] 分布式事务\n\n ","categories":["面试准备"],"tags":["个人相关"]},{"title":"面试复盘-网友分享-20230517","url":"//48208.html","content":"\n## 某手国际化-后端开发面经\n- [ ] [JVM的内存模型]()\n- [ ] 堆怎么管理内存\n- [ ] 垃圾回收算法\n- [ ] 跨代引用问题怎么解决\n- [ ] 每次回收都要从GC ROOTS开始吗？\n- [ ] 垃圾回收器\n- [ ] CMS回收过程\n- [ ] G1和CMS区别\n- [ ] Redis用的什么数据类型\n- [ ] Hash底层结构\n- [ ] JVM垃圾回收\n- [ ] MySQL索引模型\n- [ ] 为什么用B+树\n- [ ] 联合索引在B+树如何构造的\n- [ ] 覆盖索引知道吗？\n\n## 某康威视\n- [ ] Redis的架构\n- [ ] Reids的线程模型\n- [ ] 堆Syncchronize的理解\n- [ ] 锁升级\n\n\n## 某节\n- [ ] 进程和线程的通信方式\n- [ ] 进程和线程的区别\n- [ ] Java事项多线程的方式\n- [ ] Java的ThreadLocal\n- [ ] Volatile和锁是什么？\n- [ ] Thread中用过锁吗？\n- [ ] Volatile不保证原子性的原理？\n- [ ] Java异常体系怎么设计的？异常分类？\n- [ ] Spring框架是为了解决什么问题？IOC和AOP是什么？\n- [ ] Spring里的事务用过吗？原理？\n- [ ] 事务的传递？\n- [ ] Session和Cookie的区别？\n- [ ] 网站安全问题？\n- [ ] Session的生命周期如何管理？\n- [ ] 登录如何实现？JWT?\n- [ ] Token怎么生成？\n- [ ] MySQL的储存引擎？Innodb的特性？\n- [ ] 聚簇索引的原理？\n- [ ] 用过索引吗？联合索引？\n- [ ] 数据库的日志有哪几种？分别有什么用？\n- [ ] 数据库容灾怎么处理的？\n- [ ] 基于内存的缓存数据库如何共享？\n- [ ] Redis高性能的原因？\n- [ ] 设计模式、设计线程安全和单例的例子？\n- [ ] 冒泡和快排的平均时间复杂度和稳定性？\n- [ ] 联表有哪几种方式？\n\n\n\n\n","categories":["面试准备"]},{"title":"面试复盘-网友分享-20230513","url":"//32590.html","content":"\n## 网友面试复盘分享-20230513\n- [x] [SpringBoot 和 Spring的区别？](/posts/49304.html)\n- [x] [SpringBoot 的自动装配原理？](/posts/12723.html)\n- [x] [@ConditionalOnBean和@ConditionalOnMissingBean两个注解](/posts/5517.html)\n- [ ] [MySQL索引？]()\n- [ ] [Redis怎么使用的？结合项目说一下]()\n- [ ] Docker用过吗？\n- [ ] K8s了解吗？\n- [x] [Java多线程-线程池有哪些参数、线程池工作原理、线程池各个参数干啥的](/posts/21595.html)\n- [x] [MySQL的分库分表](/posts/42625.html)\n\n---\n\n- [x] [SpringBoot中的@SpringBootApplication注解作用是什么？](https://blog.csdn.net/weixin_45617512/article/details/107942565)\n- [x] [SpringBoot中是如何加载配置信息的？](https://blog.csdn.net/weixin_45617512/article/details/107942565)\n- [x] [RabbitMQ如何保证消息不丢失的？](https://www.cnblogs.com/cnndevelop/p/12091348.html)\n- [ ] 如果消费者消费到一般宕机了怎么办？\n- [x] [RabbitMQ如何保证消息没有被重复消费](https://blog.csdn.net/qq_43206800/article/details/114884758)？\n- [ ] [JVM运行时区域有几块？](/posts/62546.html)\n- [ ] JVM的垃圾回收算法了解吗？有哪几种？\n- [ ] JVM是怎么判断一个一个对象是否可以被回收了?\n- [ ] 为什么HotShot虚拟机最终选择了可达性分析而没有选择引用计数法？\n- [ ] 哪你说说那些对象可以作为可达性分析中的GC ROOT？\n- [x] [Linux中查询一个进程的进程号？](https://www.cnblogs.com/mohou/p/15917845.html)\n- [ ] Linux怎么查看正在运行Java程序的日志？\n- [x] [Linux怎么修改文件权限？](https://blog.csdn.net/qq_28114615/article/details/89173550)\n- [x] [一个7就可以代表读写执行权限，为什么有3个7？](https://zhuanlan.zhihu.com/p/23891592)\n\n---\n- [x] [Linux如何查看进程id](https://blog.csdn.net/apple198942/article/details/116156022)\n- [x] [如何查看固定端口的java进程](https://www.cnblogs.com/mohou/p/15917845.html)\n- [x] [kill -9 是啥意思](https://blog.csdn.net/qq_37450814/article/details/114695322)\n- [ ] grep | 是啥？\n- [ ] docker一些命令？\n- [ ] Mysq的索引优化场景\n- [x] [最左匹配问题](https://blog.csdn.net/yuanchangliang/article/details/107798724)\n- [x] [MVCC的详细介绍](https://juejin.cn/post/7016165148020703246)\n- [x] [数据库事务](/posts/51105.html)\n- [x] [MySQL的那几个事务级别](/posts/32391.html)\n- [x] [脏读是啥](/posts/32391.html)\n- [x] [幻读是啥](/posts/32391.html)\n- [x] 为什么不使用串行化\n- [ ] 怎么解决行锁、间隙锁\n- [x] [单例模式用法](/posts/44263.html)\n- [ ] 工厂、抽象模式具体场景","categories":["面试准备"]},{"title":"面试复盘-网友分享-20230508","url":"//10254.html","content":"\n## 网友面试复盘分享\n- [x] [自我介绍](/posts/40232.html)\n- [x] [SpringBoot对Spring框架有什么优势?](/posts/49304.html)\n- [x] [Spring的两大特点是什么?](/posts/50574.html)\n- [x] [常见的SQL优化](/posts/5829.html)\n- [x] [Mysql的引擎](/posts/56579.html)\n- [ ] [我一个亿的订单数据，我要去怎么去设计这个表?](/posts/28159.html)\n- [x] [分库分表了解吗?](/posts/42625.html)\n- [x] [redis的数据结构您知道都有哪些?](/posts/13537.html)\n- [x] [redis是线程安全的吗?](/posts/9984.html)\n- [ ] 什么面向对象?\n- [x] [对集合有了解吗?](/posts/23720.html)\n- [x] [Arraylist和Linklist有啥区别?](/posts/23720.html)\n- [x] [Arraylist是线程安全的吗?](/posts/23720.html)\n- [ ] hashmap原理讲一下吗?\n- [ ] hashmap是线程安全吗?\n- [ ] 指针碰撞或者哈希冲突知道吗?\n- [x] [==号和equal的区别?](/posts/33636.html)\n- [x] [成员变量和局部变量有什么区别?](/posts/33408.html)\n- [x] [java中是引用传递还是值传递?](/posts/7068.html)\n- [x] [静态变量用什么修饰呢? 有什么作用?](/posts/39404.html)\n- [x] [StringBuffer和StringBuild有啥区别?](/posts/21142.html)\n- [x] [java中的常见的异常有哪些?](/posts/60744.html)\n- [ ] 线程的生命周期您了解吗?\n- [ ] 常见的线程池有了解过吗?\n- [ ] 使用线程池过程中需要try catch吗?\n- [x] [你会在finally里面去做资源释放吗?](/posts/45288.html)\n- [ ] 成员变量\\局部变量\\静态变量他们在线程安全上的区别?\n\n\n## 自我列举\n- [x] [强制使SQL执行索引](/posts/31049.html)\n- [x] [redis的常用数据结构及使用场景](/posts/31486.html)\n","categories":["面试准备"]},{"title":"Google浏览器插件自用记录","url":"//38434.html","content":"\n\n## AdGuard 广告拦截器\n\n## Axure RP Extension for Chrome\n> Axure RP 9 导出Html在浏览器预览需要安装此插件\n\n## FeHelper(前端助手)\n\n## Supreme Super copy超级复制\n> 解除页面不允许复制限制\n\n## 倍速 加速器\n> 加速视频学习课程进度（DX网上大学视频课`1.25`倍可用）\n\n## 图片助手(ImageAssistant) 批量图片下载器\n\n## 篡改猴\n> 安装相关脚本优化相关页面展示效果","categories":["技术博客"]},{"title":"VM虚拟机中对Rocky系统固定IP地址","url":"//10810.html","content":"\n\n## Linux-Rocky 8.x 网络设置\n[Linux-Rocky 8.x 网络设置](https://www.jianshu.com/p/fe88c14d23f6)\n\n获取网关配置信息:\n```\nnslookup www.baidu.com\n```\n命令输出结果：\n```\n[root@localhost mumu]# nslookup www.baidu.com\nServer:\t\t192.168.226.2\nAddress:\t192.168.226.2#53\n\nNon-authoritative answer:\nwww.baidu.com\tcanonical name = www.a.shifen.com.\nName:\twww.a.shifen.com\nAddress: 183.2.172.185\nName:\twww.a.shifen.com\nAddress: 183.2.172.42\nName:\twww.a.shifen.com\nAddress: 240e:ff:e020:966:0:ff:b042:f296\nName:\twww.a.shifen.com\nAddress: 240e:ff:e020:9ae:0:ff:b014:8e8b\n```\n\n编辑网卡配置信息：\n```\nvi /etc/sysconfig/network-scripts/网卡信息\n```\n\n修改后配置文件：\n```\nTYPE=Ethernet\nPROXY_METHOD=none\nBROWSER_ONLY=no\n# 变更 静态ip 配置\n#BOOTPROTO=dhcp\nBOOTPROTO=static\nDEFROUTE=yes\nIPV4_FAILURE_FATAL=no\nIPV6INIT=yes\nIPV6_AUTOCONF=yes\nIPV6_DEFROUTE=yes\nIPV6_FAILURE_FATAL=no\nIPV6_ADDR_GEN_MODE=eui64\nNAME=ens33\nUUID=0d675cd8-b7ca-49d0-be96-d221cd7a1f43\nDEVICE=ens33\nONBOOT=yes\n\n# 新增配置\nIPADDR=192.168.226.154\nDNS1=192.168.226.2\nNETMASK=255.255.255.0\nGATEWAY=192.168.226.2\n```\n\n使用 nmcli 重新加载网络配置\n> Rocky 使用此命令\n```\nnmcli c reload\n```\n\n## Linux-Rocky 9.x 网络设置\n[Rocky Linux 9.3 下载安装及配置静态IP地址](https://blog.csdn.net/qq_62533306/article/details/136349137)\n\n\n## 补充内容\n[linux里的bootproto的none,static,dhcp有什么区别](https://blog.csdn.net/weixin_41374755/article/details/106150834)","categories":["技术博客"]},{"title":"ICMPtimestamp请求响应漏洞处理(CVE-1999-0524)","url":"//12224.html","content":"\n> 参考博客：[ICMP timestamp请求响应漏洞处理(CVE-1999-0524)](https://blog.csdn.net/ximenjianxue/article/details/123114342)\n\n\n## Iptables\n\n```\nvi /etc/sysconfig/iptables\n```\n\n```\n-A INPUT -p icmp -m icmp --icmp-type timestamp-request -j DROP\n-A OUTPUT -p icmp -m icmp --icmp-type timestamp-reply -j DROP\n```\n\n重启防火墙\n```\nservice iptables restart\n```\n\n## Firewalld\n\n\n\n添加防火墙规则\n```\nfirewall-cmd --permanent --zone=public --add-icmp-block=timestamp-reply\nfirewall-cmd --permanent --zone=public --add-icmp-block=timestamp-request\nfirewall-cmd --reload\n```\n   \n","categories":["技术博客"]},{"title":"允许Traceroute探测漏洞处理","url":"//57813.html","content":"\n\n> 参考博客-Firewalld：[允许Traceroute探测漏洞解决方法](https://blog.csdn.net/hryzxjh/article/details/130572697)\n>\n> 参考博客-iptables：[允许Traceroute探测](https://blog.csdn.net/weixin_45760327/article/details/121207276)\n>\n>[漏洞解决](https://blog.csdn.net/tktttt/article/details/112048829)\n\n\n\n## 关闭Traceroute探测的方法\n\n### Firewalld防火墙\n\n```\nfirewall-cmd --permanent --direct --add-rule ipv4 filter OUTPUT 0 -p ICMP --icmp-type 0 -m comment --comment \"deny traceroute\" -j DROP\n```\n\n```\nfirewall-cmd --permanent --direct --add-rule ipv4 filter OUTPUT 0 -p ICMP --icmp-type 3 -m comment --comment \"deny traceroute\" -j DROP\n```\n\n```\nfirewall-cmd --permanent --direct --add-rule ipv4 filter OUTPUT 0 -p ICMP --icmp-type 11 -m comment --comment \"deny traceroute\" -j DROP\n```\n\n防火墙重新载入\n```\nfirewall-cmd --reload\n```\n\n查看防火墙规则\n```\nfirewall-cmd --direct --get-all-rules\n```\n\n### Iptables\n\n添加防火墙规则\n\n#### 重启失效\n```\niptables -A INPUT -p ICMP --icmp-type time-exceeded -j DROP\n```\n\n```\niptables -A OUTPUT -p ICMP --icmp-type time-exceeded -j DROP\n```\n\n保存规则\n```\nservice iptables save\n```\n\n#### 永久生效\nvi /etc/sysconfig/iptables\n```\n-A INPUT -p icmp -m icmp --icmp-type timestamp-request -j DROP\n-A OUTPUT -p icmp -m icmp --icmp-type timestamp-reply -j DROP\n```\n\n重启防火墙\n```\nservice iptables restart\n```\n\n检查新添加的规则是否有效\n```\niptables -L -n\n```","categories":["技术博客"]},{"title":"JavaScript新特性","url":"//35240.html","content":"\n\n# 关键字 const\n> 常量是一个不能被修改的变量。\n\n变量可以被重写\n![](./JavaScript%E6%96%B0%E7%89%B9%E6%80%A7/1691932679721.jpg)\n\n常量重写会报错\n![](./JavaScript%E6%96%B0%E7%89%B9%E6%80%A7/WX20230813-211839%402x.png)\n\n\n# 关键字 let\nJavaScript使用一对花括号表示代码块，花括号限定变量的作用域。\n但是如果变量是在`if/else`语句块中创建的，那么变量的作用域不会受到该代码块的限制。\n\n> 备注：花括号不能限制变量作用域范围的另外一个地方是在循环体中\n\n![](./JavaScript%E6%96%B0%E7%89%B9%E6%80%A7/WX20230813-212720%402x.png)\n\n**if语句块中的变量topic重制了全局变量topic的值**\n\n通过使用`let`关键字，将变量的作用域限定在任意代码块中。\n<font  color='red'>使用let关键字可以确保全局变量的值不受干扰。</font>\n\n![](./JavaScript%E6%96%B0%E7%89%B9%E6%80%A7/WX20230813-213211%402x.png)\n\n\n# 模板字符串\nJavaScript的任意返回值都可以被添加到模板字符串的`${ }`的内部。\n\n![](./JavaScript%E6%96%B0%E7%89%B9%E6%80%A7/WX20230813-213817%402x.png)\n\n\n# 默认参数\nES6中添加了对默认参数的支持，如果事件调用过程没有提供参数，系统将使用默认参数值。\n> 默认参数并不局限于字符串，可以是任意类型。\n\n![](./JavaScript%E6%96%B0%E7%89%B9%E6%80%A7/WX20230813-214302%402x.png)\n\n# 箭头函数\nES6中的箭头函数是非常有用的特性，用户在不使用`function`关键字的情况下创建一个函数，并且用户通常还不需要使用`return`关键字。\n\n普通函数\n```\nvar lordify = function (firstname){\n  return `${firstname} of Canterbury`;\n}\nconsole.log(lordify(\"Dale\")); \nconsole.log(lordify(\"Daryle\")); \n```\n\n箭头函数\n```\nvar lordifyV2 = firstname => `${firstname} of Canterbury`\nconsole.log(lordifyV2(\"Dale\")); \nconsole.log(lordifyV2(\"Daryle\")); \n```\n\n![](./JavaScript%E6%96%B0%E7%89%B9%E6%80%A7/WX20230813-214929%402x.png)\n\n\n> 备注：使用`箭头函数`创建方法，如果包含一个以上参数时，函数两边的圆括号是必不可少的。\n\n# ES6转译\n并不是所有的浏览器都支持ES6，甚至有些根本不支持该规范。确保用户根据ES6规范编写的代码能正常工作的唯一办法是，在浏览器运行这些代码之前将它们转译符合ES5规范的代码。这个过程称为`转译`。`Babel`是当前最流行的转译工具之一。\n\n\n\n# ES6的对象和数组\n## 解构赋值\n解构赋值允许用户将某个对象内的字段作用域本地化，摒弃可以声明那些值是将要使用的。\n\n例如对象sandwich，包含4个字断，我们只想使用其中两个字段段值。将其中`bread`和`meat`属性的作用域本地化。\n```\nvar sandwich = {\n  bread: \"dutch crunch\",\n  meat: \"tuna\",\n  cheese: \"swiss\",\n  toppings: [\"lettuce\",\"tomato\",\"mustartd\"]\n}\nvar {bread,meat} = sandwich;\nconsole.log(bread,meat); // dutch crunch tuna\n```\n\n![](./JavaScript%E6%96%B0%E7%89%B9%E6%80%A7/WX20230813-220335%402x.png)\n\n解构传入的函数参数\n```\nvar lordify = rgularPerson =>{\n  console.log(`${regularPerson.firstname} of Canterbury`);\n}\nvar regularPerson = {\n  firstname: \"Bill\",\n  lastname: \"Wilson\"\n}\n\nlordify(regularPerson);\n```\n\n\n在对象之外解构我们需要使用的值\n```\nvar lordify = ({firstname})=>{\n  console.log(`${firstname} of Canterbury`);\n}\nlordify(regularPerson);\n```\n![](./JavaScript%E6%96%B0%E7%89%B9%E6%80%A7/WX20230813-222330%402x.png)\n\n\n> 这里的`({firstname})` == `var {firstname} = regularPerson`,【解构赋值】知识点。\n\n\n# 对象语意增强\n\n通过语意增强，从全局作用域获取变量并将它转换为一个对象。\n```\nvar name = \"Tallc\";\nvar elevation = 9378;\nvar funHike = {name,elevation};\nconsole.log(funHike);\n```","categories":["教程集合"],"tags":["React"]},{"title":"JavaGuide面试突击版-学习-0507-Java集合","url":"//23720.html","content":"\n## List, Set, Queue, Map 四者的区别\n\n| 集合        |              | 是否顺序      | 是否重复 |\n| ----------- | -----------  | ----------- | ----------- |\n| List        |              |有序          |可\n| Set         |              |无序          |不可\n| Queue       |              |有序(按特定规则实现顺序)|可\n| Map         |     key      |无序          |不可重复\n| Map         |     value    |无序          |可\n\n---\n\n## 集合框架底层数据结构总结\n\n+++ **点击展开/隐藏**\n\n### List\n- ArrayList: Object[] 数组\n- Vector: Object数组\n- LinkedList: 双向链表(Jdk1.6之前循环链表,Jdk1.7取消了循环)\n\n### Set\n- HashSet(无序,唯一): 基于HashMap实现,底层采用HashMap保存元素\n- LinkedHashSet(有序,唯一): 是HashSet的子类,内部通过LinkedHashMap实现\n- TreeSet(有序,唯一): 红黑树(自平衡的排序二叉树)\n\n### Queue\n- PriorityQueue: Objecet实现二叉堆\n- ArrayQueue: Object数组 + 双指针\n\n### Map\n- HashMap:\n  - Jdk1.8之前: 数组+链表, 数组是主体,链表是为了解决哈希冲突(拉链法)\n  - Jdk1.8以后: 链表长度大于阈值(默认8),将链表转换红黑树以减少搜索时间\n- LinkedHashMap: 继承HashMap,在基础结构之上增加双向链表,保持键值对的插入顺序\n- HashTable: 数组+链表, 数组是主体,链表是为了解决哈希冲突\n- TreeMap: 红黑树(自平衡的二叉树)\n\n+++\n\n---\n\n## ArrayList 和 Vector 的区别\n- `ArrayList`是`List`的主要实现类,底层使用`Object[]`数组,适用于频繁的查找工作,`线程不安全`.\n- `Vector`是`List`的古老实现类,底层使用`Object[]`数组,`线程安全的`.\n\n---\n\n## ArrayList 与 LinkedList 区别\n\n+++ **点击展开/隐藏**\n\n- 线程是否安全: `ArrayList`和`LinkedList`都是不同步的,不保证线程安全.\n- 底层数据结构: `ArrayList`底层是`Object[]`数组,`LinkedList`底层使用的是`双向链表`(Jdk1.6为循环链表,Jdk1.7之后取消了循环)\n- 插入\\删除是否受元素位置影响: \n  - ArrayList采用数组储存,插入和删除元素的时间复杂度受元素位置的影响.\n    - 追加列表末尾: 时间复杂度O(~1~)\n    - 指定位置`i`插入/删除元素: 时间复杂度 O(~n-1~)\n  - `LinkedList` 采用链表储存\n    - 头尾插入/删除: 不受元素位置影响\n    - 指定位置`i`插入/删除元素: 时间复杂度 O(~n~)\n- 快速随机访问 (通过序号快速获取元素对象`get( int index )` ): \n  - ArrayList 支持\n  - LinkedList 不支持\n- 内存占用:\n  - ArrayList: 内存占用主要体现在list列表的结尾会预留一定的空间\n  - LinkedList: 每一个元素都要消耗比ArrayList更多的空间\n\n### 补充内容:\n\n#### 双向链表\n\n![](./JavaGuide面试突击版-学习-0507-Java集合/Snipaste_2023-05-07_14-13-28.jpg)\n\n#### 双向循环链表\n\n![](./JavaGuide面试突击版-学习-0507-Java集合/Snipaste_2023-05-07_14-13-44.jpg)\n\n+++\n\n---\n\n## [ArrayList 的扩容机制](https://javaguide.cn/java/collection/arraylist-source-code.html#%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%88%86%E6%9E%90-arraylist-%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6)\n\n---\n\n## ⽐较 HashSet、LinkedHashSet 和 TreeSet 三者的异同\n\n<table>\n    <tr>\n        <td>接口实现类</td> \n        <td>集合</td> \n        <td>顺序</td> \n        <td>元素重复</td> \n        <td>线程安全</td> \n        <td>数据结构</td> \n        <td>应用场景</td> \n   </tr>\n    <tr>\n         <td  rowspan=\"3\">Set</td>    \n  \t\t   <td>HashSet</td> \n      \t <td > 无序 </td> \n         <td rowspan=\"3\">元素唯一</td> \n         <td rowspan=\"3\">不安全</td> \n         <td>哈希表（基于 HashMap 实现）</td> \n         <td>不需要保证元素插⼊和取出顺序的场景</td>         \n    </tr>\n    <tr>\n        <td>LinkedHashSet</td>       \t \n        <td > 有序 </td> \n         <td>链表和哈希表( 满足FIFO)</td>  \n         <td>于保证元素的插⼊和取出顺序满⾜ FIFO 的场景</td>           \n    </tr>\n    <tr>\n        <td>TreeSet</td> \n      \t <td> 有序(支持⾃然排序和定制排序) </td>          \n         <td>红黑树</td>         \n         <td>⽤于⽀持对元素⾃定义排序规则的场景</td>   \n    </tr>\n    \n</table>\n\n---\n\n## Queue 与 Deque 的区别\n\n略过\n\n---\n## HashMap和HashTable区别\n\n[HashMap和Hashtable的区别？HashMap和HashSet区别？HashMap和TreeMap区别？](/posts/3318.html)\n\n---\n\n// todo\n\n\n\n\n\n\n\n","categories":["整理归纳"],"tags":["Java集合"]},{"title":"JavaGuide面试突击版-学习-0506-Java基础","url":"//40038.html","content":"\n## JVM&JDK&JRE\n\n### JVM\nJava 虚拟机（JVM）是运⾏ Java 字节码的虚拟机。JVM 有针对不同系统的特定实现（Windows，Linux，macOS），⽬的是使⽤相同的字节码，它们都会给出相同的结果。字节码和不同系统的JVM 实现是 Java 语⾔“⼀次编译，随处可以运⾏”的关键所在。\n\n==**JVM** 并不是只有⼀种！只要满⾜ JVM 规范，每个公司、组织或者个⼈都可以开发⾃⼰的专属JVM。==\n\n### JDK和JRE\n`JDK 是 Java Development Kit 缩写，它是功能⻬全的 Java SDK。`它拥有 JRE 所拥有的⼀切，还有编译器（javac）和⼯具（如 javadoc 和 jdb）。它能够创建和编译程序。\n\n`JRE 是 Java 运⾏时环境`。它是运⾏已编译 Java 程序所需的所有内容的集合，包括 Java 虚拟机（JVM），Java 类库，java 命令和其他的⼀些基础构件。但是，它==不能⽤于创建新程序==。\n\n## 字节码\n`JVM` 可以理解的代码就叫做`字节码`（即扩展名为 .class 的⽂件），它不⾯向任何特定的处理器，只⾯向虚拟机。\n\nJava 语⾔通过字节码的⽅式，在⼀定程度上解决了传统解释型语⾔执⾏效率低的问题，同时⼜保留了解释型语⾔可移植的特点。\n\n字节码并不针对⼀种特定的机器，因此，Java 程序⽆须重新编译便可在多种不同操作系统的计算机上运⾏。\n\n### Java 是编译与解释共存的语⾔?\n\nJava程序从代码到运行: \n`.java -> javac编译 -> .class -> 解释器&JIT (编译器) -> 机器码 -> 运行`\n\n `JIT` 属于运⾏时编译。当 `JIT` 编译器完成第⼀次编译后，其会将字节码对应的机器码保存下来，下次可以直接使⽤。机器码的运⾏效率肯定是⾼于 Java 解释器的。\n\n > `JDK 9` 引⼊了⼀种新的编译模式 `AOT`(Ahead of Time Compilation)，它是直接将字节码编译成机器码，这样就避免了 JIT 预热等各⽅⾯的开销。\n\n\n## [Java中的几种基本数据类型是什么？对应的包装类型是什么？各自占用多少字节呢？](/posts/59036.html)\n\n\n## 自增自减运算符\n```\n\nint a=0,b=1;\n\na = b++;\na = ++b;\n\n```\n==符号在前先加减;符号在后后加减==\n\n## 字符型常量和字符串常量的区别\n\n- 形式:\n  - 字符型常量: 单引号引起的⼀个字符\n  - 字符串常量: 双引号引起的 0 个或若⼲个字符\n- 含义:\n  - 字符型常量: ⼀个整型值( ASCII 值),可以参加表达式运算\n  - 字符串常量: ⼀个地址值(该字符串在内存中存放位置)\n- 内存:\n  - 字符型常量: 只占 2 个字节\n  - 字符串常量: 占若⼲个字节\n\n\n## 静态方法与实例方法区别?\n\n**1.调用方式:**\n\n**静态方法:**\n类名.方法名 / 对象.方法名\n\n**实例方法:**\n对象.方法名\n\n总结: ==**调⽤静态⽅法可以⽆需创建对象**==\n\n**2.访问类成员是否存在限制**\n\n**静态方法:**\n只允许访问`静态成员变量`和`静态方法`\n\n**实例方法:**\n没有限制\n\n## 重载和重写的区别?\n\n### 重载\n发生在同一个类中(或父类与之类之间),**方法名必须相同**,参数类型\\个数\\顺序不同,方法返回值和修饰符可以不同.\n\n==**重载**就是同⼀个类中多个同名⽅法根据不同的传参来执⾏不同的逻辑处理==\n\n\n### 重写\n\n[**⽅法的重写要遵循\"两同两⼩⼀⼤\"**](https://github.com/Snailclimb/JavaGuide/issues/892)\n- 必须相同\n  - 方法名\n  - 参数列表\n- 小于等于\n  - 子类方法返回值比父类方法返回值\n  - 抛出异常范围\n- 大于等于\n  - 访问修饰符\n\n\n**不能重写情况**\n- 父类方法修饰符`private\\final\\static`,但是通过`static`修饰的方法可以再次声明![](./JavaGuide面试突击版-学习-0506/Snipaste_2023-05-06_10-23-38.jpg \"截图来源: https://blog.csdn.net/YoaMy/article/details/51275388\")\n- 构造方法不能重写\n \n ==重写就是⼦类对⽗类⽅法的重新改造，外部样⼦不能改变，内部逻辑可以改变==\n\n### ⭐重写的返回值类型\n- 引用类型\n  - 可以返回引用类型的子类\n- void和基本数据类型\n  - ==**返回值重写时不可修改**==\n\n\n## 可变⻓参数\n> 可变长参数只能作为方法的最后一个参数,前面也可以没有任何参数!\n\n\n```\npublic static void method1( String ... args ){\n    // ...\n}\n\npublic static void method2( String a , String ... args ){\n    // ...\n}\n```\n\n**遇到⽅法重载的情况怎么办呢？**\n\n优先匹配固定参数的⽅法，因为固定参数的⽅法匹配度更⾼\n\n\n## 基本类型和包装类型的区别\n- 成员变量包装类型不赋值就是null,而基本类型有默认值且不是null\n- 包装类型可以用于泛型,而基本类型不可以\n- 相比对象类型,基本数据类型占用空间小\n- 存放位置\n  - 基础类型\n    - `局部变量`存在Java虚拟机的`栈`\n    - `成员变量`存在Java虚拟机的`堆`\n  - 包装类型\n    - 存在Java虚拟机的`堆` (包装类型属于对象类型)\n\n### 补充内容\n**三区介绍截图:**\n![](./JavaGuide面试突击版-学习-0506/Snipaste_2023-05-06_13-22-21.jpg \"截图来源: https://blog.csdn.net/YXXXYX/article/details/120126269\")\n\n基本介绍:\n> 成员变量是在  `类`  中定义的变量\n> \n> 局部变量是在  `方法`  中定义的变量\n> \n\n## 包装类的缓存机制\n\nByte\\Short\\Integer\\Long 包装类型默认数字[-128,127]相应类型缓存数据;\n\nCharacter 创建[0,127]范围的缓存数据;\n\nBoolean 直接返回`True`或`False`;\n\nFloat和Double 没有实现缓存机制;\n\n### Integer 源码\n```\npublic static Integer valueOf(int i) {\n    if (i >= IntegerCache.low && i <= IntegerCache.high)\n        return IntegerCache.cache[i + (-IntegerCache.low)];\n    return new Integer(i);\n}\n\nprivate static class IntegerCache {\n    static final int low = -128;\n    static final int high;\n    static {\n     // high value may be configured by property\n        int h = 127;\n    }\n}\n```\n\n问题-输出结果True还是False :\n```\nInteger i1 = 40;\nInteger i2 = new Integer(40);\nSystem.out.println(i1==i2);\n```\n\n结果是: False\n\n> `Integer i1 = 40`发生装箱,代码等价于` Integer i1 = Integer.valueOf(40) `, `i1` 使用的是缓存,而`Integer i2 = new Integer(40)`创建了一个新对象.\n\n#### 装箱拆箱何时发生\n> [Java中的装箱和拆箱—这一篇全了解](https://blog.csdn.net/w372426096/article/details/81909792)\n\n```\nInteger i = 10;  //装箱: 自动根据数值创建对应的 Integer对象，这就是装箱\nint n = i;   //拆箱: 自动将包装器类型转换为基本数据类型\n```\n\n==所有整型包装类对象之间值的⽐较，全部使⽤ equals ⽅法⽐较==\n\n![](./JavaGuide面试突击版-学习-0506/Snipaste_2023-05-06_13-43-09.jpg)\n\n\n## ⼀个类没有声明构造⽅法，该程序是否能正确\n\n答: ⼀个类没有声明构造⽅法，也可以执⾏\n\n> 一个类即使没有声明构造方法也会有默认的不带参数的构造方法.\n>\n> 如果重载了有参的构造方法,需要把无参的构造方法写出来,无论是否用到,因为一旦添加自己的构造方法,Java就不会在默认添加无参的构造方法.\n\n## 构造方法特点,是否可以Override\n构造方法特点:\n- 名字与类名相同\n- 没有返回值,不能使用void声明构造方法\n- 生成类的对象自动执行\n\n构造方法不能override(重写),但是可以overload(重载).\n\n## 面向对象的三大特征\n- 封装\n- 继承\n- 多态\n\n## 接口和抽象类的共同特点及区别\n\n### 共同特点\n- 不能实例化\n- 可以包含抽象方法\n- 可以默认实现方法(jdk8 之后可以用`default`关键字定义默认方法)\n\n### 区别\n- 接口用作对类行为的约束,实现了某个接口具有对应的行为;抽象类主要用户代码复用,强调所属关系.\n- 一个类只能继承一个类,但可以实现多个接口\n- 接口中的成员变量只能`public static final`类型的,不能修改且必须有初始值;抽象类中成员变量默认`default`,可在子类中重新定义,也可以重新赋值.\n\n## 引用拷贝和浅拷贝区别\n> [深拷贝和浅拷贝区别了解吗？什么是引用拷贝？·](/posts/30985.html)\n\n![](./JavaGuide面试突击版-学习-0506/Snipaste_2023-05-06_14-13-50.jpg)\n\n## == 和 equals() 区别\n> [==与equals?hashCode与equals?](/posts/33636.html)","categories":["整理归纳"],"tags":["Java基础"]},{"title":"JavaGuide面试突击版-学习-0507-Java基础","url":"//23719.html","content":"\n\n---\n\n##  [String ,StringBuffer ,StringBuilder的区别?](/posts/21142.html)\n\n---\n\n## 字符串拼接用`+`还是`StringBuilder`\n\n\n\n [查看.class文件的字节码](/posts/51115.html)\n > 示例截图: 用的就是 `+` 拼接字符串示例\n\n 字符串对象通过`+`的字符串拼接⽅式，实际上是通过`StringBuilder`调⽤`append()`⽅法实现的，拼接完成之后调⽤`toString()`得到⼀个 `String`对象 。 \n\n\n **注意事项 :** \n 在循环内使⽤`+`进⾏字符串的拼接的话，存在比较明显的缺陷：编译器不会创建单个 `StringBuilder` 以复⽤，会导致创建过多的 `StringBuilder`对象。\n\n---\n\n## String#equals() 和 Object#equals() 有何区别\n\nString : 比较的是值是否相等;\nObject : 比较的是对象的内存地址是否相等;\n\n---\n\n## 字符串常量池的作⽤\n\n**字符串常量池** 是 `JVM` 为了提升性能和减少内存消耗针对字符串（String 类）专⻔开辟的⼀块区域，主要⽬的是为了`避免字符串的重复创建`\n\n![](./JavaGuide面试突击版-学习-0507/Snipaste_2023-05-07_09-16-50.jpg)\n\n--- \n\n## 创建了⼏个字符串对象? `String s1 = new String(\"abc\");` \n\n> [String s1 = new String(“abc”) 这段代码创建了几个字符串对象？](/posts/10949.html)\n\n---\n\n## `String`类型的变量和常量做`+`运算时发生了什么?\n\n+++ **点击展开/隐藏**\n\n\n\n### 字符串不加`final`关键字拼接的情况\n```\nString str1 = \"str\"; //编译器确定常量字符串,jvm将其加入`字符串常量池`\nString str2 = \"ing\"; //编译器确定常量字符串,jvm将其加入`字符串常量池`\nString str3 = \"str\" + \"ing\"; //常量折叠: String str3 = \"string\"\nString str4 = str1 + str2; //引用的值在编译器无法确定,jvm无法将其优化\nString str5 = \"string\";\nSystem.out.println(str3 == str4);//false\nSystem.out.println(str3 == str5);//true\nSystem.out.println(str4 == str5);//false\n```\n\n**编译器的优化:**\n1. `编译期`可以确定的值的字符串,也就是`常量字符串`,`jvm`会将其存入`字符串常量池`.\n2. `字符串常量`拼接可以得到的`字符串常量`在`编译阶段`就`已经`被存放`字符串常量池`.\n\n编译器优化: **常量折叠**\n> 常量折叠会把常量表达式的值求出来作为常量嵌在最终⽣成的代码中，这是 Javac 编译器会对源代码做的极少量优化措施之⼀(代码优化⼏乎都在即时编译器中进⾏)。\n>\n> 例如: 对于 String str3 = \"str\" + \"ing\"; 编译器会给你优化成 String str3 = \"string\";\n\n常量折叠的条件:\n- `final`修饰 / 无`final`修饰的基本数据类型(byte,short,int,long,double,float,chat,boolean)及字符串常量\n- 运算关系\n  - 字符串通过`+`拼接得到的字符串\n  - 基本数据类型之间的算数运算(加减乘除),位运算(<<,>>,>>>)  \n\n#### 引⽤的值在程序编译期是⽆法确定的，编译器⽆法对其进⾏优化\n对象引⽤和“+”的字符串拼接⽅式，实际上是通过 StringBuilder 调⽤ append() ⽅法实现的，拼接完成之后调⽤ toString() 得到⼀个 String 对象\n```\nString str4 = new StringBuilder().append(str1).append(str2).toString();\n```\n### 声明`final`关键字之后,可以让编译器当作常量处理\n```\nfinal String str1 = \"str\";\nfinal String str2 = \"ing\";\n// 下⾯两个表达式其实是等价的\nString c = \"str\" + \"ing\";// 常量池中的对象\nString d = str1 + str2; // 常量池中的对象\nSystem.out.println(c == d);// true\n```\n被 final 关键字修改之后的 String 会被编译器当做常量来处理，编译器在程序编译期就可以确定它的值，其效果就相当于访问常量。\n\n**截图参考**\n![](./JavaGuide面试突击版-学习-0507-Java基础/Snipaste_2023-05-08_07-18-41.jpg)\n\n没有`final`关键字修饰的字符串,字节码中通过`StringBuilder`拼接(属于新的对象,`==`用来比较`引用类型`是比较的内存地址是否相等)\n![](./JavaGuide面试突击版-学习-0507-Java基础/Snipaste_2023-05-08_07-23-31.jpg)\n\n#### 编译器在运⾏时才能知道其确切值的话，就⽆法对其优化\n```\nfinal String str1 = \"str\";\nfinal String str2 = getStr();\nString c = \"str\" + \"ing\";// 常量池中的对象\nString d = str1 + str2; // 在堆上创建的新的对象\nSystem.out.println(c == d);// false\npublic static String getStr() {\nreturn \"ing\";\n}\n```\n\n+++\n\n---\n\n## [Exception 和 Error 有什么区别？](/posts/60744.html)\n\n---\n\n## `try-catch-finally` 的使⽤\n\n**注意事项:**\n\n不要在`finally`语句块中使用`return`!\n> 当 try 语句和 finally 语句中都有 return 语句时，try 语句\n块中的 return 语句会被忽略。这是因为 try 语句中的 return 返回值会先被暂存在⼀个本地变量中，当执⾏到 finally 语句中的 return 之后，这个本地变量的值就变为了 finally 语句中的 return 返回值。\n\n代码示例:\n```\npublic static void main(String[] args) {\n    System.out.println(f(2));\n}\n\npublic static int f(int value) {\n    try {\n        return value * value;\n    } finally {\n        if (value == 2) {\n            return 0;\n        }\n    }\n}\n```\n\n输出:\n```\n0\n```\n\n### finally 中的代码是否⼀定会执⾏\n\n==不⼀定的！==\n\n不会执行`finally`中的代码情况如下:\n-  `finally` 之前虚拟机被终⽌运⾏的话\n-  程序所在线程死亡\n-  关闭CPU\n\n\n### try-catch-finally关闭资源?\n> [try-catch-finally关闭资源?](/posts/45288.html)\n\n --- \n\n\n\n## 什么是SPI\nSPI 即 Service Provider Interface ，字⾯意思就是: `服务提供者的接⼝`\n\n### API 和 API 的区别\n![](./JavaGuide面试突击版-学习-0507/Snipaste_2023-05-07_11-03-24.jpg)\n\n![](./JavaGuide面试突击版-学习-0507/Snipaste_2023-05-07_11-03-38.jpg)\n\nSPI : 由接口调用方确定规则,不同的接口实现方去根据这个接口进行实现,从而提供方服务.\n\n![](./JavaGuide面试突击版-学习-0507/Snipaste_2023-05-07_11-10-09.jpg)\n\n### SPI 的优缺点\n\n- 需要遍历加载所有的实现类，不能做到按需加载，这样效率还是相对᫾低的\n- 当多个 `ServiceLoader` 同时 `load` 时，会有并发问题\n\n\n## 什么是序列化?什么是反序列化?\n\n**序列化:** 将数据结构或对象转换成⼆进制字节流的过程\n**反序列化:** 将在序列化过程中所⽣成的⼆进制字节流转换成数据结构或者对象的过程\n\n**序列化目的:** 序列化的主要⽬的是通过⽹络传输对象或者说是将对象存储到⽂件系统、数据库、内存中\n\n![](./JavaGuide面试突击版-学习-0507/Snipaste_2023-05-07_11-13-49.jpg)\n\n### 部分字段不想进⾏序列化处理\n`transient` 关键字的作⽤是：阻⽌实例中那些⽤此关键字修饰的的变量序列化；当对象被反序列化时，被 `transient` 修饰的变量值不会被持久化和恢复。\n\n注意事项:\n- 修饰变量，不能修饰类和⽅法\n- 在反序列化后变量值将会被置成类型的默认值。例如，如果是修饰 int类型，那么反序列后结果就是 0 。\n- `static` 变量因为不属于任何`对象(Object)`，所以⽆论有没有 `transient` 关键字修饰，均不会被序列化。\n\n\n## Java IO 流\n- InputStream\\OutputStream 字节输入流\\字节输出流\n- Reader\\Writer 字符输入流\\字符输出流\n\n---\n\n## Java中设计模式\n> [JavaGuide|Java IO 设计模式总结](https://javaguide.cn/java/io/io-design-patterns.html)\n\n---\n\n## [BIO、NIO 和 AIO 的区别？](/posts/59996.html)\n","categories":["整理归纳"],"tags":["Java基础"]},{"title":"jvm内存结构","url":"//62546.html","content":"\n# jvm 内存结构\n> [JVM内存结构和Java内存模型](https://zhuanlan.zhihu.com/p/38348646)\n\n## JVM内存结构\n\n![](./jvm内存结构/Snipaste_2023-04-29_10-13-19.jpg \"深入理解Java虚拟机（第2版）\")\n\nJVM内存结构大概分为：\n- 堆（Heap)：线程共享。所有对象的实例及数组都要在堆上分配。回收器的主要管理对象。\n- 方法区（Method Area）：线程共享。储存信息、常量、静态变量、即时编译后的代码。\n- 方法栈（JVM Stack）：线程私有。储存局部变量表、操作栈、动态链接、方法出口、对象指针。\n- 本地方法栈（Native JVM Stack）：线程私有。为虚拟机使用到的Native方法服务。如Java使用C或C++编写接口服务时，代码在此区运行。\n- 程序计数器（Program Counter Register）：线程私有。也叫PC寄存器，它可以看作是当前线程所执行字节码的行号指示器，指向下一条要执行的执行。\n\n**JVM内存结构的布局和相应的控制参数：**\n![](./jvm内存结构/Snipaste_2023-04-29_10-21-40.jpg)\n### 堆\n堆的主要作用是存放对象实例和数组。\n#### 结构划分\n- 新生代\n- 老年代\n#### 控制参数\n- -Xms设置堆的最小空间\n- -Xmx设置堆的最大空间\n- -XX:NewSize设置新生代最小空间\n- -XX:MaxNewSize设置新生代最大空间\n#### 垃圾回收\n垃圾回收的主要区域\n#### 异常情况\n`堆中没有内存完成实例分配`，并且`堆也无法再扩展`时，将会抛出`OutOfMemoryError`异常\n### 方法区\n方法区（Method Area）与Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的`类信息`、`常量`、`静态变量`、`即时编译器编译后的代码`等数据。虽然Java 虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做`Non-Heap（非堆）`，目的应该是与Java 堆区分开来。\n#### 控制参数\n- -XX:PermSize 设置最小空间\n- -XX:MaxPermSize 设置最大空间\n#### 垃圾回收\n对此区域会涉及但是`很少进行垃圾回收`。这个区域的内存回收目标主要是针对`常量池的回收和对类型的卸载`。\n#### 异常情况\n根据Java 虚拟机规范的规定， 当方法区`无法满足内存分配需求`时，将抛出`OutOfMemoryError`。\n### 方法栈\n`每个线程会有一个私有的栈`。每个线程中方法的调用又会在本栈中创建一个`栈帧`。在方法栈中会存放编译期可知的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference） 类型，它不等同于对象本身。`局部变量`表所需的`内存空间在编译期间完成分配`，当进入一个方法时，这个方法需要在`帧中分配多大的局部变量空间是完全确定的`，在`方法运行期间不会改变局部变量表的大小`。\n#### 控制参数\n- -Xss控制每个线程栈的大小。\n#### 异常情况\n- `StackOverflowError`： 异常线程请求的栈深度大于虚拟机所允许的深度时抛出；\n- `OutOfMemoryError` 异常： 虚拟机栈可以动态扩展，当扩展时无法申请到足够的内存时会抛出。\n### 本地方法栈\n本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，其`区别`不过是`虚拟机栈为虚拟机执行Java 方法（也就是字节码）服务`，而`本地方法栈`则是为`虚拟机使用到的Native 方法服务`。\n#### 控制参数\nSun JDK中本地方法栈和方法栈是同一个，因此也可以用`-Xss`控制每个线程的大小\n#### 异常情况\n与虚拟机栈一样，本地方法栈区域也会抛出`StackOverflowError `和`OutOfMemoryError`异常。\n### 程序计数器\n作用可以看做是`当前线程`所执行的`字节码的行号指示器`。\n#### 异常情况\n此内存区域是`唯一一个`在Java 虚拟机规范中`没有规定任何OutOfMemoryError 情况`的区域。\n\n ","categories":["整理归纳"]},{"title":"jvm调优参数","url":"//7617.html","content":"\n# jvm 调优参数\n> [JVM常用调优参数 ——JVM篇](https://blog.csdn.net/m0_46316970/article/details/123585951)\n>> 这篇文章的大佬实在是太👍了!部分待更新内容等我先把其他消化理解了先.\n\n## 性能调优\n性能调优包含多个层次：架构调优、代码调优、JVM调优、数据库调优、操作系统调优等等\n架构调优和代码调优是JVM调优的基础，**其中架构调优是对系统影响最大的**。\n性能调优基本步骤：\n- 发现性能瓶颈\n- 明确优化目标\n- 性能调优\n- 通过监控及数据统计工具获得调优后数据\n- 确认是否达到目标\n\n## 何时进行JVM调优\n- Heap内存（老年代）持续上涨达到设置的最大内存值；\n- Full GC 次数频繁；\n- GC 停顿时间过长（超过1秒）\n- 应用出现OutOfMemory等内存异常；\n- 应用中有使用本地缓存且占用大量内存空间；\n- 系统吞吐量与响应性能不高或不降。\n\n## JVM调优基本原则\n- 大多数的Java应用不需要进行JVM优化；\n- 大多数导致GC问题的原因是代码层面的问题导致的（代码层面）；\n- 上线之前，应先考虑将机器的JVM参数设置到最优；\n- 减少创建对象的数量（代码层面）；\n- 减少使用全局变量和大对象（代码层面）；\n- 优先架构调优和代码调优，JVM优化是不得已的手段（代码、架构层面）;\n- 分析GC情况优化代码比优化JVM参数更好（代码层面）。\n\n**最有效的优化手段是架构和代码层面的优化，而JVM优化则是最后不得已的手段，也可以说是对服务器配置的最后一次“压榨”。**\n\n## JVM调优目标\n调优的最终`目的`都是为了`令应用程序使用最小的硬件消耗来承载更大的吞吐`。`JVM调优主要是针对垃圾收集器的收集性能优化`，`令运行在虚拟机上的应用能够使用更少的内存以及延迟获取更大的吞吐量`。\n- 延迟：GC低停顿和GC低频率；\n- 低内存占用；\n- 高吞吐量。\n\n## JVM调优量化目标\nJVM调优的量化目标参考实例：\n- Heap 内存使用率 <= 70%;\n- Old generation 内存使用率 <= 70%;\n- avgpause <= 1秒;\n- Full GC 次数 0 或 avg pause interval >= 24小时。\n\n**注意：不同应用的JVM调优量化目标是不一样的。**\n\n## JVM调优的步骤\nJVM调优可通过以下步骤进行：\n- 分析GC日志及dump文件，判断是否需要优化，确定瓶颈问题点；\n- 确定JVM调优量化目标；\n- 确定JVM调优参数（根据历史JVM参数来调整）；\n- 依次调优内存、延迟、吞吐量等指标；\n- 对比观察调优前后的差异；\n- 不断的分析和调整，直到找到合适的JVM参数配置；\n- 找到最合适的参数，将这些参数应用到所有服务器，并进行后续跟踪。\n\n以上操作步骤中，某些步骤是需要`多次不断迭代完成`的。一般是从满足`程序的内存使用需求开始的，之后是时间延迟的要求，最后才是吞吐量的要求，要基于这个步骤来不断优化`，每一个步骤都是进行下一步的基础，不可逆行之。\n\n## JVM参数\n`-XX` 参数被称为不稳定参数。此类参数的设置很容易引起JVM性能上的差异，使 JVM 存在极大的不稳定性。如果此类参数`设置合理将大大提高JVM的性能及稳定性`。\n\n不稳定参数语法规则包含以下内容：\n- 布尔类型参数值\n  - -XX:+ 表示启用该选项\n  - -XX:- 表示关闭该选项\n- 数字类型参数值：\n  - XX: = 给选项设置一个数字类型值，可跟随单位。\n    - 例如：‘m’或‘M’表示兆字节；‘k’或‘K’千字节；‘g’或‘G’千兆字节。32K与32768是相同大小的。\n- 字符串类型参数值：\n  - -XX: = 给选项设置一个字符串类型值，通常用于指定一个文件、路径或一系列命令列表。\n    - 如：-XX:HeapDumpPath=./dump.core\n  \n## JVM参数解析及调优\n\nJava7及以前版本的示例:\n```\n-Xmx4g \n–Xms4g \n–Xmn1200m \n–Xss512k \n-XX:NewRatio=4 \n-XX:SurvivorRatio=8 \n-XX:PermSize=100m \n-XX:MaxPermSize=256m \n-XX:MaxTenuringThreshold=15\n```\n在Java8中永久代的参数-XX:PermSize和-XX：MaxPermSize已经失效。\n\n\n参数解析:\n- -Xmx4g：堆内存最大值为4GB\n- -Xms4g：初始化堆内存大小为4GB\n- -Xmn1200m：设置年轻代大小为1200MB\n  - 增大年轻代后，将会减小年老代大小。此值对系统性能影响较大，Sun官方推荐配置为整个堆的3/8\n- -Xss512k：设置每个线程的堆栈大小。\n  - JDK5.0以后每个线程堆栈大小为1MB，以前每个线程堆栈大小为256K。应根据应用线程所需内存大小进行调整。在相同物理内存下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在3000~5000左右。\n- -XX:NewRatio=4：设置年轻代（包括Eden和两个Survivor区）与年老代的比值（除去持久代）\n  - 设置为4，则年轻代与年老代所占比值为1：4，年轻代占整个堆栈的1/5\n- -XX:SurvivorRatio=8: 设置年轻代中Eden区与Survivor区的大小比值。\n  - 设置为8，则两个Survivor区与一个Eden区的比值为2:8，一个Survivor区占整个年轻代的1/10\n- -XX:PermSize=100m：初始化永久代大小为100MB。\n- -XX:MaxPermSize=256m：设置持久代大小为256MB。\n- -XX:MaxTenuringThreshold=15：设置垃圾最大年龄。\n  - 如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概论。\n\n新生代、老生代、永久代的参数，如果不进行指定，虚拟机会自动选择合适的值，同时也会基于系统的开销自动调整。\n\n可调优参数:\n- -Xms：初始化堆内存大小，默认为物理内存的1/64(小于1GB)。\n- -Xmx：**堆内存最大值。**默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于70%时，JVM会减少堆直到-Xms的最小限制。\n- -Xmn：新生代大小，包括Eden区与2个Survivor区\n- -XX:SurvivorRatio=1：Eden区与一个Survivor区比值为1:1。\n- -XX:MaxDirectMemorySize=1G：**直接内存。**报java.lang.OutOfMemoryError: Direct buffer memory异常可以上调这个值。\n- -XX:+DisableExplicitGC：禁止运行期显式地调用System.gc()来触发fulll GC。\n- 注意: Java RMI的定时GC触发机制可通过配置-Dsun.rmi.dgc.server.gcInterval=86400来控制触发的时间。\n- -XX:CMSInitiatingOccupancyFraction=60：老年代内存回收阈值，默认值为68。\n- -XX:ConcGCThreads=4：CMS垃圾回收器并行线程线，推荐值为CPU核心数。\n- -XX:ParallelGCThreads=8：新生代并行收集器的线程数。\n- -XX:MaxTenuringThreshold=10：**设置垃圾最大年龄。**如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概论。\n- -XX:CMSFullGCsBeforeCompaction=4：指定进行多少次fullGC之后，进行tenured区 内存空间压缩。\n- -XX:CMSMaxAbortablePrecleanTime=500：当abortable-preclean预清理阶段执行达到这个时间时就会结束。\n\n注意：在设置的时候，如果关注性能开销的话，应尽量把永久代的初始值与最大值设置为同一值，因为永久代的大小调整需要进行FullGC才能实现。\n\n## 内存优化示例\n![](./jvm调优参数/Snipaste_2023-04-29_11-40-19.jpg)\n以上gc日志中，在发生fullGC之时，整个应用的堆占用以及GC时间。为了更加精确需多次收集，计算平均值。或者是采用耗时最长的一次FullGC来进行估算。上图中，老年代空间占用在93168kb（约93MB），以此定为老年代空间的活跃数据。则其他堆空间的分配，基于以下规则来进行。\n\n- java heap：参数-Xms和-Xmx，建议扩大至3-4倍FullGC后的老年代空间占用。\n- 永久代：-XX:PermSize和-XX:MaxPermSize，建议扩大至1.2-1.5倍FullGc后的永久代空间占用。\n- 新生代：-Xmn，建议扩大至1-1.5倍FullGC之后的老年代空间占用。\n- 老年代：2-3倍FullGC后的老年代空间占用。\n\n基于以上规则，则对参数定义如下：\n```\n-Xms373m -Xmx373m //4*93=372\n-Xmn140m //1.5*93=139.5\n-XX:PermSize=5m -XX:MaxPermSize=5m //1.5*3=4.5\n```\n\n## 吞吐量调优\n## 调优工具\n借助GCViewer日志分析工具，可以非常直观地分析出待调优点。\n- Memory，分析Totalheap、Tenuredheap、Youngheap内存占用率及其他指标，理论上内存占用率越小越好；\n- Pause，分析Gc pause、Fullgc pause、Total pause三个大项中各指标，理论上GC次数越少越好，GC时长越小越好；\n\n## 总结JVM参数使用手则\n### 内存相关\n### GC策略相关\n### GC日志相关\n### 异常相关\n### 问题定位及优化相关\n\n\n","categories":["整理归纳"]},{"title":"什么是类加载？何时类加载？类加载流程？","url":"//26747.html","content":"\n# 类加载\n> [Java类加载机制](https://zhuanlan.zhihu.com/p/25228545)\n\n## 什么是类加载\n\n加载和初始化，是类生命周期的两个阶段。\n\n\n\n## 何时类加载\n\n对于什么时候加载，Java虚拟机规范中并没有约束，各个虚拟机都可以按自身需要来自由实现。但绝大多数情况下，都遵循“什么时候初始化”来进行加载。\n\n什么时候初始化？Java虚拟机规范有明确规定，当符合以下条件时（包括但不限于），虚拟机内存中没有找到对应类型信息，则必须对类进行“初始化”操作：\n- 使用new实例化对象时、读取或者设置一个类的静态字段或方法时\n- 反射调用时，例如 Class.forName(\"com.xxx.MyTest\")\n- 初始化一个类的子类，会首先初始化子类的父类\n- Java虚拟机启动时标明的启动类\n- JDK8 之后，接口中存在default方法，这个接口的实现类初始化时，接口会其之前进行初始化\n\n> 初始化阶段开始之前，自然还是要先经历 加载、验证、准备 、解析的。\n\n## 类加载流程\n类的加载过程分 5 个阶段，其中 验证、准备、解析 可以归纳为 “连接” 阶段。\n![](./什么是类加载？何时类加载？类加载流程？/Snipaste_2023-04-29_11-49-53.jpg)\n\n需要注意的是，这5个阶段，并不是严格意义上的按顺序完成，在类加载的过程中，这些阶段会互相混合，交叉运行，最终完成类的加载和初始化。\n\n### 加载\n1. 通过一个类的全限定名去找到其对应的.class文件\n2. 将这个.class文件内的二进制数据读取出来，转化成方法区的运行时数据结构\n3. 在Java堆中生成一个代表这个类的java.lang.Class对象，作为对方法区中这些数据的访问入口\n> Java虚拟机并没有规定类的字节流必从.class文件中加载，在加载阶段，程序员可以通过自定义的类加载器，自行定义读取的地方，例如通过网络、数据库等。\n\n\n### 验证\nClass文件中的内容是字节码，这些内容可以由任何途径产出，验证阶段的目的是保证文件内容里的字节流符合Java虚拟机规范，且这些内容信息运行后不会危害虚拟机自身的安全。\n#### 文件格式验证\n验证字节流是否符合Class文件格式的规范。例如：是否以0xCAFEBABE开头、主次版本号是否在当前虚拟机的处理范围之内、常量池中的常量是否有不被支持的类型 ...... 等等\n#### 元数据验证\n对字节码描述的元数据信息进行语义分析，要符合Java语言规范。例如：是否继承了不允许被继承的类（例如final修饰过的）、类中的字段、方法是否和父类产生矛盾 ...... 等等\n#### 字节码验证\n对类的方法体进行校验分析，确保这些方法在运行时是合法的、符合逻辑的。 \n#### 符号引用验证\n发生在解析阶段，符号引用转为直接引用的时候，例如：确保符号引用的全限定名能找到对应的类、符号引用中的类、字段、方法允许被当前类所访问 ...... 等等\n\n> 验证阶段不是必须的，虽然这个阶段非常重要。Java虚拟机允许程序员主动取消这个阶段，用来缩短类加载的时间，可以根据自身需求，使用 -Xverify:none参数来关闭大部分的类验证措施。\n>\n\n### 准备\n这个阶段，类的静态字段信息（即使用 static 修饰过的变量）会得到内存分配，并且设置为初始值。\n\n该阶段有以下几个知识点需要注意： \n1. 内存分配仅包括 static 修饰过的变量，而不包括实例变量，实例变量得等到对象实例化时分配内存。\n2. 初始值指的是变量数据类型的默认值，而不是被在Java代码中被显式地赋予的值。但是，当字段信息被 final 修饰成常量（ConstantValue）时，这个初始值就是Java代码中显式地赋予的值。\n>例如：public static int value = 3\n类变量 value 在准备阶段设置的初始值是 0，不是 3。把value赋值为3的 putstatic 指令是在程序编译后，存放于类构造器 <clinit>() 方法中的，所以把 value 赋值为 3 的动作将在初始化阶段才会执行。\n当使用 final 修饰后：public static final int value = 3\n类变量 value 在准备阶段设置的初始值是 3，不是 0。\n3. 在JDK8取消永久代后，方法区变成了一个逻辑上的区域，这些类变量的内存实际上是分配在Java堆中的。\n\n### 解析\n虚拟机会把这个Class文件中，常量池内的符号引用转换为直接引用。主要解析的是 类或接口、字段、类方法、接口方法、方法类型、方法句柄等符号引用。我们可以把解析阶段中，符号引用转换为直接引用的过程，理解为当前加载的这个类，和它所引用的类，正式进行“连接“的过程。\n\n### 初始化\n初始化的过程，就是执行类构造器 <clinit>()方法的过程。\n\n当初始化完成之后，类中static修饰的变量会赋予程序员实际定义的“值”，同时类中如果存在static代码块，也会执行这个静态代码块里面的代码。\n\n### 加载过程总结\n当一个符合Java虚拟机规范的字节流文件，经历 加载、验证、准备、解析、初始化这些阶段相互协作执行完成之后，加载阶段读取到的Class字节流信息，会按虚拟机规定的格式，在方法区保存一份，然后Java 堆中，会创建一个 java.lang.Class 类的对象，这个对象描述了这个类所有信息，也提供了这个类在方法区的访问入口。\n\n> 方法区中，使用同一加载器的情况下，每个类只会有一份Class字节流信息\n> Java堆中，使用同一加载器的情况下，每个类只会有一份 java.lang.Class 类的对象\n\n\n## 类加载器\n\n还记得在加载阶段，通过类的全限定名，获取该类字节流数据的这个动作么，类加载器就是用来实现这个动作的。\n\n当年为了满足浏览器上 Java Applet 的需求，Java的开发团队设计了类加载器，它独立于Java虚拟机外部，允许程序员按自身需要自行实现类加载器。这是一项非常优秀的创新，它让同一个类可以实现访问隔离、OSGi、程序热部署等等。发展至今，类加载器已经是Java技术体系的一块重要基石。\n\n### 三层类加载器介绍\n#### 启动类加载器（Bootstrap Class Loader）\n负责加载<JAVA_HOME>\\lib 目录，或者被 -Xbootclasspath 参数制定的路径，例如 jre/lib/rt.jar 里所有的class文件。由C++实现，不是ClassLoader子类。\n#### 拓展类加载器（Extension Class Loader）\n负责加载Java平台中扩展功能的一些jar包，包括<JAVA_HOME>\\lib\\ext 目录中 或 java.ext.dirs 指定目录下的jar包。由Java代码实现。\n#### 应用程序类加载器（Application Class Loader）\n我们自己开发的应用程序，就是由它进行加载的，负责加载ClassPath路径下所有jar包。 \n\n## 双亲委派模型\n> 双亲委派模式其实一句话就可以说清楚：任何一个类加载器在接到一个类的加载请求时，都会先让其父类进行加载，只有父类无法加载（或者没有父类）的情况下，才尝试自己加载。\n>\n>\n![](./什么是类加载？何时类加载？类加载流程？/Snipaste_2023-04-29_12-00-01.jpg)\nClassLoader 类中有示例:\n```\nprotected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException\n{\n    // 首先要保证线程安全\n    synchronized (getClassLoadingLock(name)) {\n        // 先判断这个类是否被加载过\n        Class<?> c = findLoadedClass(name);\n        if (c == null) {\n            try {\n                // 有父类，优先交给父类尝试加载\n                if (parent != null) {\n                    c = parent.loadClass(name, false);\n                } else {\n                    c = findBootstrapClassOrNull(name);\n                }\n            } catch (ClassNotFoundException e) {\n                // 父类加载失败，这里捕获异常，但不需要做任何处理\n            }\n\n            if (c == null) {\n                // 没有父类，或者父类无法加载，尝试自己加载\n                c = findClass(name);\n            }\n        }\n        if (resolve) {\n            resolveClass(c);\n        }\n        return c;\n    }\n}\n```\n\n\n### 双亲委派模型好处\n在解答这个问题前，需要先了解一个知识点：不同的类加载器，加载同一个类，结果是虚拟机里会存在两份这个类的信息，所以当判断这两个类是否“相等”时，必定是不相等的。\n\n使用双亲委派模式，可以保证，每一个类只会有一个类加载器。例如Java最基础的Object类，它存放在 rt.jar 之中，这是 Bootstrap 的职责范围，当向上委派到 Bootstrap 时就会被加载。\n\n但如果没有使用双亲委派模式，可以任由自定义加载器进行加载的话，Java这些核心类的API就会被随意篡改。\n\n\n","categories":["整理归纳"]},{"title":"BIO,NIO,AIO有什么区别?","url":"//59996.html","content":"## BIO,NIO,AIO 有什么区别?\n> [【CSDN】BIO、NIO、AIO 有什么区别？](https://blog.csdn.net/meism5/article/details/89469101)\n\n- BIO：线程发起IO请求，不管内核是否准备好IO操作，从发起请求起，线程一直阻塞，直到操作完成。\n- NIO：线程发起IO请求，立即返回；内核在做好IO操作的准备之后，通过调用注册的回调函数通知线程做IO操作，线程开始阻塞，直到操作完成。\n- AIO：线程发起IO请求，立即返回；内存做好IO操作的准备之后，做IO操作，直到操作完成或者失败，通过调用注册的回调函数通知线程做IO操作完成或者失败。\n\n<br>\n\n- BIO：同步并阻塞，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销，当然可以通过线程池机制改善。\n- NIO：同步非阻塞，服务器实现模式为一个请求一个线程，即客户端发送的连接请求都会注册到多路复用器上，多路复用器轮询到连接有I/O请求时才启动一个线程进行处理。\n- AIO：异步非阻塞，服务器实现模式为一个有效请求一个线程，客户端的I/O请求都是由OS先完成了再通知服务器应用去启动线程进行处理。","categories":["整理归纳"]},{"title":"==与equals?hashCode与equals?","url":"//33636.html","content":"\n## == 与 equals?hashCode 与 equals ?\n> [【CSDN】== 和 equals 的区别](https://blog.csdn.net/meism5/article/details/89029475)\n\n **== ：**\n `==`是操作符\n > 基本类型：比较值是否相等 （byte,short,char,int,long,float,double,boolean）\n > \n > 引用类型：比较堆内存地址是否相等 （new一个引用类型的对象，会重新分配堆内存空间，使用==比较返回false）\n\n 补充：`==`运行速度比`equals()`快，因为==只是比较引用\n \n\n**equals：**　　\n`equals()`是Object类的一个方法，Java当中所有的类都是继承于Object这个超类。\n> 引用类型：默认情况下，比较内存地址值是否相等\n> `一般重写都是自动生成，比较对象的成员变量值是否相同` \n　　\n\n*hashCode 与 equals ?*\n> [【CSDN】java基础：hashCode() equals()总结](https://blog.csdn.net/maligebilaowang/article/details/129663874)\n\n*equals()性质：*\n1. 自反性（reflexive）。对于任意不为null的引用值x，x.equals(x)一定是true。\n2. 对称性（symmetric）。对于任意不为null的引用值x和y，当且仅当x.equals(y)是true时，y.equals(x)也是true。\n3. 传递性（transitive）。对于任意不为null的引用值x、y和z，如果x.equals(y)是true，同时y.equals(z)是true，那么x.equals(z)一定是true。\n4. 一致性（consistent）。对于任意不为null的引用值x和y，如果用于equals比较的对象信息没有被修改的话，多次调用时x.equals(y)要么一致地返回true要么一致地返回false。\n5. 非空性。对于任意不为null的引用值x，x.equals(null)返回false。\n\n> 需要注意的是当equals()方法被override时，hashCode()也要被override。按照一般hashCode()方法的实现来说，相等的对象，它们的hash code一定相等。\n \n\n*hashCode()方法*\n> hashCode()方法给对象返回一个hash code值。\n\n1. hashCode的存在主要是用于查找的快捷性，如Hashtable，HashMap等，hashCode是用来在散列存储结构中确定对象的存储地址的；\n2. 如果两个对象相同，就是适用于equals(java.lang.Object) 方法，那么这两个对象的hashCode一定要相同；\n3. 如果对象的equals方法被重写，那么对象的hashCode也尽量重写，并且产生hashCode使用的对象，一定要和equals方法中使用的一致，否则就会违反上面提到的第2点；\n4. 两个对象的hashCode相同，并不一定表示两个对象就相同，也就是不一定适用于equals(java.lang.Object) 方法，只能够说明这两个对象在散列存储结构中，如Hashtable，他们“存放在同一个篮子里”\n\n\n## 补充: [为什么要有hashCode?](/posts/42174.html)\n","categories":["整理归纳"]},{"title":"Exception和Error有什么区别？","url":"//60744.html","content":"\n \n## Exception 和 Error 有什么区别？\n\n`Error`和`Exception`都属于`java.lang`包中`Trhowable`的子类.\n\n### Exception\n\n程序本身可以处理的异常.可以通过`catch`来捕获. 异常又分为`Checked Exception(受检查异常,必须处理)`和`Unchecked Exception(不受检查异常,可以不处理)`\n\n### Error\n\n属于程序无法处理的错误.例如: Java虚拟机错误(Virtual MachineError)、虚拟机内存不够错误( OutOfMemoryError )、类定义错误（ NoClassDefFoundError ）等 。这些异常发⽣时，Java 虚拟机（JVM）⼀般会选择线程终⽌.\n\n\n ## 拓展: Checked Exception 和 Unchecked Exception 有什么区别?\n\n ![](./Exception和Error有什么区别？/Snipaste_2023-05-07_10-27-50.jpg)\n\n ![](./Exception和Error有什么区别？/Snipaste_2023-05-07_10-29-27.jpg)\n \n ","categories":["整理归纳"]},{"title":"Java中的几种基本数据类型是什么？对应的包装类型是什么？各自占用多少字节呢？","url":"//59036.html","content":"\n## Java 中的几种基本数据类型是什么？对应的包装类型是什么？各自占用多少字节呢？\n> [【CSDN】Java基本数据类型有哪些？他们分别占几个字节？为什么？](https://blog.csdn.net/zhang_java_11/article/details/115171350)\n> \n> [【知乎】Java包装类](https://zhuanlan.zhihu.com/p/49970755)\n\n\n\n> Java中提供了**8**种基本类型。\n\n\n|基本类型 |包装类型  |区别    | 占用字节 |\n|  ----  | ----     |----   | ----    |\n| byte   | Byte     |整数类型| 1个字节\n| short  | Short    |整数类型| 2个字节\n| int    | Integer  |整数类型| 4个字节\n| long   | Long     |整数类型| 8个字节\n| float  | Float    |浮点类型| 4个字节\n| double | Double   |浮点类型| 8个字节\n| char   | Character|字符类型| 2个字节\n| boolean| Boolean  |布尔类型| boolean单个占4个字节，boolean数组1个字节\n\n\n问：一个汉字占用几个字节？\n> 答：这和编码有关，UTF8一个汉字占3个字节，GBK一个汉字占2个字节。\n\n\n\n","categories":["整理归纳"]},{"title":"Java泛型了解么？什么是类型擦除？介绍一下常用的通配符？","url":"//47052.html","content":"\n## Java 泛型了解么？什么是类型擦除？介绍一下常用的通配符？\n> [Java泛型了解么？什么是类型擦除？介绍一下常用的通配符？](https://blog.csdn.net/qq_41356873/article/details/108823040)\n\nJava的泛型是**伪泛型**，这是因为Java在编译期间，所有的泛型信息都会被擦掉，这也就是通常所说`类型擦除`。\n\n**常用的通配符：**  ?,T,K,V,E\n\n- ？ 表示不确定的 java 类型\n- T (type) 表示具体的一个java类型\n- K V (key value) 分别代表java键值中的Key Value\n- E (element) 代表Element\n","categories":["整理归纳"]},{"title":"Java反射？反射有什么缺点？你是怎么理解反射的（为什么框架需要反射）？","url":"//43267.html","content":"\n## Java 反射？反射有什么缺点？你是怎么理解反射的（为什么框架需要反射）？\n\n**反射的优点：**\n1. 增加程序的灵活性，避免将程序写死到代码里\n2. 代码简洁，提高代码的复用率，外部调用方便\n3. 对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法\n   \n**反射的缺点：**\n1. 性能问题\n2. 安全限制\n3. 程序健壮性","categories":["整理归纳"]},{"title":"Strings1=newString(abc);这段代码创建了几个字符串对象？","url":"//10949.html","content":"\n\n## String s1 = new String(\"abc\") 这段代码创建了几个字符串对象？\n> ⭐ [【博客园】String s=new String(\"abc\")创建了几个对象?](https://www.cnblogs.com/ydpvictor/archive/2012/09/09/2677260.html \"解析讲解的比较好\")\n\n\n\n```\n字符串 \"abc\" 是一个对象\nnew String() 这里使用new又创建了一个对象\n```\n\n1. 如果字符串常量池中不存在字符串对象“abc”的引⽤，那么会在堆中创建 2 个字符串对象“abc”。\n2. 如果字符串常量池中已存在字符串对象“abc”的引⽤，则只会在堆中创建 1 个字符串对象“abc”。\n\n\n\n> 答案 :  **会创建 1 或 2 个字符串对象**\n> \n\n<br>\n\n\n*例题解析：*\n\n```\n#创建了一个String对象\nString str=\"abc\"; \n\n#创建了一个String对象\nString a=\"abc\";  String b=\"abc\";\n\n#创建了三个String对象\nString a=\"ab\"+\"cd\";\n\n```\n> 在JAVA虚拟机（JVM）中存在着一个**字符串池**，其中保存着很多String对象，并且可以被共享使用，因此它提高了效率。\n> \n> `String a=\"abc\"`，这行代码被执行的时候，JAVA虚拟机首先在字符串池中查找是否已经存在了值为\"abc\"的这么一个对象，它的判断依据是`String类equals(Object obj)`方法的返回值。\n> 如果有，则不再创建新的对象，直接返回已存在对象的引用；\n> 如果没有，则先创建这个对象，然后把它加入到字符串池中，再将它的引用返回。\n\n*哪些情况下可以加入字符串池？*\n> 只有使用**引号包含文本**的方式创建的String对象之间使用“+”连接产生的新对象才会被**加入字符串池**中。\n> 对于所有包含**new方式新建对象（包括null）的“+”连接表达式**，它所产生的新对象都**不会被加入字符串池**中\n\n*扩充知识点：*\n> 栈（stack）：主要保存基本类型（或者叫内置类型）（char、byte、short、int、long、float、double、boolean）和对象的引用，数据可以共享，速度仅次于寄存器（register），快于堆。\n>\n> 堆（heap）：用于存储对象。\n","categories":["整理归纳"]},{"title":"String、StringBuffer和StringBuilder的区别是什么?String为什么是不可变的?","url":"//21142.html","content":"\n\n\n## String 、 StringBuffer 和 StringBuilder 的区别是什么? String 为什么是不可变的?\n> [【CSDN】String、StringBuffer、StringBuilder的区别——（详细叙述）](https://blog.csdn.net/Turniper/article/details/111112824)\n>\n> [【知乎】如何理解 String 类型值的不可变？](https://www.zhihu.com/question/20618891 \"摘选`JavaGuide`回答\")\n\n**String 、 StringBuffer 和 StringBuilder 的区别**\n|          |String          |StringBuffer        | StringBuilder \n|  ----    | ----           |----                | ----    \n| 执行速度  | 最差           |其次                | 最高\n| 线程安全  | 线程安全       |线程安全             | 线程不安全\n| 使用场景  | 少量字符串操作  |多线程环境下的大量操作| 单线程环境下的大量操作\n\n**String 为什么是不可变的?**\n```\n\npublic final class String implements java.io.Serializable, Comparable<String>, CharSequence,Constable, ConstantDesc {\n    private final byte[] value;\n    //...\n}\n```\n- String 类被 final 修饰导致其不能被继承，进而避免了子类破坏 String 不可变\n- 保存字符串的数组被 final 修饰且为私有的，并且String 类没有提供/暴露修改这个字符串的方法\n\n\n","categories":["整理归纳"]},{"title":"包装类型的缓存机制了解么？","url":"//48309.html","content":"## 包装类型的缓存机制了解么？\n[【CSDN】java 包装类的缓存机制](https://blog.csdn.net/chenchuxu/article/details/78725966)\n\n> Integer 、Byte 、Short 、Long 、Character 五大包装类都有缓冲机制，且缓冲的默认值范围都是-128~127\n>\n> Float,Double,Boolean 三大包装类并没有缓冲机制\n\n1. 前提：发生自动装箱的过程（基本类型–>包装类型）\n2. 机制：当通过自动装箱机制创建包装类对象时，首先会判断数值是否在-128—-127的范围内，如果满足条件，则会从缓存（常量池）中寻找指定数值，若找到缓存，则不会新建对象，只是指向指定数值对应的包装类对象，否则，新建对象。\n3. `原理-请查阅参考博客资料`\n4. 缓存的作用\n在缓存值范围内的对象可以直接在常量池中取出，不用创建新的对象；\n当需要频繁的使用同一对象的时候，如果有缓存，则可以避免重复创建同一对象，节省空间开销和时间消耗，提升了性能 ","categories":["整理归纳"]},{"title":"深拷贝和浅拷贝区别了解吗？什么是引用拷贝？","url":"//30985.html","content":"\n## 深拷贝和浅拷贝区别了解吗？什么是引用拷贝？\n\n**浅拷贝和深拷贝的区别**\n> [【CSDN】引用拷贝、浅拷贝和深拷贝区别](https://blog.csdn.net/MirkoWug/article/details/108889116)\n\n拷贝一般分为二大类 **引用拷贝** 和 **对象拷贝**，我们通常讲的**深拷贝**和**浅拷贝**都属于对象拷贝\n\n**浅拷贝**只复制对象的指针，指向同一块内存，而**深拷贝**复制对象本身，创建一个新的内存，修改一个对象不会影响另一个对象。\n\n>**浅拷贝**的属性如果是引用类型，会共享同一个地址，**深拷贝**的属性如果是引用类型，会拷贝地址指向的内存\n\n\n\n**引用拷贝**\n顾名思义，即是对引用地址的拷贝，说明引用地址一样，指向堆中的对象是同一个对象。\n如果对一个对象进行改变，其他对象也会跟着改变。\n\n","categories":["整理归纳"]},{"title":"内部类了解吗？匿名内部类了解吗？","url":"//19656.html","content":"## 内部类了解吗？匿名内部类了解吗？\n\n> [【CSDN】Java的内部类和匿名类 ， 您了解过吗？](https://blog.csdn.net/qq_41464123/article/details/107480664)\n\n**内部类：**\n内部类就是类中类，依附于普通类中，可以间接实现Java类的多继承。\n\n1. 成员内部类：就是内部类作为一个成员，存在于类中。\n   `实例化方法：   外部类.内部类 内部类对象 = new 外部类().new 内部类();`\n2. 静态内部类，在成员内部类的基础上，多了一个static关键字，是静态的类，所有的对象都可以直接通过类名调用。\n   `实例化方法：   内部类 内部类对象 = new new 内部类(); `\n3. 方法内部类，在类的方法中，定义内部类。\n   `实例化方法：   new 内部类().内部类方法();   注意只能在当前方法中实例化。`\n4. 匿名内部类，直接new一个没有名字的类，并且直接调用其中的方法。\n   `实例化方法：    new 内部类(){ ...... }.内部类中的方法();`\n","categories":["整理归纳"]},{"title":"自动装箱与拆箱了解吗？原理是什么？","url":"//13955.html","content":"\n## 自动装箱与拆箱了解吗？原理是什么？\n> [【博客园】如何理解Java中的自动拆箱和自动装箱？](https://www.cnblogs.com/niceyoo/p/12977541.html)\n>\n\n> 定义：基本数据类型和包装类之间可以自动地相互转换\n>\n> 理解：装箱就是自动将基本数据类型转换为封装类型，拆箱就是自动将封装类型转换为基本数据类型。\n>\n```\n// 自动装箱\n1. Integer a = 100;\n// 自动拆箱\n2. int b = a;\n```\n自动**装箱**，相当于Java编译器替我们执行了 `Integer.valueOf(XXX)`;\n\n自动**拆箱**，相当于Java编译器替我们执行了 `Integer.intValue(XXX)`;\n","categories":["整理归纳"]},{"title":"ConcurrentHashMap和Hashtable的区别？","url":"//12495.html","content":"# ConcurrentHashMap 和 Hashtable 的区别？\n\nConcurrentHashMap 和 Hashtable 的区别主要体现在实现线程安全的⽅式上不同。\n\n- 底层数据结构：\n  - ConcurrentHashMap\n    - JDK 1.7：ConcurrentHashMap 底层采⽤`分段的数组+链表`实现\n    - JDK1.8 : ConcurrentHashMap 底层采⽤采⽤的数据结构跟 HashMap1.8 的结构⼀样，`数组+链表/红⿊⼆叉树`。\n  - Hashtable: Hashtable 和 JDK1.8 之前的 HashMap 的底层数据结构类似都是采⽤ `数组+链表` 的形式，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突⽽存在的\n- <font color='red'>实现线程安全的方式：</font>\n  - ConcurrentHashMap：\n    - JDK 1.7: ConcurrentHashMap 对整个桶数组进⾏了分割分段( Segment ，分段锁)，每⼀把锁只锁容器其中⼀部分数据，多线程访问容器⾥不同数据段的数据，就不会存在锁竞争，提⾼并发访问率。\n    - JDK 1.8: Node 数组+链表+红⿊树的数据结构来实现，并发控制使⽤ synchronized 和 CAS 来操作。\n  - HashTable (同⼀把锁) : 使⽤ synchronized 来保证线程安全，效率⾮常低下。当⼀个线程访问同步⽅法时，其他线程也访问同步⽅法，可能会进⼊阻塞或轮询状态，如使⽤ put 添加元素，另⼀个线程不能使⽤ put 添加元素，也不能使⽤ get，竞争会越来越激烈效率越低。\n  \n  <br>\n\n  **数据结构：**\n  ![](Snipaste_2023-04-28_08-04-59.jpg)\n  ![](Snipaste_2023-04-28_08-05-24.jpg)\n  ![](Snipaste_2023-04-28_08-06-00.jpg)\n       \n","categories":["整理归纳"]},{"title":"ConcurrentHashMap线程安全的具体实现方式/底层具体实现","url":"//19235.html","content":"# ConcurrentHashMap 线程安全的具体实现方式/底层具体实现\n\n**JDK 1.8 之前**\n![](Snipaste_2023-04-28_08-10-38.jpg)\n\n`ConcurrentHashMap` 是由 `Segment` 数组结构和 `HashEntry` 数组结构组成。\n\n`Segment` 继承了 `ReentrantLock` ,所以 `Segment` 是⼀种可重⼊锁，扮演锁的⻆⾊。 `HashEntry` ⽤于\n存储键值对数据。\n```\nstatic class Segment<K,V> extends ReentrantLock implements Serializable {}\n```\n\n⼀个 `ConcurrentHashMap` ⾥包含⼀个 `Segment` 数组， `Segment` 的个数⼀旦初始化就不能改变。\n`Segment` 数组的⼤⼩默认是 16，也就是说默认可以同时⽀持 16 个线程并发写。`Segment` 的结构和 HashMap 类似，是⼀种数组和链表结构，⼀个 `Segment` 包含⼀个 HashEntry数组，每个 HashEntry 是⼀个链表结构的元素，每个 `Segment` 守护着⼀个 HashEntry 数组⾥的元素，当对 HashEntry 数组的数据进⾏修改时，必须⾸先获得对应的 `Segment` 的锁。也就是说，对同⼀ `Segment` 的并发写⼊会被阻塞，不同 `Segment` 的写⼊是可以并发执⾏的。\n\n\n## JDK 1.7 和 JDK 1.8 的 ConcurrentHashMap 实现有什么不同？\n- 线程安全实现⽅式:\n  - JDK 1.7 采⽤ Segment 分段锁来保证安全， Segment 是继承⾃ReentrantLock 。\n  - JDK1.8 放弃了 Segment 分段锁的设计，采⽤ Node + CAS + synchronized 保证线程安全，锁粒度更细， synchronized 只锁定当前链表或红⿊⼆叉树的⾸节点。\n- Hash 碰撞解决⽅法:\n  - JDK 1.7 采⽤拉链法，JDK1.8 采⽤拉链法结合红⿊树（链表⻓度超过⼀定阈值时，将链表转换为红⿊树）\n- 并发度: \n  - JDK 1.7 最⼤并发度是 Segment 的个数，默认是 16。JDK 1.8 最⼤并发度是 Node 数组的⼤⼩，并发度更⼤。\n\n**JDK 1.8 之后**\n![](Snipaste_2023-04-28_08-14-15.jpg)\n\n`ConcurrentHashMap` 取消了 `Segment` 分段锁，采⽤ `Node + CAS + synchronized` 来保证并发安全。数据结构跟 HashMap 1.8 的结构类似，`数组+链表/红⿊⼆叉树`。Java 8 在链表⻓度超过⼀定阈值（8）时将链表（寻址时间复杂度为 O(N)）转换为红⿊树（寻址时间复杂度为 O(log(N))）。\n","categories":["整理归纳"]},{"title":"HashMap和Hashtable的区别？HashMap和HashSet区别？HashMap和TreeMap区别？","url":"//3318.html","content":"# HashMap 和 Hashtable 的区别？HashMap 和 HashSet 区别？HashMap 和 TreeMap 区别？\n\n## HashMap 和 Hashtable 的区别\n> [HashMap和Hashtable的区别](https://blog.csdn.net/xuhuaabc/article/details/91475761)\n\n1. 继承的父类不同\n   1. HashMap继承自AbstractMap类。但二者都实现了Map接口\n   2. Hashtable继承自Dictionary类，Dictionary类是一个已经被废弃的类（见其源码中的注释）。\n2. HashMap线程不安全,HashTable线程安全\n3. 包含的contains方法不同\n   1. HashMap是没有contains方法的，而包括containsValue和containsKey方法；\n   2. hashtable则保留了contains方法，效果同containsValue,还包括containsValue和containsKey方法。\n4. 是否允许null值\n   1. Hashmap是允许key和value为null值的，用containsValue和containsKey方法判断是否包含对应键值对\n   2. HashTable键值对都不能为空，否则包空指针异常。\n5. 计算hash值方式不同\n6. 扩容方式不同（容量不够）\n   1. 当容量不足时要进行resize方法，而resize的两个步骤\n      1. 扩容\n      2. rehash\n         1. HashMap 哈希扩容必须要求为原容量的2倍，而且一定是2的幂次倍扩容结果，而且每次扩容时，原来数组中的元素依次重新计算存放位置，并重新插入；\n         2. Hashtable扩容为原容量2倍加1；\n7. 解决hash冲突方式不同（地址冲突）\n   1. Jdk1.8后，HashMap中，当出现冲突时可以（Jdk1.8之前这里不论述）\n      1. 如果冲突数量小于8，则是以链表方式解决冲突。\n      2. 当冲突大于等于8时，就会将冲突的Entry转换为**红黑树进行存储。**\n      3. 而又当数量小于6时，则又转化为链表存储\n\n\n## HashMap 和 HashSet 的区别\n> [HashSet与HashMap的区别](https://blog.csdn.net/huhahuha_/article/details/84450967)\n>\n\n区别-储存方式：\n- HashSet实现了Set接口, 仅存储对象; \n- HashMap实现了 Map接口, 存储的是键值对;\n\n相同点-底层实现：\n- HashSet底层其实是用HashMap实现存储的, HashSet封装了一系列HashMap的方法. 依靠HashMap来存储元素值,(利用hashMap的key键进行存储), 而value值默认为Object对象. 所以HashSet也不允许出现重复值, 判断标准和HashMap判断标准相同, 两个元素的hashCode相等并且通过equals()方法返回true.\n\n\n## HashMap 和 TreeMap 的区别\n> [HashMap与TreeMap的区别](https://blog.csdn.net/zhangguofengqiang/article/details/52706237)\n\n\n\n相同点：\n- 继承了AbstractMap\n  \n\n不同点：\n- 线程安全：\n  - HashMap非线程安全\n  - TreeMap非线程安全\n- 调优选项：\n  - HashMap 基于哈希表实现，可以调优初始容量和负载因子 \n  - 基于红黑树实现。TreeMap没有调优选项，因为该树总处于平衡状态。\n- 应用场景：\n  - 适用于在Map中插入、删除和定位元素。\n  - 适用于按自然顺序或自定义顺序遍历键(key)。\n- 速度效率：\n  - HashMap通常比TreeMap快一点（树和哈希表的数据结构使然）\n- 是否有序\n  - HashMap 无序\n  - TreeMap 有序，默认按键值升序、可指定排序比较器实现自定义排序规则\n\n","categories":["整理归纳"]},{"title":"HashMap的长度为什么是2的幂次方","url":"//23150.html","content":"# HashMap 的长度为什么是 2 的幂次方\n\n为了能让 HashMap 存取⾼效，尽量减少碰撞，也就是要尽量把数据分配均匀。我们上⾯也讲到了过了，Hash 值的范围值-2147483648 - 2147483647，前后加起来⼤概 40 亿的映射空间，只要哈希函数映射得⽐较均匀松散，⼀般应⽤是很难出现碰撞的。\n但问题是⼀个 40 亿⻓度的数组，内存是放不下的。所以这个散列值是不能直接拿来⽤的。⽤之前还要先做对数组的⻓度取模运算，得到的余数才能⽤来要存放的位置也就是对应的数组下标。这个数组下标的计算⽅法是“ (n - 1) & hash ”。（n代表数组⻓度）。这也就解释了 HashMap 的⻓度为什么是 2 的幂次⽅。\n\n> 我们⾸先可能会想到采⽤%取余的操作来实现。但是，重点来了：“取余(%)操作中如果除数是 2 的幂次则等价于与其除数减⼀的与(&)操作（也就是说 hash%length==hash&(length-1)的前提是length 是 2 的 n 次⽅；）。” 并且 采⽤⼆进制位操作 &，相对于%能够提⾼运算效率，这就解释了HashMap 的⻓度为什么是 2 的幂次⽅。\n\n","categories":["整理归纳"]},{"title":"比较HashSet、LinkedHashSet和TreeSet三者的异同","url":"//18392.html","content":"# 比较 HashSet、LinkedHashSet 和 TreeSet 三者的异同\n> [【CSDN】(第三点) HashSet LinkedHashSet 和 TreeSet 三者的对比](https://blog.csdn.net/JinYJ2014/article/details/122753667)\n\n\n1. HashSet、LinkedHashSet 和 TreeSet 都是 Set 接口的实现类,**都能保证元素唯一，并且都不是线程安全的。**\n2. HashSet、LinkedHashSet 和 TreeSet 的主要区别在于**底层数据结构不同。**\n   1. HashSet 的底层数据结构是哈希表（基于 HashMap 实现）。\n   2. LinkedHashSet 的底层数据结构是链表和哈希表，元素的插入和取出顺序满足 FIFO。\n   3. TreeSet 底层数据结构是红黑树，元素是有序的，排序的方式有自然排序和定制排序。\n3. 底层数据结构不同又导致这三者的**应用场景不同**。\n   1. HashSet 用于不需要保证元素插入和取出顺序的场景\n   2. LinkedHashSet 用于保证元素的插入和取出顺序满足 FIFO 的场景\n   3. TreeSet 用于支持对元素自定义排序规则的场景。\n\n","categories":["整理归纳"]},{"title":"有哪些集合是线程不安全的？怎么解决呢？","url":"//62981.html","content":"\n\n\n# 有哪些集合是线程不安全的？如何解决？\n\n> [【CSDN】集合类线程不安全如何解决](https://blog.csdn.net/weixin_45119323/article/details/109067942)\n\n## List|ArrayList\n```\npublic static void main(String[] args) {\n\n        List<String> list = new ArrayList<>();\n        for (int i = 1; i <=20 ; i++) {\n            new Thread(()->{\n                list.add(UUID.randomUUID().toString().substring(0,5));\n                System.out.println(list);\n            },String.valueOf(i)).start();\n        }\n    }\n```\n多线程环境下并发操作ArrayList操作发生异常\n![](Snipaste_2023-04-27_16-44-50.jpg )\n\n### 解决ArrayList线程不安全\n- 使用Vector\n- 使用Collections.synchronizeList()\n- 使用CopyOnWriteArrayList()\n\n#### Vector\n![](Snipaste_2023-04-27_16-51-07.jpg)\n\nVector底层采用的是加锁的方式，加锁数据的一致性可以保证，但并发性会大大降低。\n\n![](Snipaste_2023-04-27_16-54-04.jpg)\n\n#### Collections.synchronizeList()\n\nCollection和Collections的区别:\n- Collection是一个接口，Set接口和List接口都继承自此接口\n- Collections是一个类，一个辅助工具类，可以使不安全的集合类变为安全的\n\n![](Snipaste_2023-04-27_16-58-04.jpg)\n![](Snipaste_2023-04-27_16-59-25.jpg)\n\n#### CopyOnWriteArrayList()\n\n> 如果是读多写少的情况，推荐使用CopyOnWriteArrayList；\n\nCopyOnWriteArrayList是JUC包下的一个类。写时复制基于读写分离的思想。\n\nCopyOnWrite的add方法，使用Lock来加锁，一次只允许一个线程进行写操作\n![](Snipaste_2023-04-27_17-04-11.jpg)\n![](Snipaste_2023-04-27_17-04-28.jpg)\n\nCopyOnWrite容器被称为写时复制的容器，往一个容器当中添加元素的时候，不直接往当前容器Object[] 添加，而是先将当前的容器Object[] 进行copy，复制出一个新的容器Object[] newElements，往新容器里添加元素，元素添加完成之后，将原容器的引用指向新的容器。\n这样做的好处是可以并发的读，而不需要加锁。\n\n## Set|HashSet\n\n![](Snipaste_2023-04-27_17-10-09.jpg)\n\n**HashSet底层实现**\n![](Snipaste_2023-04-27_17-11-01.jpg)\n\nHashMap以键值对储存数据，而HashSet中add方法只添加一个元素。\nvalue值是一个Object类型的常量，HashSet不关心value值。\n![](Snipaste_2023-04-27_17-12-57.jpg)\n![](Snipaste_2023-04-27_17-12-26.jpg)\n\n### 解决HashSet线程不安全\n\n```\n    public static void main(String[] args) {\n        Set<String> set=new HashSet<>();\n        for(int i=1;i<=40;i++){\n            new Thread(()->{\n                set.add(UUID.randomUUID().toString().substring(0,5));\n                System.out.println(set);\n            },String.valueOf(i)).start();\n        }\n    }\n```\n\n#### Collections.synchronizeSet\n![](Snipaste_2023-04-27_17-17-49.jpg)\n\n#### CopyOnWriteHashSet\nJUC包下的一个类\n![](Snipaste_2023-04-27_17-20-25.jpg)\n\n## Map|HashMap\n![](Snipaste_2023-04-27_17-24-09.jpg)\n\n### 解决HashMap线程不安全\n\n#### HashTable\n![](Snipaste_2023-04-27_17-27-06.jpg)\n\n![](Snipaste_2023-04-27_17-29-12.jpg)\n\n#### Collections.synchronizedMap\n![](Snipaste_2023-04-27_17-31-15.jpg)\n\n#### ConcurrentHashMap\nJUC下的包\n![](Snipaste_2023-04-27_17-33-32.jpg)\n\n## 拓展知识点-JUC\n[JUC系列（一）| 什么是JUC？](https://juejin.cn/post/6997767449567313927)\n","categories":["整理归纳"]},{"title":"HashMap的底层实现","url":"//34725.html","content":"# HashMap 的底层实现\n\n## JDK1.8之前\nJDK1.8 之前 HashMap 底层是 `数组`和`链表` 结合在⼀起使⽤也就是`链表散列`。\n\n所谓 “拉链法” 就是：将链表和数组相结合。也就是说创建⼀个链表数组，数组中每⼀格就是⼀个链\n表。若遇到哈希冲突，则将冲突的值加到链表中即可。\n\n![](Snipaste_2023-04-28_07-50-09.jpg)\n\n\n## JDK1.8之后\nJDK1.8 之后在解决哈希冲突时有了较⼤的变化，当链表⻓度⼤于阈值（默认为8）（将链表转换成红⿊树前会判断，如果当前数组的⻓度⼩于 64，那么会选择先进⾏数组扩容，⽽不是转换为红⿊树）时，将链表转化为红⿊树，以减少搜索时间。\n![](Snipaste_2023-04-28_07-49-57.jpg)\n\n\n> TreeMap、TreeSet 以及 JDK1.8 之后的 HashMap 底层都⽤到了红⿊树。红⿊树就是为了解决⼆叉查找树的缺陷，因为⼆叉查找树在某些情况下会退化成⼀个线性结构。\n>\n","categories":["整理归纳"]},{"title":"说说List,Set,Map三者的区别？三者底层的数据结构？","url":"//50957.html","content":"# 说说 List,Set,Map 三者的区别？三者底层的数据结构？\n\n- List：储存元素是有序的、可重复的。\n- Set：储存元素是无序的、不可重复的。\n- Map：使用键值对（key-value）储存，key是无序、不可重复的；value是无序、可重复的。\n\n## 数据结构\nList：\n- ArrayList：Object[] 数组\n- Vector：Object[] 数组\n- LinkedList: 双向链表(Jdk1.6之前为循环链表，Jdk1.7取消了循环)\n\nSet：\n- HashSet（无序、唯一）：基于HashMap实现，底层采用HashMap保存元素\n- LinkedHashSet：是HashSet的子类，内部通过LinkedHashMap实现，\n- TreeSet（有序、唯一）：红黑树（自平衡的排序二叉树）\n\nMap：\n- HashMap：Jdk1.8之前由数组+链表组成，数组是HashMap的主题，链表是为了解决哈希冲突而存在的（拉链法解决冲突）。Jdk1.8之后，当链表长度大于阈值（默认8）将链表转化红黑树，以减少搜索时间。\n- LinkedHashMap：继承自HashMap，底层仍基于拉链式散列结构即由数组和链表或红黑树组成。另外在基础结构之上增加了一条双向链表，使得上面的结构可以保持键值对的插入顺序。同时通过对链表的相应操作，实现了访问顺序的相关逻辑。\n- HashTable：数组+链表组成，数组是HashTable的主体，链表则是为了解决哈希冲突而存在的。\n- TreeMap：红黑树(自平衡排序的二叉树)\n\n","categories":["整理归纳"]},{"title":"try-catch-finally的使用?","url":"//45288.html","content":"\n\n \n\n \n**使用try-catch-finally关闭资源情况**\n```\n//读取⽂本⽂件的内容\nScanner scanner = null;\ntry {\n    scanner = new Scanner(new File(\"D://read.txt\"));\n    while (scanner.hasNext()) {\n        System.out.println(scanner.nextLine());\n    }\n} catch (FileNotFoundException e) {\n    e.printStackTrace();\n} \nfinally {\n    if (scanner != null) {\n        scanner.close();\n    }\n}\n```\n\n**使用try-with-resources关闭资源情况**\n\n声明单个资源要关闭的情况:\n```\n\ntry ( Scanner scanner = new Scanner(new File(\"test.txt\")) ) {   \n    while (scanner.hasNext()) {\n        System.out.println(scanner.nextLine());\n    }\n} catch (FileNotFoundException e) {\n    e.printStackTrace();\n} \n```\n\n声明多个资源要关闭情况:\n```\ntry (\n    BufferedInputStream bin = new BufferedInputStream(new FileInputStream(new File(\"test.txt\"))); \n    BufferedOutputStream bout = new BufferedOutputStream(new FileOutputStream(new File(\"out.txt\")))\n) {\n    int b;\n    while ((b = bin.read()) != -1) {\n        bout.write(b);\n    }\n}\ncatch (IOException e) {\n    e.printStackTrace();\n}\n```\n \n ","categories":["整理归纳"]},{"title":"关系型数据库和非关系型数据库区别？","url":"//27108.html","content":"\n> 参考博客：[关系数据库和非关系数据库区别](https://worktile.com/kb/ask/31173.html)\n\n## 关系型数据库和非关系型数据库区别\n\n1. 数据一致性不同\n2. 数据储存方式不同\n3. 扩展方式不同\n4. 对事务的支持不同\n\n\n## 常见关系型数据库\n- Oracle\n- Sql Server\n- Mysql\n- Db2\n\n## 常见非关系型数据库\n- Redis\n- MongoDB\n- HBase\n- Neo4j\n\n\n\n\n","categories":["整理归纳"]},{"title":"SpringBean的生命周期说一下","url":"//44604.html","content":"\n> [一文读懂 Spring Bean 的生命周期](https://blog.csdn.net/riemann_/article/details/118500805)","categories":["整理归纳"]},{"title":"SpringBootApplication注解","url":"//59082.html","content":"\n## @SpringBootApplication注解\n\n> [springbootapplication注解包括哪些注解_@SpringBootApplication 注解 详解](https://blog.csdn.net/weixin_39565332/article/details/111395141)\n\n---\n\n@SpringBootApplication注解源码\n```\n\n@Target({ElementType.TYPE})  //注解的作用域\n@Retention(RetentionPolicy.RUNTIME) //注解的生存周期\n@Documented //可以被文档化\n@Inherited  //注解用于标注一个父类的注解是否可以被子类继承\n@SpringBootConfiguration //声明为一个配置类 proxyBeanMethods是否开启bean代理，默认是true,从IOC容器中取；如果是false则每次获取都是一个新的实例 \n@EnableAutoConfiguration //开启自动配置\n@ComponentScan(\n    excludeFilters = {\n      @Filter(\n        type = FilterType.CUSTOM,\n        classes = {TypeExcludeFilter.class}),\n      @Filter(\n        type = FilterType.CUSTOM,\n        classes = {AutoConfigurationExcludeFilter.class})\n  }\n) //包扫描的规则\npublic @interface SpringBootApplication {\n    // ...\n}\n```\n\n### @Target \n自定义所修饰的注解作用范围\n\n+++ ElementType详解\n#### ElementType\n@Target(ElementType.ANNOTATION_TYPE)\n-  TYPE \n   -  用来描述类、接口(包括注解类型) 或enum声明 Class, interface\n-  FIELD\n   -  用来描述域 Field declaration\n-  METHOD\n   -  用来描述方法\n-  PARAMETER\n   -  用来描述参数\n-  CONSTRUCTOR\n   -  用来描述构造器\n-  LOCAL_VARIABLE\n   -  用来描述局部变量\n-  ANNOTATION_TYPE\n   -  声明类型\n-  PACKAGE\n   -  用来描述包\n-  TYPE_PARAMETER\n   -  用来标注类型参数\n-  TYPE_USE\n   -  标注任何类型名称\n-  MODULE\n-  RECORD_COMPONENT \n+++\n\n### @Retention\n定义所修饰的注解的生命周期\n\n+++ RetentionPolicy详解\n#### RetentionPolicy\n@Retention(RetentionPolicy.RUNTIME)\n- SOURCE\n  - 注解只保留在源文件，当Java文件编译成class文件的时候，注解被遗弃。\n- CLASS\n  - 注解被保留到class文件，但jvm加载class文件时候被遗弃，默认的。\n- RUNTIME\n  - 注解被保存到class文件中，jvm加载class文件之后也存在。\n+++\n\n### @Documented\n用来标注生成javadoc的时候是否会被记录。\n### @Inherited\n子类会继承父类的被@Inherited修饰过的注解。\n\n### @SpringBootConfiguration\n- **标注这个类是一个配置类**\n- @Configuration注解的派生注解\n- 与@Configuration注解的功能一致\n- @SpringBootConfiguration是springboot的注解，而@Configuration是spring的注解\n\n#### @Configuration\n> [@SpringBootConfiguration 注解的作用](https://blog.csdn.net/ScorpC/article/details/104752740)\n>\n\n### @EnableAutoConfiguration\n> [SpringBoot之@EnableAutoConfiguration注解](https://blog.csdn.net/zxc123e/article/details/80222967)\n>\n\n开启自动配置\n\n### @ComponentScan\n- 默认扫描@SpringBootApplication所在类的同级包\n- 启动类所在的包高于控制器所在的包，的情况都可以被扫描到\n- 可以通过basePackages参数定义需要扫描的目录\n\n","categories":["整理归纳"]},{"title":"SpringBoot和Spring的区别","url":"//9789.html","content":"\n> [Spring和Spring Boot之间的区别](https://blog.csdn.net/mengxin_chen/article/details/116240326)\n\n**Spring和Spring Boot基于IOC AOP理念实现，Spring Boot集成了Spring。**\n\n\n## Spring框架\nSpring框架解决了企业级的开发的复杂性，它是一个容器框架，用于装java对象（Bean），使程序间的依赖关系交由容器统一管理，松耦合，提高了可测试性和维护效率，Spring主要为我们做了两件事，一省去了我们创建对象的操作，二声明了属性赋值。\n\n对于我来说，Spring框架就是提供了IOC容器、控制反转、依赖注入以及一些模块，简化了大量的代码，便捷了程序的开发，节省了开发时间，提高了效率。Spring框架为我们提供了全面的基础框架，但是Spring框架的配置是一项问题，使用一项第三方jar包的时候都需要配置相关的XML文件，有时候配置起来十分麻烦，降低了编程效率。编写基于ssm框架的项目需要配置Tomcat，把封装好的war包放到Tomcat容器运行。Spring可以接管Web层、业务层、dao层、持久层的组件，可以配置各种bean。\n\n总体而言，Spring框架就是为我们解决开发中的基础性问题，使我们开发者可以更加专注于应用程序的开发，并且Spring框架是轻量级框架，扩展性强，非侵入式框架，消耗的资源少，占用的空间小，运行和部署简单。\n\n## SrpingBoot框架\nSpring Boot是一个微服务框架，延续了Spring框架的核心思想IOC和AOP，简化了应用的开发和部署。\n\n在我看来Spring Boot框架是对Spring框架的补充，它消除了Spring框架配置XML的麻烦事，完善了Spring框架的开发环境，使我们可以更加高效的完成编程，并且为我们提供了 spring-boot-starter-web 依赖，这个依赖包含了Tomcat和springmvc等一系列的web依赖（无需部署war文件）。\n\n以前我们SpringMVC要配置properties文件的时候需要写大量的配置，现在用Spring Boot只需要导入相关依赖，然后写两句话就可以配置完Web程序，并且还提供了@Configuration来替代XML配置。\n\n## Spring 和 Spring Boot的最大的区别在于Spring Boot的自动装配原理\n我们使用Spring创建Web程序时需要导入几个Maven依赖，而Spring Boot只需要一个Maven依赖来创建Web程序，并且Spring Boot还把我们最常用的依赖都放到了一起，现在的我们只需要spring-boot-starter-web这一个依赖就可以完成一个简单的Web应用。\n\n以前用Spring的时候需要XML文件配置开启一些功能，现在Spring Boot不用XML配置了，只需要写一个配置类（@Configuration和继承对应的接口）就可以继续配置。\n\nSpring Boot会通过启动器开启自动装配功能以@EnableAutoConfiguration扫描在spring.factories中的配置，然后通过@XxxxautoConfiguration进行扫描和配置所需要的Bean，自动的扫描Spring\nBoot项目引入的Maven依赖，只有用到的才会被创建成Bean，然后放到IOC容器内。\n\n## 总结\nSpring Boot就是Spring的完善和扩展，就是为我们便捷开发，方便测试和部署，提高效率而诞生的框架技术。\n","categories":["整理归纳"]},{"title":"SpringBoot支持哪些嵌入式web容器？","url":"//24826.html","content":"\n> [Spring Boot支持哪些嵌入式Web容器？](https://blog.csdn.net/m0_51945027/article/details/117539357)\n> \n \nSpring Boot支持的嵌入式servlet容器有: Tomcat、Jetty、Undertow。\n ","categories":["整理归纳"]},{"title":"SpringBoot的自动配置是如何实现的?","url":"//6677.html","content":"\n> [https://blog.csdn.net/h2503652646/article/details/107912486](https://blog.csdn.net/h2503652646/article/details/107912486)","categories":["整理归纳"]},{"title":"Spring中的bean的作用域有哪些?","url":"//63647.html","content":"\n> [Spring 中 Bean 的作用域有哪些？](https://blog.csdn.net/chinachuang/article/details/120136275)","categories":["整理归纳"]},{"title":"Spring动态代理默认用哪一种","url":"//21371.html","content":"\n> [spring的动态代理模式有几种?默认是那种?如何切换?](https://blog.csdn.net/moyanqiuyu/article/details/84305295)\n\nJDK动态代理,基于接口(默认代理模式)，CGLIB动态代理（若要使用需要进行配置）","categories":["整理归纳"]},{"title":"hibernate和mybatis区别","url":"//64579.html","content":"\n工作中使用MyBatis居多,Hibernate了解不是特别多.\n","categories":["整理归纳"]},{"title":"什么是SpringBootStarter?","url":"//15195.html","content":"\n> [SpringBoot starter的理解与使用](https://blog.csdn.net/Jieur/article/details/122438549)\n>\n\n## 什么是SpringBoot starter机制？\n> SpringBoot中的starter是一种非常重要的机制(自动化配置)，能够抛弃以前繁杂的配置，将其统一集成进starter，应用者只需要在maven中引入starter依赖，SpringBoot就能自动扫描到要加载的信息并启动相应的默认配置。\n> \n>starter让我们摆脱了各种依赖库的处理，需要配置各种信息的困扰。SpringBoot会自动通过classpath路径下的类发现需要的Bean，并注册进IOC容器。SpringBoot提供了针对日常企业应用研发各种场景的spring-boot-starter依赖模块。\n>\n>所有这些依赖模块都遵循着约定成俗的默认配置，并允许我们调整这些配置，即遵循“约定大于配置”的理念。","categories":["整理归纳"]},{"title":"什么是Spring框架?","url":"//28206.html","content":"\n> [Spring的主要核心](https://blog.csdn.net/Saika_xy/article/details/87482474)\n\n## 什么是Spring?\nSpring是一个开源框架，为简化企业级应用开发而生。Spring可以使简单的JavaBean实现只有EJB（sun的JavaEE服务器端组件模型）才能实现的功能。\n\n## Spring的核心功能是?\n\n1. 控制反转（IOC）\n2. 面向切面编程（AOP）","categories":["整理归纳"]},{"title":"拦截器和过滤器了解么？","url":"//48331.html","content":"\n> [过滤器 和 拦截器的 6个区别，别再傻傻分不清了](https://blog.csdn.net/xinzhifu1/article/details/106356958)","categories":["整理归纳"]},{"title":"列举一些重要的Spring模块？","url":"//34910.html","content":"\n> [spring框架有哪些主要模块?](https://blog.csdn.net/whoamnew/article/details/83622400)\n\n\n- [核心容器（Spring Core）](#核心容器spring-core)\n- [应用上下文（Spring Context）](#应用上下文spring-context)\n- [Spring面向切面编程（Spring AOP）](#spring面向切面编程spring-aop)\n- [JDBC和DAO模块（Spring DAO）](#jdbc和dao模块spring-dao)\n- [对象实体映射（Spring ORM）](#对象实体映射spring-orm)\n- [Web模块（Spring Web）](#web模块spring-web)\n- [MVC模块（SpringWebMVC）](#mvc模块springwebmvc)\n\n![](./列举一些重要的Spring模块？/Snipaste_2023-05-04_08-11-55.jpg)\n\n\n## 核心容器（Spring Core）  \n核心容器提供Spring框架的基础功能。Spring以bean的方式进行java应用的各大组件及关系的组织和管理。Spring使用BeanFactory来产生和管理bean,是工厂模式的实现。BeanFactory使用控制反转（IOC）模式来将应用的配置和依赖性规范与实际的应用程序代码分开。\n\n\n## 应用上下文（Spring Context）\n实现了ApplicationContext接口，Spring的上下文，拓展了核心容器，提供事件处理、国际化等功能。它还提供了一些企业级服务的功能，提供了JNDI、EJB、RMI的支持。\n\n## Spring面向切面编程（Spring AOP）\n提供切面支持，是个轻量级的容器。Spring管理的任何对象都支持AOP，SpringAOP模块基于Spring的应用程序中的对象提供了事务管理服务，通过使用SpringAOP，就可以将声明性事务管理集成在应用程序中。\n\n## JDBC和DAO模块（Spring DAO）\n提供对JDBC的支持，还提供了DAO的支持，提供事务支持。\n\nJDBC、DAO的抽象层，提供了有意义的异常层次结构实现，可用该结构来管理异常处理，和不同数据库提供商抛出的错误信息，异常层次结构简化了错误处理，并且极大的降低了需要编写的代码数量，比如打开和关闭链接。\n\n## 对象实体映射（Spring ORM）\nORM：Object Relational Mapping，指对象实体映射。Spring插入了若干个ORM框架，提供了ORM对象的关系工具，其中包括Hibernate，JDO和IBatisSQL Map等，所有这些都遵从Spring的通用事务和DAO异常层次结构。\n\n## Web模块（Spring Web）\n拓展了Spring上下文，提供Web应用上下文，对Web开发提供功能上的支持，如请求、表单、异常等。\n\n## MVC模块（SpringWebMVC）\nMVC框架是一个全功能的构建Web应用程序的MVC实现，通过策略接口，MVC框架编程高度可配置的，MVC容纳了大量视图技术，其中包括JSP，POI等，模型由JavaBean来构成，存放于m当中，而视图是一个接口，负责实现模型，控制器表示逻辑代码，由c的事情。","categories":["整理归纳"]},{"title":"说出使用SpringBoot的主要优点","url":"//1453.html","content":"\n> [SpringBoot优势](https://zhuanlan.zhihu.com/p/337079078)\n\n\n- 通过简化配置可以快速搭建Spring应用程序。\n- 内嵌servlet容器，能够直接使用java的main方法启动，因此也不需要部署war包文件\n- 提供starter简化Maven配置。springboot提供了一系列的start pol用来简化maven依赖\n- 自动配置。根据项目的maven依赖POM配置，Spring boot可以自动配置SpringMVC等其它开源框架\n- 应用监控。springboot提供了actuator组件，只需要在配置中加入spring-boot-starter-actuator依赖，通过继承AbstractHealthIndicator这个抽象类，然后在doHealthCheck（）方法中检测服务健康的方法，就可以实现一个简单的监控\n","categories":["整理归纳"]},{"title":"谈谈自己对于SpringIoC和AOP的理解","url":"//5393.html","content":"\n> [Spring框架：谈谈对IOC和AOP的理解](https://blog.csdn.net/weixin_48016395/article/details/123099446)\n\n","categories":["整理归纳"]}]